



import openai
import aiogram
import logging
import asyncio
import csv
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from google.oauth2 import service_account
from googleapiclient.discovery import build
from fuzzywuzzy import fuzz
from prettytable import PrettyTable
from pretty_html_table import build_table
import openpyxl
from openpyxl import Workbook
from openpyxl.writer.excel import save_virtual_workbook
from openpyxl.utils import get_column_letter
from io import BytesIO
import re
import os
import matplotlib.pyplot as plt
import numpy as np
import tempfile
import pandas as pd
import gspread
import requests
from openpyxl.styles import Font, Alignment, Border, Side, PatternFill
import html
from html import escape
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

from google.oauth2 import service_account
import aiohttp
import gspread_asyncio

#import spacy
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.utils.executor import start_webhook

#from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from bs4 import BeautifulSoup
import markdown

def remove_markdown(text):
    """
    –£–¥–∞–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É Markdown –∏–∑ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.
    """
    # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏

    # –£–¥–∞–ª—è–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub(r"\*\*(.*?)\*\*", r"\1", text)
    # –£–¥–∞–ª—è–µ–º –∫—É—Ä—Å–∏–≤


    # –£–¥–∞–ª—è–µ–º –∫–æ–¥

    return text


#nlp = spacy.load("ru_core_news_sm")




user_messages = {}
additional_info_storage = {}
espd_info_storage = {}
szoreg_info_storage = {}
schools_info_storage = {}
message_storage = {}
survey_data_storage = {}

districts = ["–ê–±–∞–Ω—Å–∫–∏–π —Ä-–Ω", "–ê—á–∏–Ω—Å–∫–∏–π —Ä-–Ω", "–ö—É—Ä–∞–≥–∏–Ω—Å–∫–∏–π —Ä-–Ω"]
response_storage = {}
bot_token = ''
bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())
info_text_storage = {}




'''
WEBHOOK_HOST = 'https://rejoller.pythonanywhere.com/'
WEBHOOK_SSL_CERT = '/home/rejoller/mcrbot/YOURPRIVATE.key'
WEBHOOK_PATH = '/my_telegram_bot'
# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WEBAPP_HOST = '0.0.0.0'  # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º
WEBAPP_PORT = 5005       # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'


'''

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup

class Form(StatesGroup):
    waiting_for_number = State()

from aiogram.contrib.fsm_storage.redis import RedisStorage2

import redis

storage = RedisStorage2(db=0, host='redis-11158.c304.europe-west1-2.gce.cloud.redislabs.com', port=11158, password='aoOlWYyOKYFXMozbi6b24ja0A011RuEl')

storage2 = redis.Redis(db=0, host='redis-11158.c304.europe-west1-2.gce.cloud.redislabs.com', port=11158, password='aoOlWYyOKYFXMozbi6b24ja0A011RuEl')



# –£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –º–æ–¥–µ–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è aiogram
openai.api_key = ''


SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
SERVICE_ACCOUNT_FILE = '/home/rejoller/mcrbot/credentials.json'
SERVICE_ACCOUNT_FILE = '/home/rejoller/mcrbot/credentials_Masha.json'



creds = None
creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)

# ID —Ç–∞–±–ª–∏—Ü—ã
#SPREADSHEET_ID_1 = '1lA6wXSOmi6nj4HDOpFdzm4_KaUQAAakNNxOyXx7p1ZQ'

#–ú–∞—à–∞ -—Å—Ä–æ–∫–∞ –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
SPREADSHEET_ID_1 = '1ghoLFQ6Ydbz0QRMgCfAT2_0fktJSNI4HkHIu6qKWWbU'


SPREADSHEET_ID_2 = '1qoSebEXzO9KpIZXXDD1QSA4NSuQ07byJ'

import gspread
from google.oauth2 import service_account

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å–ª—É–∂–±—ã (Service Account)
credentials = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ gspread —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–ª—É–∂–±—ã
#gc = gspread.AsyncioAuthManager(credentials)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
#await gc.authorize()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def log_user_data(user_id, first_name, last_name, username, message_text):
    file_path = 'users_data.csv'
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª. –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    try:
        with open(file_path, 'x', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Timestamp', 'User ID', 'First Name', 'Last Name', 'Username', 'Message'])
    except FileExistsError:
        pass

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
    with open(file_path, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([current_time, user_id, first_name, last_name, username, message_text])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
async def log_user_data_from_message(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    message_text = message.text

    log_user_data(user_id, first_name, last_name, username, message_text)

def split_message(message, max_length=4096):
    if len(message) <= max_length:
        return [message]

    messages = []
    while len(message) > max_length:
        split_index = message[:max_length].rfind('\n')
        if split_index == -1:
            split_index = max_length

        messages.append(message[:split_index])
        message = message[split_index:].lstrip()

    if message:
        messages.append(message)

    return messages



@dp.message_handler(commands=['help'])
async def handle_help_command(message: types.Message):
    await log_user_data_from_message(message)
    help_text = (
        '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏–ª–∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏, –≤—ã–±–µ—Ä–∏ /2g /3g –∏–ª–∏ /4g. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö –±–µ–∑ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ –∂–º–∏ /nomobile\n\n'
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –§–ê–ü –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –ü–ê–û "–†–æ—Å—Ç–µ–ª–µ–∫–æ–º" –Ω–∞–∂–º–∏ /fp\n'
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫ –ê–≥.–ì–û–∏–ß–° –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –ü–ê–û "–†–æ—Å—Ç–µ–ª–µ–∫–æ–º" –Ω–∞–∂–º–∏ /ago\n\n'
        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –¢–û–†–ö–ù–î, –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "—Ç–æ—Ä" –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. '
        '–ù–∞–ø—Ä–∏–º–µ—Ä, "—Ç–æ—Ä –ï–Ω–∏—Å–µ–π—Å–∫–∏–π".\n'
        '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º—É –∫—Ä–∞—é, –∂–º–∏ /knd_kraj\n\n'
        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ, –∂–º–∏ /otpusk\n\n'
        '–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ @rejoller.')
    await message.reply(help_text)

@dp.message_handler(commands=['knd_kraj'])
async def handle_knd_kraj_command(message: types.Message):
    await log_user_data_from_message(message)
    await message.reply('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    await handle_knd_kraj_message(message)

@dp.message_handler(commands=['fp'])
async def handle_fp_command(message: types.Message):
    # –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö
    user_first_name = message.from_user.first_name
    await message.reply(f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå')
    log_user_data_from_message(message)
    fp_data, fp_headers = load_fp_data()

    # –ü–µ—Ä–µ–¥–∞–π—Ç–µ fp_data –∏ fp_headers –≤ —Ñ—É–Ω–∫—Ü–∏—é handler_fp_message
    await handler_fp_message(message, fp_data, fp_headers)
    del fp_data
    del fp_headers

@dp.message_handler(commands=['ago'])
async def handle_ago_command(message: types.Message):
    # –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –ê–≥–ì–û–∏–ß–°
    user_first_name = message.from_user.first_name
    await message.reply(f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå')
    log_user_data_from_message(message)
    aggoics_data, aggoics_headers = load_aggoics_data()

    # –ü–µ—Ä–µ–¥–∞–π—Ç–µ aggoics_data –∏ aggoics_headers –≤ —Ñ—É–Ω–∫—Ü–∏—é handler_aggoics_message
    await handler_aggoics_message(message, aggoics_data, aggoics_headers)
    del aggoics_data
    del aggoics_headers

@dp.message_handler(commands=['otpusk'])
async def handle_otpusk_command(message: types.Message, days_ahead=14):
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–ø—É—Å–∫–∞—Ö
    print ('–æ—Ç–ø—É—Å–∫ –∑–∞–ø—É—â–µ–Ω')
    #await message.reply('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    await bot.send_message(message.chat.id, 'üèù–ó–∞–≥—Ä—É–∂–∞—éÔ∏è')
    await log_user_data_from_message(message)
    otpusk_data = await load_otpusk_data()


    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ –∏ —É—Ö–æ–¥—è—Ç –≤ –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π
    employees_on_vacation, employees_starting_vacation_soon = get_employees_on_vacation(otpusk_data, days_ahead)

    response = ""

    if employees_on_vacation:
        response += '*–°–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ*üòé\n\n'
        for row in employees_on_vacation:
            response += f"{row[0]}, {row[1]}\n"
            response += f"  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: {row[3]}\n"
            response += f"  - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: {row[4]}\n\n"

    if employees_starting_vacation_soon:
        response += f"\n*–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —É—Ö–æ–¥—è—â–∏–µ –≤ –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ {days_ahead} –¥–Ω–µ–π*\n\n"
        for emp_row in employees_starting_vacation_soon:
            response += f"{emp_row[0]}, {emp_row[1]}\n"
            response += f"  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: {emp_row[3]}\n"
            response += f"  - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: {emp_row[4]}\n\n"

    if not response:
        response = "–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –≤ –æ—Ç–ø—É—Å–∫–µ, –∏ –Ω–∏–∫—Ç–æ –Ω–µ —É—Ö–æ–¥–∏—Ç –≤ –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π."

    #response += f"\n\n–ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫, –∂–º–∏ /employee"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT API
    #gpt_response = await send_request_to_otpusk_command(message.chat.id, response)
    #print(response)
    messages = split_message(response)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for msg in messages:
        #await message.reply(msg, parse_mode='Markdown')
        await bot.send_message(message.chat.id, msg, parse_mode='Markdown')

#2

async def send_request_to_otpusk_command(chat_id, response):
    global info_text_storage
    trimmed_info = info_text_storage.get(chat_id, "")[:7000]
    messages = [
        {"role": "system", "content": "–¢—ã —Å–æ–æ–±—â–∞–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –≤ –æ—Ç–ø—É—Å–∫–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∞ —Ç—ã –ø–∏—Å–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π –æ–±–∑–æ—Ä  –Ω–∞ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫. –ë—É–¥—å –ª–∞–∫–æ–Ω–∏—á–µ–Ω –Ω–µ –ø–∏—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∫–∞–∂–¥–æ–º—É, —Å–¥–µ–ª–∞–π –æ–¥–Ω–æ –¥–ª—è –≤—Å–µ—Ö –≤ –∫–æ–Ω—Ü–µ. –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤."},
        {"role": "user", "content": "–°–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ:\n\n"
                                   "- –•–æ—Ä—É–Ω–æ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á, –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –º–∏–Ω–∏—Å—Ç—Ä–∞ - –Ω–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞\n"
                                   "  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: 13.06.2023\n"
                                   "  - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: 30.06.2023\n\n"
                                   "- ü¶Ñ –©–µ—Ä–±–∞–∫–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç\n"
                                   "  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: 13.06.2023\n"
                                   "  - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: 26.06.2023\n\n"
                                   "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —É—Ö–æ–¥—è—â–∏–µ –≤ –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π:\n\n"
                                   "- –ö—Ä—É–∂–∏–ª–∏–Ω–∞ –ï–ª–µ–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞, –≥–ª–∞–≤–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç\n"
                                   "  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: 26.06.2023\n"
                                   "  - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: 14.07.2023\n\n"},

        {"role": "assistant", "content": "üå¥üåû *–°–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ:*\n\n"
                                          "- –•–æ—Ä—É–Ω–æ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á, –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –º–∏–Ω–∏—Å—Ç—Ä–∞ - –Ω–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞\n"
                                          "  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: 13.06.2023\n"
                                          "  - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: 30.06.2023\n\n"
                                          "- ü¶Ñ –©–µ—Ä–±–∞–∫–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç\n"
                                          "  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: 13.06.2023\n"
                                          "  - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: 26.06.2023\n\n\n"
                                        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —É—Ö–æ–¥—è—â–∏–µ –≤ –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π:\n\n"
                                          "- –ö—Ä—É–∂–∏–ª–∏–Ω–∞ –ï–ª–µ–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞, –≥–ª–∞–≤–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç\n"
                                          "  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: *26.06.2023*\n"
                                          "  - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: *14.07.2023*\n\n"
                                          "–ö–æ–ª–ª–µ–≥–∏, —Ö–æ—Ä–æ—à–æ –≤–∞–º –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ –Ω–∞ —Ä–∞–±–æ—Ç—É!"
                                          "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—Ä—É–≥–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É - –Ω–∞–∂–º–∏—Ç–µ /employee"},
        {"role": "user", "content": "–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–∞–π –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–∂–µ, –Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏, –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å—Ç—Ä–æ–∫—É. –¥–∞—Ç—ã –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º:"},
        {"role": "user", "content": response},
    ]

    response = openai.ChatCompletion.create(
        model="gpt-4-turbo-preview",
        messages=messages,
        max_tokens=2000,
        n=1,
        temperature=1,
        stream=True,
    )
    message_content = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
    message_content_no_md = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
    chunk_counter = 0  # –°—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    message = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        while True:
            chunk = next(response)  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç

            if chunk["object"] == "error":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—à–∏–±–∫–æ–π
                # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                break

            delta = chunk.get("choices", [{}])[0].get("delta", {})  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–ª—å—Ç—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
            message_delta = delta.get("content")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–µ–ª—å—Ç—ã

            if message_delta is not None and message_delta.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç—ã–º
                message_content += message_delta  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–ª—å—Ç—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
                message_content_no_md += remove_markdown(message_delta)  # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–ª—å—Ç—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                chunk_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤

            if chunk_counter % 20 == 0 or chunk["object"] == "chat.completion":  # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–æ 20 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
                if message_content_no_md:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                    if message is None:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                        message = await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                        message = await bot.send_message(chat_id=chat_id, text=message_content_no_md)
                    else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
                        if message.text != message_content_no_md:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                            await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                            try:
                                message = await bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=message_content_no_md)
                            except aiogram.exceptions.MessageNotModified:
                                pass

            await asyncio.sleep(0.05)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏

    except StopIteration:
        pass

    if message_content and (message is None or message.text != message_content):
        if message is None:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            message = await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
            message = await bot.send_message(chat_id=chat_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
        else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
            await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
            try:
                message = await bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
            except aiogram.exceptions.MessageNotModified:
                pass

    if message_content and message is not None:
        return message.text

    return None
'''

async def send_request_to_otpusk_command(chat_id, response):
    global info_text_storage
    trimmed_info = info_text_storage.get(chat_id, "")[:7000]
    messages = [
        {"role": "system", "content": "–¢—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—à—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–æ–∫ –Ω–µ –±–æ–ª–µ–µ 10% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞."},

        {"role": "user", "content": response},
    ]

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-16k-0613",
        messages=messages,
        max_tokens=1000,
        n=1,
        temperature=0.8,
        stream=True,
    )
    message_content = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    chunk_counter = 0  # –°—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤F
    message = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        while True:
            chunk = next(response)  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç

            #print("Received chunk:")
            #print(chunk)

            if chunk["object"] == "error":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—à–∏–±–∫–æ–π
                # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                break

            delta = chunk.get("choices", [{}])[0].get("delta", {})  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–ª—å—Ç—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞F
            message_delta = delta.get("content")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–µ–ª—å—Ç—ã

            if message_delta is not None and message_delta.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç—ã–º
                message_content += message_delta  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–ª—å—Ç—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                chunk_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤

            if chunk_counter % 25 == 0 or chunk["object"] == "chat.completion":  # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–æ 20 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
                if message_content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                    if message is None:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                        message = await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                        message = await bot.send_message(chat_id=chat_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
                    else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
                        if message.text != message_content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                            await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                            try:
                                message = await bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
                            except aiogram.exceptions.MessageNotModified:
                                pass

                    #print("Current message:")
                   # print(message_content)
                else:
                    print("Empty message content, skipping...")

          # await asyncio.sleep(0.05)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏

    except StopIteration:
        pass

    if message_content and (message is None or message.text != message_content):
        if message is None:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            message = await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
            message = await bot.send_message(chat_id=chat_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
        else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
            await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
            try:
                message = await bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
            except aiogram.exceptions.MessageNotModified:
                pass



    if message_content and message is not None:
        return message.text

    return None

'''


# –§—É–Ω–∫—Ü–∏—è split_message_table –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

def split_message_table(headers, data, max_message_length=4096):
    table = PrettyTable()
    table.field_names = headers

    for row in data:
        if len(row) == len(headers):
            table.add_row(row)
        else:
            print(f"Skipping row with incorrect number of values: {row}")

    table_str = table.get_string()

    messages = []
    lines = table_str.split('\n')
    current_message = lines[0] + '\n' + lines[1] + '\n'

    for row in lines[2:]:
        test_message = current_message + row + '\n'

        if len(test_message) <= max_message_length:
            current_message = test_message
        else:
            messages.append(f"<pre>{current_message.strip()}</pre>")
            current_message = lines[0] + '\n' + lines[1] + '\n' + row + '\n'

    if current_message:
        messages.append(f"<pre>{current_message.strip()}</pre>")

    return messages


#3

async def get_value(row, index, default_value=''):
    try:
        return row[index]
    except IndexError:
        return default_value


def normalize_text_v2(text):
    text = text.lower().replace('—ë', '–µ').replace('—Ä-–Ω', '—Ä–∞–π–æ–Ω').replace('-', ' ')
    text = re.sub(r'(N|‚Ññ|No)', 'N', text, flags=re.IGNORECASE)
    text = text.replace(' —Ä–∞–π–æ–Ω', '').strip()
    return text







from google.oauth2 import service_account
import gspread_asyncio

SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
SERVICE_ACCOUNT_FILE = '/home/rejoller/mcrbot/credentials.json'

creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)


headers = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ù–∞—Å–µ–ª–µ–Ω–∏–µ', '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å', '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç', '–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–¢–∞–∫—Å–æ—Ñ–æ–Ω', '–°–ó–û (—É–∑–µ–ª)']


from openpyxl.styles import Font, Alignment, Border, Side, PatternFill
from openpyxl.utils import get_column_letter
from openpyxl import Workbook


def create_excel_file(headers, data):
    wb = Workbook()
    ws = wb.active

    # –®—Ä–∏—Ñ—Ç –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_font = Font(name='Arial', bold=True)
    header_alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)

    # –®—Ä–∏—Ñ—Ç –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_font = Font(name='Arial')
    data_alignment = Alignment(horizontal='left', vertical='center', wrap_text=True)

    # –ì—Ä–∞–Ω–∏—Ü—ã —è—á–µ–µ–∫
    border = Border(left=Side(style='thin'),
                    right=Side(style='thin'),
                    top=Side(style='thin'),
                    bottom=Side(style='thin'))

    # –ó–∞–ª–∏–≤–∫–∞ —Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_fill = PatternFill(start_color='FFFF00', end_color='FFFF00', fill_type='solid')

    for col_num, header in enumerate(headers, 1):
        col_letter = get_column_letter(col_num)
        ws.column_dimensions[col_letter].width = 20
        cell = ws.cell(row=1, column=col_num, value=header)
        cell.font = header_font
        cell.alignment = header_alignment
        cell.border = border
        cell.fill = header_fill

    for row_num, row_data in enumerate(data, 2):
        for col_num, cell_data in enumerate(row_data, 1):
            cell = ws.cell(row=row_num, column=col_num, value=cell_data)
            cell.font = data_font
            cell.alignment = data_alignment
            cell.border = border

    file_name = "test_file.xlsx"
    wb.save(file_name)
    #  print(f"File saved as {file_name}")
    return file_name


from openpyxl.styles import PatternFill
from openpyxl.utils import get_column_letter
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side
from io import BytesIO

def create_excel_file_2(data):
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤

    #sorted_data = sorted(data, key=lambda x: int(x[1]) if (len(x) > 1 and str(x[1]).isdigit()) else 0, reverse=True)

    sorted_data = sorted(data, key=lambda x: x[4] if len(x) > 4 else 0, reverse=True)


    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    sorted_data = [row for row in sorted_data if any(row)]

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
    data = [[i+1] + row for i, row in enumerate(sorted_data)]

    wb = Workbook()
    ws = wb.active

    headers = ['–ü–æ–∑–∏—Ü–∏—è', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤', '–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–∏–Ω—Ü–∏—Ñ—Ä—ã –†–æ—Å—Å–∏–∏']

    header_font = Font(name='Arial', bold=True)
    header_alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
    data_font = Font(name='Arial')
    data_alignment = Alignment(horizontal='left', vertical='center', wrap_text=True)
    border = Border(left=Side(style='thin'),
                    right=Side(style='thin'),
                    top=Side(style='thin'),
                    bottom=Side(style='thin'))

    # –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ —Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
    header_fill = PatternFill(start_color='add8e6', end_color='add8e6', fill_type='solid')

    for col_num, header in enumerate(headers, 1):
        col_letter = get_column_letter(col_num)
        ws.column_dimensions[col_letter].width = 20
        cell = ws.cell(row=1, column=col_num, value=header)
        cell.font = header_font
        cell.alignment = header_alignment
        cell.border = border
        cell.fill = header_fill

    for row_num, row_data in enumerate(data, 2):
        for col_num, cell_data in enumerate(row_data, 1):
            cell = ws.cell(row=row_num, column=col_num, value=cell_data)
            cell.font = data_font
            cell.alignment = data_alignment
            cell.border = border

    excel_file = BytesIO()
    wb.save(excel_file)
    excel_file.seek(0)
    return excel_file




def adjust_column_width(worksheet):
    for col in worksheet.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            value = str(cell.value)
            length = len(value.encode('utf-8'))
            if length > max_length:
                max_length = length

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–∞
        estimated_width = max_length * 0.7  # –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞–∑–Ω—ã—Ö —à–∏—Ä–∏–Ω —Å–∏–º–≤–æ–ª–æ–≤
        worksheet.column_dimensions[column].width = estimated_width


def convert_to_excel(data):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.sheet_view.showGridLines = False
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_font = Font(bold=True, size=12)
    header_alignment = Alignment(horizontal='center', vertical='center')
    header_border = Border(left=Side(style='thin'),
                           right=Side(style='thin'),
                           top=Side(style='thin'),
                           bottom=Side(style='thin'))
    header_fill = PatternFill(start_color="AED6F1",
                              end_color="AED6F1",
                              fill_type="solid")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    data_font = Font(size=11)
    data_alignment = Alignment(horizontal='left', vertical='center')
    data_border = Border(left=Side(style='thin'),
                         right=Side(style='thin'),
                         top=Side(style='thin'),
                         bottom=Side(style='thin'))
    data_fill = PatternFill(start_color="ECECEC",
                            end_color="ECECEC",
                            fill_type="solid")

    for row_idx, row in enumerate(data, start=1):
        for col_idx, value in enumerate(row, start=1):
            cell = ws.cell(row=row_idx, column=col_idx, value=value)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
            if row_idx == 1:
                cell.font = header_font
                cell.alignment = header_alignment
                cell.border = header_border
                cell.fill = header_fill
            else:
                cell.font = data_font
                cell.alignment = data_alignment
                cell.border = data_border
                if row_idx % 2 == 0:
                    cell.fill = data_fill

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    adjust_column_width(ws)

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä
    ws.auto_filter.ref = f"A1:{get_column_letter(ws.max_column)}{ws.max_row}"

    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
    ws.freeze_panes = "A2"

    buffer = io.BytesIO()
    wb.save(buffer)
    buffer.seek(0)
    return buffer


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")







#4

import folium
from aiogram.types import InputFile
from folium.plugins import MarkerCluster

def load_goroda_data():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID_1, range='goroda2.0!A1:T1721').execute()
    rows = result.get('values', [])
    return rows



async def create_map_with_markers(rows):
    map_with_markers = folium.Map(location=[59.664482, 91.913147], zoom_start=10)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä –º–∞—Ä–∫–µ—Ä–æ–≤
    marker_cluster = MarkerCluster().add_to(map_with_markers)

    for row in rows:
        if row[7] and row[8]:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞
            folium.Marker(
                location=[float(row[7]), float(row[8])],
                popup=row[1],
                icon=None,
            ).add_to(marker_cluster)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫–ª–∞—Å—Å–æ–º leaflet-control-attribution
    map_with_markers.get_root().html.add_child(folium.Element("<style>.leaflet-control-attribution { display: none; }</style>"))

    return map_with_markers


def webAppKeyboard(url):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    webAppTest = types.WebAppInfo(url)
    one_butt = types.InlineKeyboardButton(text="–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", web_app=webAppTest)
    two_butt = types.InlineKeyboardButton(text="–ü–ö", url=url)
    keyboard.add(one_butt, two_butt)
    return keyboard  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


def webAppKeyboard_jt(url):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    webAppTest = types.WebAppInfo(url)
    button = types.InlineKeyboardButton(text="–æ—Ç–∫—Ä—ã—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É", web_app=webAppTest)

    keyboard.add(button)
    return keyboard  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


async def filter_and_send_data(message, filter_func, command):
    goroda_data = load_goroda_data()
    headers = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞', '–ù–∞—Å–µ–ª–µ–Ω–∏–µ 2010', '–ù–∞—Å–µ–ª–µ–Ω–∏–µ 2020', '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å', '–ü—Ä–æ–≥—Ä–∞–º–º–∞']
    filtered_data = [headers]
    filtered_goroda_data = []

    for row in goroda_data:
        if filter_func(row):
            filtered_row = [row[i] if i < len(row) else '' for i in [1, 2, 5, 3, 11]]
            filtered_data.append(filtered_row)
            filtered_goroda_data.append(row)

    # –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
    map_with_markers = await create_map_with_markers(filtered_goroda_data)
    map_filename = f"{command}_map.html"
    map_with_markers.save(map_filename)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Excel –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    buffer = convert_to_excel(filtered_data)
    filename = f"{command}.xlsx"
    with open(filename, "wb") as excel_file:
        excel_file.write(buffer.getvalue())

    with open(filename, "rb") as excel_file:
        document = InputFile(excel_file)
        await message.answer_document(document=document, caption="–°–ø–∏—Å–æ–∫ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")

    os.remove(filename)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–æ–π
    # with open(map_filename, "rb") as map_file:
    #    document = InputFile(map_file)
    #  bot.send_document(message.chat.id, document=document, caption=map_filename)

    os.remove(map_filename)
    url = f"https://rejoller.pythonanywhere.com/{command}"
    await message.answer("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=webAppKeyboard(url))


def filter_2g(row):
    pattern = r"\b(2G|3G|4G)\b"
    result = re.findall(pattern, row[3])
    # filename = "2G.xlsx"
    return bool(result)


def filter_3g(row):
    pattern = r"\b(3G|4G)\b"
    result = re.findall(pattern, row[3])
    return bool(result)


def filter_4g(row):
    return "4G" in row[3]


def filter_nomobile(row):
    return row[3] == "-"


@dp.message_handler(commands=['2g'])
async def handle_2g_command(message: types.Message):
    log_user_data_from_message(message)
    await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    await filter_and_send_data(message, filter_2g, "2G")


@dp.message_handler(commands=['3g'])
async def handle_3g_command(message: types.Message):
    log_user_data_from_message(message)
    await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    await filter_and_send_data(message, filter_3g, "3G")


@dp.message_handler(commands=['4g'])
async def handle_4g_command(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    await filter_and_send_data(message, filter_4g, "4G")


@dp.message_handler(commands=['nomobile'])
async def handle_nomobile_command(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    await filter_and_send_data(message, filter_nomobile, "nomobile")


@dp.message_handler(commands=['jt'])
async def handle_jt_command(message: types.Message):
    log_user_data_from_message(message)

    url = f"https://fantastic-engine.vercel.app/"
    await message.answer("üòÅ")
    await asyncio.sleep(3)
    await message.answer("ü§≠", reply_markup=webAppKeyboard_jt(url))


def load_fp_data():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID_1, range='–§–ê–ü!A1:M55').execute()
    rows = result.get('values', [])

    fp_data = []
    fp_headers = ['–ê–¥—Ä–µ—Å', '–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', '–°–∫–æ—Ä–æ—Å—Ç—å', '–ö–æ–Ω—Ç–∞–∫—Ç—ã', '–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è']

    for row in rows:
        # –í—ã–≥—Ä—É–∂–∞–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã B, C, D, F, G, H, I
        if any(row) and "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ" not in row:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–ò—Å–∫–ª—é—á"
            filled_row = [row[i] if i < len(row) else '' for i in [1, 2, 3, 5, 6, 7, 8]]
            fp_data.append(filled_row)

    return fp_data, fp_headers

#5


async def load_aggoics_data():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    gc = gspread.AsyncioAuthManager(credentials=creds)
    await gc.authorize()
    sheet = await gc.open_by_key(SPREADSHEET_ID_1).worksheet('–ê–≥–ì–û–∏–ß–°')
    rows = await sheet.get_all_values()

    aggoics_data = []
    aggoics_headers = ['–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞', '–ê–¥—Ä–µ—Å', '–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è', '–°–∫–æ—Ä–æ—Å—Ç—å']

    for row in rows:
        # –í—ã–≥—Ä—É–∂–∞–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã D, E, F, G, I, J
        if any(row):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
            filled_row = [row[i] if i < len(row) else '' for i in [3, 4, 5, 6, 8, 9]]
            aggoics_data.append(filled_row)

    return aggoics_data, aggoics_headers


async def load_otpusk_data():
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    sheet = await spreadsheet.worksheet('otpusk')
    rows = await sheet.get('A1:F100')
    return rows




def get_employees_on_vacation(otpusk_data, days_ahead=3):
    today = datetime.today().date()
    future_vacation_start = today + timedelta(days=days_ahead)
    employees_on_vacation = []
    employees_starting_vacation_soon = []

    for row_idx, row in enumerate(otpusk_data):
        if row_idx == 0:  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            continue
        if len(row) >= 5:
            try:
                start_date = datetime.strptime(row[3], "%d.%m.%Y").date()
                end_date = datetime.strptime(row[4], "%d.%m.%Y").date()

                if start_date <= today <= end_date:
                    employees_on_vacation.append(row)

                if today < start_date <= future_vacation_start:
                    employees_starting_vacation_soon.append(row)

            except ValueError:
                pass  # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã

    return employees_on_vacation, employees_starting_vacation_soon

from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt


async def create_individual_radar_chart(chat_id, data_df, title):
    print("create_individual_radar_chart called with data:", data_df)

    # –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
    img_width, img_height = 1000, 600
    img = Image.new('RGB', (img_width, img_height), 'white')
    draw = ImageDraw.Draw(img)

    # –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title_font_path = "/home/rejoller/mysite/static/ofont.ru_Geologica.ttf"
    title_font = ImageFont.truetype(title_font_path, 30)
    text_font = ImageFont.truetype(title_font_path, 18)

    title_bbox = draw.textbbox((0,0), title, font=title_font)
    title_width, title_height = title_bbox[2] - title_bbox[0], title_bbox[3] - title_bbox[1]
    draw.text(((img_width - title_width) // 2, 20), title, fill="black", font=title_font)

    # –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø—ã –∏ —É–º–µ–Ω—å—à–∏—Ç–µ –∏—Ö
    logo_paths = [
        '/home/rejoller/mysite/static/tele2_1.png',
        '/home/rejoller/mysite/static/megafon_1.png',
        '/home/rejoller/mysite/static/beeline_1.png',

        '/home/rejoller/mysite/static/mts_1.png',
    ]

    logos = []
    resize_factors = [0.1, 0.1, 0.1*2, 0.1/3] # –£–º–µ–Ω—å—à–∞–µ–º –ú–¢–° –≤ 3 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ë–∏–ª–∞–π–Ω –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
    for i, path in enumerate(logo_paths):
        logo = Image.open(path)
        logo_width, logo_height = logo.size
        logos.append(logo.resize((int(logo_width * resize_factors[i]), int(logo_height * resize_factors[i]))))

    # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø—ã
    column_width = img_width // 4
    for i, logo in enumerate(logos):
        x = column_width * i + (column_width - logo.width) // 2
        y = 100
        if i in [1, 2]:  # –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ë–∏–ª–∞–π–Ω –∏ –ú–µ–≥–∞—Ñ–æ–Ω
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
            logo_img = Image.new('RGBA', (img_width, img_height), (255, 255, 255, 0))
            logo_img.paste(logo, (x, y))

            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.alpha_composite(img.convert('RGBA'), logo_img).convert('RGB')
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö
            img.paste(logo, (x, y))

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç draw –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    draw = ImageDraw.Draw(img)

    # –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ data_df –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
    operator_columns = [
        ('–£—Ä–æ–≤–µ–Ω—å_Tele2', '–ö–∞—á–µ—Å—Ç–≤–æ_Tele2'),
        ('–£—Ä–æ–≤–µ–Ω—å_Megafon', '–ö–∞—á–µ—Å—Ç–≤–æ_Megafon'),
        ('–£—Ä–æ–≤–µ–Ω—å_Beeline', '–ö–∞—á–µ—Å—Ç–≤–æ_Beeline'),
        ('–£—Ä–æ–≤–µ–Ω—å_MTS', '–ö–∞—á–µ—Å—Ç–≤–æ_MTS')
    ]

    y_start = y + logos[0].height + 20
    y_step = 20

    for idx, row_series in data_df.iterrows():
        for i, (level_column, quality_column) in enumerate(operator_columns):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            if pd.notnull(row_series[level_column]) or pd.notnull(row_series[quality_column]):
                text = f"{row_series.get(level_column, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} {row_series.get(quality_column, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
            else:
                text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            x = column_width * i + (column_width - logos[i].width) // 2  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            y_text = y_start + idx * y_step
            print(f"Drawing text at ({x}, {y_text}): {text}")
            draw.text((x, y_text), text, fill="black", font=text_font)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    temp_file_path = "temp_survey_result.png"
    img.save(temp_file_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_photo(chat_id, open(temp_file_path, 'rb'))

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(temp_file_path)
















def create_pie_chart(yes_count, no_count, filename):
    labels = ['–ï—Å—Ç—å', '–ù–µ—Ç']
    sizes = [yes_count, no_count]
    colors = ['#2ecc71', '#e74c3c']

    # –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç figure —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞) –≤ –¥—é–π–º–∞—Ö
    plt.figure(figsize=(2, 2))  # –ó–¥–µ—Å—å 2.5 –¥—é–π–º–∞ - —ç—Ç–æ —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã

    plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
    plt.axis('equal')
    plt.savefig(filename, dpi=400, bbox_inches='tight')  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (DPI) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä bbox_inches
    plt.clf()


def create_bar_chart(data, filename):
    labels, yes_values, no_values = zip(*data)

    total_values = [yes + no for yes, no in zip(yes_values, no_values)]
    yes_percentages = [yes / total * 100 if total != 0 else 0 for yes, total in zip(yes_values, total_values)]
    no_percentages = [no / total * 100 if total != 0 else 0 for no, total in zip(no_values, total_values)]

    labels = labels[1:]
    yes_percentages = yes_percentages[1:]
    no_percentages = no_percentages[1:]

    y = np.arange(len(labels))
    width = 0.6
    colors = ['#2ecc71', '#e74c3c']

    fig, ax = plt.subplots(figsize=(12, 16), dpi=300)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ DPI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    rects1 = ax.barh(y, yes_percentages, label='–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥', color=colors[0], align='center')
    rects2 = ax.barh(y, no_percentages, label='–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥', left=yes_percentages, color=colors[1],
                     align='center')

    ax.set_title('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¢–û–†–ö–ù–î –≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–º –∫—Ä–∞–µ')
    ax.set_yticks(y)
    ax.set_yticklabels(labels)
    ax.legend()

    xmin = 0
    xmax = 100
    ax.set_xlim([xmin, xmax])

    def autolabel(rects, labels):
        for rect, label in zip(rects, labels):
            width = rect.get_width()
            ax.annotate('{:.1f}%'.format(label),
                        xy=(width, rect.get_y() + rect.get_height() / 2),
                        xytext=(3, 0),
                        textcoords="offset points",
                        ha='left', va='center')

    autolabel(rects1, yes_percentages)
    # autolabel(rects2, no_percentages)

    plt.tight_layout()
    plt.savefig(filename)
    plt.close()

'''
async def search_szofed_values(column_4_value):
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    result = await spreadsheet.values_batch_get('szofed!A1:M2412')
    rows = result.get('valueRanges', [])[0].get('values', [])
    found_values = [row for row in rows if column_4_value.lower() == row[0].lower()]
    return found_values
'''
async def search_szofed_values(column_4_value, spreadsheet):
    result = await spreadsheet.values_batch_get('szofed!A1:M2412')
    rows = result.get('valueRanges', [])[0].get('values', [])
    found_values = [row for row in rows if column_4_value.lower() == row[0].lower()]
    return found_values



@dp.message_handler(commands=['aggoics'])
async def handle_aggoics_command(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    aggoics_data, aggoics_headers = await load_aggoics_data()
    await filter_and_send_data(message, aggoics_data, aggoics_headers)


@dp.message_handler(commands=['otpusk'])
async def handle_otpusk_command(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    otpusk_data = await load_otpusk_data()
    await filter_and_send_data(message, otpusk_data)


async def filter_and_send_data(message: types.Message, data, headers=None):
    if headers:
        filtered_data = [headers] + data
    else:
        filtered_data = data

    filtered_data = [list(map(str, row)) for row in filtered_data]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    for i in range(0, len(filtered_data), 10):
        chunk = filtered_data[i:i+10]
        text = '\n'.join(['\t'.join(row) for row in chunk])
        await message.answer(text, parse_mode=types.ParseMode.MARKDOWN)


@dp.message_handler(commands=['employees_vacation'])
async def handle_employees_vacation_command(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    otpusk_data = await load_otpusk_data()
    employees_on_vacation, employees_starting_vacation_soon = get_employees_on_vacation(otpusk_data)

    if employees_on_vacation:
        await message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –æ—Ç–ø—É—Å–∫–µ:')
        await message.answer('\n'.join(['\t'.join(row) for row in employees_on_vacation]), parse_mode=types.ParseMode.MARKDOWN)
    else:
        await message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –æ—Ç–ø—É—Å–∫–µ –Ω–µ—Ç.')

    if employees_starting_vacation_soon:
        await message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏:')
        await message.answer('\n'.join(['\t'.join(row) for row in employees_starting_vacation_soon]), parse_mode=types.ParseMode.MARKDOWN)
    else:
        await message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏, –Ω–µ—Ç.')


@dp.message_handler(commands=['pie_chart'])
async def handle_pie_chart_command(message: types.Message):
    await message.answer('–°–æ–∑–¥–∞—é –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É')
    create_pie_chart(20, 80, 'pie_chart.png')
    with open('pie_chart.png', 'rb') as photo:
        await message.answer_photo(photo)


@dp.message_handler(commands=['bar_chart'])
async def handle_bar_chart_command(message: types.Message):
    await message.answer('–°–æ–∑–¥–∞—é –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É')
    data = [
        ('–†–∞–π–æ–Ω 1', 5, 10),
        ('–†–∞–π–æ–Ω 2', 10, 15),
        ('–†–∞–π–æ–Ω 3', 20, 5),
        ('–†–∞–π–æ–Ω 4', 30, 25),
        ('–†–∞–π–æ–Ω 5', 50, 20),
    ]
    create_bar_chart(data, 'bar_chart.png')
    with open('bar_chart.png', 'rb') as photo:
        await message.answer_photo(photo)

async def get_authorized_client_and_spreadsheet():
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    return gc, spreadsheet


@dp.message_handler(commands=['search_szofed'])
async def handle_search_szofed_command(message: types.Message):
    await message.answer('–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö')
    gc, spreadsheet = await get_authorized_client_and_spreadsheet()
    found_values = await search_szofed_values('some_value', spreadsheet)
    if found_values:
        await message.answer('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:')
        await message.answer('\n'.join(['\t'.join(row) for row in found_values]), parse_mode=types.ParseMode.MARKDOWN)
    else:
        await message.answer('–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')


'''
@dp.message_handler(commands=['search_szofed'])
async def handle_search_szofed_command(message: types.Message):
    await message.answer('–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö')
    found_values = await search_szofed_values('some_value')
    if found_values:
        await message.answer('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:')
        await message.answer('\n'.join(['\t'.join(row) for row in found_values]), parse_mode=types.ParseMode.MARKDOWN)
    else:
        await message.answer('–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

async def search_espd_values(query):
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    result = await spreadsheet.values_batch_get('espd!A1:AL1466')
    rows = result.get('valueRanges', [])[0].get('values', [])
    found_values = [row for row in rows if query.lower() == row[0].lower()]
    return found_values

async def search_szoreg_values(query):
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    result = await spreadsheet.values_batch_get('szoreg!A1:Q1700')
    rows = result.get('valueRanges', [])[0].get('values', [])
    found_values = [row for row in rows if query.lower() == row[0].lower()]
    return found_values
'''
#n—Ç–µ—Å—Ç



async def search_espd_values(query, spreadsheet):
    try:
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
      #  cache_key = f"espd_values:{query.lower()}"


        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
     #   cached_data = await storage.get_data(chat=cache_key)
     #   if cached_data:
       #     cached_data = json.loads(cached_data)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

    #        return cached_data



        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        result = await spreadsheet.values_batch_get('espd!A1:AL1466')
        rows = result.get('valueRanges', [])[0].get('values', [])
        found_values = [row for row in rows if query.lower() == row[0].lower()]

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
      #  await storage.set_data(chat=cache_key, data=json.dumps(found_values))



        return found_values
    except Exception as e:
        print("An error occurred during search_espd_values:", e)
        return None




cached_szoreg_values = None

async def load_szoreg_values(spreadsheet):
    global cached_szoreg_values
    try:
        if cached_szoreg_values is None:
            result = await spreadsheet.values_batch_get('szoreg!A1:Q10000')
            rows = result.get('valueRanges', [])[0].get('values', [])
            cached_szoreg_values = rows
        return cached_szoreg_values
    except Exception as e:
        print("An error occurred during loading szoreg_values:", e)
        return None

async def search_szoreg_values(query, spreadsheet):
    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        szoreg_values = await load_szoreg_values(spreadsheet)

        # –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        found_values = [row for row in szoreg_values if query.lower() == row[0].lower() and (len(row) < 12 or row[11] != '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ')]

        return found_values
    except Exception as e:
        print("An error occurred during search_szoreg_values:", e)
        return None



'''

async def search_szoreg_values(query, spreadsheet):
    try:
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
     #   cache_key = f"szoreg_values:{query.lower()}"


        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
     #   cached_data = await storage.get_data(chat=cache_key)
   #     if cached_data:
       #     cached_data = json.loads(cached_data)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

       #     return cached_data




        result = await spreadsheet.values_batch_get('szoreg!A1:Q10000')
        rows = result.get('valueRanges', [])[0].get('values', [])
        #found_values = [row for row in rows if query.lower() == row[0].lower()]
        found_values = [row for row in rows if query.lower() == row[0].lower() and (len(row) < 12 or row[11] != '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ')]
        print('found_values:', found_values)
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    #    await storage.set_data(chat=cache_key, data=json.dumps(found_values))



        return found_values
    except Exception as e:
        print("An error occurred during search_szoreg_values:", e)
        return None
'''



async def search_mszu_mo(query):
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    result = await spreadsheet.values_batch_get('–ú–°–ó–£-–û–ú–°–£ (—Ç–µ—Å—Ç)!A1:P3200')
    rows = result.get('valueRanges', [])[0].get('values', [])
    found_values = [row for row in rows if query.lower() == row[0].lower()]
    return found_values
'''
async def search_yandex_2023_values(query):
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    result = await spreadsheet.values_batch_get('2023!A3:P50')
    rows = result.get('valueRanges', [])[0].get('values', [])
    found_values = [row for row in rows if query.lower() == row[0].lower()]
    return found_values

async def search_in_pokazatel_504p(query):
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    result = await spreadsheet.values_batch_get('–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å 504-–ø!A1:K1719')
    rows = result.get('valueRanges', [])[0].get('values', [])
    found_values = [row for row in rows if query.lower() == row[0].lower()]
    return found_values

async def search_in_ucn2(query):
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    result = await spreadsheet.values_batch_get('–£–¶–ù 2.0 (2023)!A1:K800')
    rows = result.get('valueRanges', [])[0].get('values', [])
    found_values = [row for row in rows if query.lower() == row[0].lower()]
    return found_values

async def search_schools_values(query):
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    result = await spreadsheet.values_batch_get('–®–∫–æ–ª—ã!A1:U1500')
    rows = result.get('valueRanges', [])[0].get('values', [])
    found_values = [row for row in rows if query.lower() == row[0].lower()]
    return found_values

async def get_votes_data():
    try:
        agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
        gc = await agcm.authorize()
        spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
        result = await spreadsheet.values_batch_get('votes!A2:C2000')
        rows = result.get('valueRanges', [])[0].get('values', [])
        return rows
    except Exception as e:
        print("An error occurred while getting votes data:", e)
        raise e
'''


async def search_yandex_2023_values(query, spreadsheet):
    try:
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
        #cache_key = f"yandex_2023_values:{query.lower()}"


        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
       # cached_data = await storage.get_data(chat=cache_key)
       # if cached_data:
       #     cached_data = json.loads(cached_data)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

      #     return cached_data


        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        result = await spreadsheet.values_batch_get('2023!A3:P50')
        rows = result.get('valueRanges', [])[0].get('values', [])
        found_values = [row for row in rows if query.lower() == row[0].lower()]

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
      #  await storage.set_data(chat=cache_key, data=json.dumps(found_values))



        return found_values
    except Exception as e:
        print("An error occurred during search_yandex_2023_values:", e)
        return None





# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
cached_pokazatel_504p_values = None

async def load_pokazatel_504p_values(spreadsheet):
    global cached_pokazatel_504p_values
    try:
        if cached_pokazatel_504p_values is None:
            result = await spreadsheet.values_batch_get('–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å 504-–ø!A1:K1719')
            rows = result.get('valueRanges', [])[0].get('values', [])
            cached_pokazatel_504p_values = rows
        return cached_pokazatel_504p_values
    except Exception as e:
        print("An error occurred during loading pokazatel_504p_values:", e)
        return None

async def search_in_pokazatel_504p(query, spreadsheet):
    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        pokazatel_504p_values = await load_pokazatel_504p_values(spreadsheet)

        # –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        found_values = [row for row in pokazatel_504p_values if query.lower() == row[0].lower()]

        return found_values
    except Exception as e:
        print("An error occurred during search_in_pokazatel_504p:", e)
        return []


'''

async def search_in_pokazatel_504p(query, spreadsheet):
    try:
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
       # cache_key = f"pokazatel_504p_values:{query.lower()}"


        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
      #  cached_data = await storage.get_data(chat=cache_key)
       # if cached_data:
      #      cached_data = json.loads(cached_data)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

       #     return cached_data



        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        result = await spreadsheet.values_batch_get('–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å 504-–ø!A1:K1719')
        rows = result.get('valueRanges', [])[0].get('values', [])
        found_values = [row for row in rows if query.lower() == row[0].lower()]

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
     #   await storage.set_data(chat=cache_key, data=json.dumps(found_values))



        return found_values
    except Exception as e:
        print("An error occurred during search_in_pokazatel_504p:", e)
        return []
'''


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
cached_ucn2_values = None

async def load_ucn2_values(spreadsheet):
    global cached_ucn2_values
    try:
        if cached_ucn2_values is None:
            result = await spreadsheet.values_batch_get('–£–¶–ù 2.0 (2023)!A1:K800')
            rows = result.get('valueRanges', [])[0].get('values', [])
            cached_ucn2_values = rows
        return cached_ucn2_values
    except Exception as e:
        print("An error occurred during loading ucn2_values:", e)
        return None

async def search_in_ucn2(query, spreadsheet):
    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        ucn2_values = await load_ucn2_values(spreadsheet)

        # –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        found_values = [row for row in ucn2_values if query.lower() == row[0].lower()]

        return found_values
    except Exception as e:
        print("An error occurred during search_in_ucn2:", e)
        return None


'''
async def search_in_ucn2(query, spreadsheet):
    try:
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
      #  cache_key = f"ucn2_values:{query.lower()}"


        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
       # cached_data = await storage.get_data(chat=cache_key)
       # if cached_data:
          #  cached_data = json.loads(cached_data)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

           # return cached_data



        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        result = await spreadsheet.values_batch_get('–£–¶–ù 2.0 (2023)!A1:K800')
        rows = result.get('valueRanges', [])[0].get('values', [])
        found_values = [row for row in rows if query.lower() == row[0].lower()]

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
       # await storage.set_data(chat=cache_key, data=json.dumps(found_values))



        return found_values
    except Exception as e:
        print("An error occurred during search_in_ucn2:", e)
        return None
'''

async def search_schools_values(query, spreadsheet):
    try:
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
      #  cache_key = f"schools_values:{query.lower()}"


        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        #cached_data = await storage.get_data(chat=cache_key)
       # if cached_data:
        #   cached_data = json.loads(cached_data)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

         #   return cached_data



        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        result = await spreadsheet.values_batch_get('–®–∫–æ–ª—ã!A1:U1500')
        rows = result.get('valueRanges', [])[0].get('values', [])
        found_values = [row for row in rows if query.lower() == row[0].lower()]

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
       # await storage.set_data(chat=cache_key, data=json.dumps(found_values))



        return found_values
    except Exception as e:
        print("An error occurred during search_schools_values:", e)
        return None


async def get_votes_data(spreadsheet):
    try:
        result = await spreadsheet.values_batch_get('votes!A2:D2000')
        rows = result.get('valueRanges', [])[0].get('values', [])
        return rows
    except Exception as e:
        print("An error occurred while getting votes data:", e)
        raise e



async def search_in_results(query, spreadsheet):
    try:
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
        #cache_key = f"results:{query.lower()}"


        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        #cached_data = await storage.get_data(chat=cache_key)
        #if cached_data:
         #   cached_data = json.loads(cached_data)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

         #   return cached_data


        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        result = await spreadsheet.values_batch_get('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞!A1:N')
        rows = result.get('valueRanges', [])[0].get('values', [])
        found_values = [row for row in rows if query.lower() == row[5].lower()]

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
       # await storage.set_data(chat=cache_key, data=json.dumps(found_values))


        return found_values
    except Exception as e:
        print(f"An error occurred during search_in_results: {e}")
        return None


'''
async def get_votes_tanya_data():
    try:
        agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
        gc = await agcm.authorize()
        spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
        result = await spreadsheet.values_batch_get('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¢–∞–Ω—è!A2:C2000')
        rows = result.get('valueRanges', [])[0].get('values', [])
        return rows
    except Exception as e:
        print("An error occurred while getting votes data:", e)
        raise e

'''









import traceback

import tempfile

import shutil

@dp.message_handler(commands=['votes'])
async def send_votes(message: types.Message):
    try:
        gc, spreadsheet = await get_authorized_client_and_spreadsheet()
        data = await get_votes_data(spreadsheet)
        excel_data = create_excel_file_2(data)  # —É–±—Ä–∞–ª–∏ headers –∑–¥–µ—Å—å
        await log_user_data_from_message(message)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Excel –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as temp:
            temp.write(excel_data.read())
            temp_filename = temp.name

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        final_filename = "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –£–¶–ù 2_0 2024.xlsx"
        shutil.move(temp_filename, final_filename)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(final_filename, "rb") as temp:
            await bot.send_document(message.chat.id, temp, caption='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –£–¶–ù 2.0 2024')

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(final_filename)

    except Exception as e:
        tb = traceback.format_exc()  # –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞
        print("An error occurred while handling /votes:", tb)  # –ü–µ—á–∞—Ç–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞
        await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}\n{tb}')  # –í–∫–ª—é—á–∞–µ—Ç –æ—à–∏–±–∫—É –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞ –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é




@dp.message_handler(commands=['Tanya_dushnila_ucn'])
async def send_votes(message: types.Message):
    try:
        data = await get_votes_tanya_data()
        excel_data = create_excel_file_2(data)  # —É–±—Ä–∞–ª–∏ headers –∑–¥–µ—Å—å
        await log_user_data_from_message(message)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Excel –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as temp:
            temp.write(excel_data.read())
            temp_filename = temp.name

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        final_filename = "–¢–∞–Ω—è –£–¶–ù 2_0 2024.xlsx"
        shutil.move(temp_filename, final_filename)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(final_filename, "rb") as temp:
            await bot.send_document(message.chat.id, temp, caption='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –£–¶–ù 2.0 2024 –¥–ª—è –¢–∞–Ω–∏üê≠')

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(final_filename)

    except Exception as e:
        tb = traceback.format_exc()  # –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞
        print("An error occurred while handling /votes:", tb)  # –ü–µ—á–∞—Ç–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞
        await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}\n{tb}')  # –í–∫–ª—é—á–∞–µ—Ç –æ—à–∏–±–∫—É –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞ –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é






@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    user_first_name = message.from_user.first_name
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≤—è–∑–∏ –≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–º –∫—Ä–∞–µ. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏–ª–∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "–ö—É—Ä–∞–≥–∏–Ω–æ" –∏–ª–∏ "–ê–±–∞–Ω—Å–∫–∏–π")\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏, –≤—ã–±–µ—Ä–∏ /2g /3g –∏–ª–∏ /4g. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö –±–µ–∑ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ –∂–º–∏ /nomobile \n\n'
        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –¢–û–†–ö–ù–î, –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "—Ç–æ—Ä" –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. '
        '–ù–∞–ø—Ä–∏–º–µ—Ä, "—Ç–æ—Ä –ï–Ω–∏—Å–µ–π—Å–∫–∏–π".\n'
        '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º—É –∫—Ä–∞—é, –∂–º–∏ /knd_kraj\n\n'
        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ, –∂–º–∏ /otpusk\n'

        '–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ @rejoller.')


def preprocess_rows(rows):
    preprocessed_rows = []
    for row in rows:
        if len(row) > 1:
            lemmatized_keywords = {token.lemma_ for token in nlp(row[1].lower()) if not token.is_stop and not token.is_punct}
            preprocessed_rows.append((row, lemmatized_keywords))
    return preprocessed_rows


async def check_mszu_column_b(user_message):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://sheets.googleapis.com/v4/spreadsheets/{SPREADSHEET_ID_1}/values/–ú–°–ó–£!A1:P150", headers={"Authorization": f"Bearer {creds.token}"}) as response:
            result = await response.json()
            values = result.get('values', [])
            preprocessed_values = preprocess_rows(values)
            user_doc = nlp(user_message.lower())
            user_keywords = {token.lemma_ for token in user_doc if not token.is_stop and not token.is_punct}
            matching_rows = [row for row, lemmatized_keywords in preprocessed_values if user_keywords == lemmatized_keywords]

            if not matching_rows:
                matching_rows = [row for row, lemmatized_keywords in preprocessed_values if user_keywords.intersection(lemmatized_keywords)]

            return matching_rows if len(matching_rows) > 0 else None
#7
def ngrams(sequence, n):
    return list(nltk.ngrams(sequence, n))

def jaccard_similarity(a, b):
    a_set = set(a)
    b_set = set(b)
    return len(a_set.intersection(b_set)) / len(a_set.union(b_set))

def preprocess_rows_2(rows):
    preprocessed_rows = []
    for row in rows:
        if len(row) > 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–µ B
            b_column_value = row[1]  # –ò–Ω–¥–µ–∫—Å 1 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±—Ü—É B
            row_doc = nlp(b_column_value.lower())
            row_keywords = {}
            for i, token in enumerate(row_doc):
                if not token.is_stop and not token.is_punct and len(token) > 2:
                    weight = 2 if i + 1 < len(row_doc) and row_doc[i + 1].text.lower() in ["—Å–µ–ª—å—Å–æ–≤–µ—Ç", "—Ä–∞–π–æ–Ω", "–æ–∫—Ä—É–≥", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"] else 1
                    row_keywords[token.lemma_] = weight
            preprocessed_rows.append((row, row_keywords))
    return preprocessed_rows

def weighted_keyword_match(user_keywords, row_keywords):
    user_keyword_set = set(user_keywords.keys())
    row_keyword_set = set(row_keywords.keys())

    intersection = user_keyword_set.intersection(row_keyword_set)
    union = user_keyword_set.union(row_keyword_set)

    if not union:
        return 0

    weighted_intersection_sum = sum([user_keywords.get(k, 0) * row_keywords.get(k, 0) for k in intersection])
    weighted_union_sum = sum([user_keywords.get(k, 0) for k in union]) + sum([row_keywords.get(k, 0) for k in union]) - weighted_intersection_sum

    return weighted_intersection_sum / weighted_union_sum

def check_mszu_mo(user_message):
    user_doc = nlp(user_message.lower())
    user_keywords = {
        token.lemma_: 2 if token.text.lower() in ["—Å–µ–ª—å—Å–æ–≤–µ—Ç", "—Ä–∞–π–æ–Ω", "–æ–∫—Ä—É–≥", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"] else 1
        for token in user_doc
        if not token.is_stop and not token.is_punct and len(token) > 2
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Google Sheets
    service = build('sheets', 'v4', credentials=creds)

    index_range_name = 'mszuindex!A1:C500'
    main_range_name = '–ú–°–ó–£-–û–ú–°–£ (—Ç–µ—Å—Ç)!A1:T3200'

    index_result = service.spreadsheets().values().get(spreadsheetId=SPREADSHEET_ID_1, range=index_range_name).execute()
    main_result = service.spreadsheets().values().get(spreadsheetId=SPREADSHEET_ID_1, range=main_range_name).execute()

    index_values = index_result.get('values', [])
    main_values = main_result.get('values', [])

    preprocessed_index_values = preprocess_rows_2(index_values)

    matching_rows = []
    for index_row, index_keywords in preprocessed_index_values:
        if weighted_keyword_match(user_keywords, index_keywords) >= 0.75:
            index_c_value = index_row[2]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ C —Ç–∞–±–ª–∏—Ü—ã mszuindex
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ "–ú–°–ó–£-–û–ú–°–£ (—Ç–µ—Å—Ç)" –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ J —Å index_c_value
            matched_rows = [row for row in main_values if row[9] == index_c_value]
            matching_rows.extend(matched_rows)

    return matching_rows

def preprocess_rows_3(rows):
    preprocessed_rows = []
    for row in rows:
        if len(row) > 5:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–µ F
            f_column_value = row[5]  # –ò–Ω–¥–µ–∫—Å 5 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±—Ü—É F
            row_doc = nlp(f_column_value.lower())
            row_keywords = {}
            for i, token in enumerate(row_doc):
                if not token.is_stop and not token.is_punct and len(token) > 2:
                    weight = 2 if i + 1 < len(row_doc) and row_doc[i + 1].text.lower() in ["—Ä–∞–π–æ–Ω", "–≥–æ", "–º–æ", "–æ–∫—Ä—É–≥", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"] else 1
                    row_keywords[token.lemma_] = weight
            preprocessed_rows.append((row, row_keywords))
    return preprocessed_rows


#8
async def check_mszu_mo_2(user_message):
    user_doc = nlp(user_message.lower())
    user_keywords = {
        token.lemma_: 2 if token.text.lower() in ["—Å–µ–ª—å—Å–æ–≤–µ—Ç", "—Ä–∞–π–æ–Ω", "–æ–∫—Ä—É–≥", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"] else 1
        for token in user_doc
        if not token.is_stop and not token.is_punct and len(token) > 2
    }

    index_range_name = 'mszuindex!A1:G500'
    main_range_name = '–ú–°–ó–£-–û–ú–°–£ (—Ç–µ—Å—Ç)!A1:T3200'

    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)

    index_result = await spreadsheet.values_get(index_range_name)
    main_result = await spreadsheet.values_get(main_range_name)

    index_values = index_result.get('values', [])
    main_values = main_result.get('values', [])

    preprocessed_index_values = preprocess_rows_3(index_values)

    matching_rows = []
    for index_row, index_keywords in preprocessed_index_values:
        if weighted_keyword_match(user_keywords, index_keywords) >= 0.75:
            index_g_value = index_row[6]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ G —Ç–∞–±–ª–∏—Ü—ã mszuindex
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ "–ú–°–ó–£-–û–ú–°–£ (—Ç–µ—Å—Ç)" –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ K —Å index_g_value
            matched_rows = [row for row in main_values if row[10] == index_g_value]
            matching_rows.extend(matched_rows)

    return matching_rows
'''
@dp.message_handler()
async def process_message(message: types.Message):
    print ('async def process_message(message: types.Message):')
    user_message = message.text
    matching_rows = await check_mszu_mo_2(user_message)
    if matching_rows:
        for row in matching_rows:
            await message.reply(row)
'''


def send_request_to_openai_post(chat_id):
    #log_user_data_from_message(chat_id)
    global info_text_storage
    trimmed_info = info_text_storage[chat_id][:7000]
    messages = [
        {"role": "system", "content": "—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–µ—Å—Å-—Å–ª—É–∂–±—ã –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è. –¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –æ –≤–∏–∑–∏—Ç–∞—Ö –º–∏–Ω–∏—Å—Ç—Ä–∞ –†–∞—Å–ø–æ–ø–∏–Ω–∞ –ù–∏–∫–æ–ª–∞—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á–∞"},

        {"role": "assistant", "content": trimmed_info},

        {"role": "user", "content": "–°–æ–∑–¥–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ '–í–ö', –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–º—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É, –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ —Ç–∞–º –≥–¥–µ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏ —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞. –°–∫–∞–∂–∏ —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –≤—Å—Ç–µ—Ä—á–∏ —Å –∂–∏—Ç–µ–ª—è–º–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥ —Å–≤—è–∑–∏, –∞ —Ç–∞–∫–∂–µ  –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –≥–ª–∞–≤–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ –≥–ª–∞–≤–æ–π —Ä–∞–π–æ–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ—Ç –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –≤—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–∞–≤ –∫–∞–∫–æ–≥–æ-—Ç–æ —Ä–∞–π–æ–Ω–∞ –∏–ª–∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞. –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç—ã –°–ó–û, —Ç–æ —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤–∏–∑–∏—Ç –≤ –Ω–∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –∫–∞–∫—É—é –ø–æ–ª—å–∑—É –ø—Ä–∏–Ω–æ—Å–∏—Ç. –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–æ, –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫ –∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å –Ω—É–∂–Ω—ã–º –∏ –¥–æ–±–∞–≤–ª—è–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –í–∏–∑–∏—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ. "}

    ]
    response = openai.ChatCompletion.create(
        model="gpt-4-turbo-preview",
        messages=messages,
        max_tokens=1500,
        n=1,
        temperature=0.6,
    )
    return response['choices'][0]['message']['content']

#9
async def send_request_to_openai(chat_id):
    #log_user_data_from_message(chat_id)
    global info_text_storage
    trimmed_info = info_text_storage[chat_id][:7000]
    messages = [{"role": "system", "content": "—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω. –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç. –ò–∑–±–µ–≥–∞–π —Ç–∞–≤—Ç–æ–ª–æ–≥–∏–π –∏ –∏–∑–ª–∏—à–Ω–µ–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏. —Å—Ç–∏–ª—å - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –¥–µ–ª–æ–≤–æ–π. –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ –Ω–∞ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö —Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Ö –Ω–∞—Å–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏). –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ —à–∞–±–ª–æ–Ω—ã –Ω–∏–∂–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–ª–∞–≤–Ω–æ —Å–∫–ª–µ–∏–≤–∞—Ç—å —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –º–µ–∂–¥—É —Å–æ–±–æ–π, —á—Ç–æ–±—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–ª—É—á–∏–ª—Å—è —Ü–µ–ª–æ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—è—Ç–Ω–æ —á–∏—Ç–∞—Ç—å. –í–µ–∂–ª–∏–≤–æ—Å—Ç—å 9 –∏–∑ 10. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —á—Ç–æ —Å–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å –∏–º–µ–µ—Ç —É—Ä–æ–≤–µ–Ω—å 3G –∏–ª–∏ 4G –∏ –ø—Ä–∏ —ç—Ç–æ–º —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω—ã - —ç—Ç–æ –Ω–µ—É–º–µ—Å—Ç–Ω–æ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–æ–ø–∏–ø–∞—Å—Ç–∞. –∑–∞–ø–æ–º–Ω–∏, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤ –µ—Å–ª–∏ –≤–∏–¥–∏—à—å —á—Ç–æ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –µ—Å—Ç—å 3G üü¢–•–æ—Ä–æ—à–µ–µ –∏–ª–∏ 4G üü¢–•–æ—Ä–æ—à–µ–µ"

        "–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –±–µ—Ä–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–ª–æ–≤ [üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥): ] –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã [–£–¶–ù (—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞)2.0]. –¢–∞–∫–∂–µ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –µ—Å–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –£–¶–ù 2.0, —Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å –æ –¥—Ä—É–≥–∏—Ö –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –Ω–µ —Å–ª–µ–¥—É–µ—Ç. –ò –Ω–∞–æ–±–æ—Ä–æ—Ç."
        "–í–≤–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞ —Å –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–µ–¥—É–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: [–¢–∞–∫–∂–µ —Å–æ–æ–±—â–∞–µ–º, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∞–µ–º, —Å–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —É—á–∏—Ç—ã–≤–∞—è –∏–∑–ª–æ–∂–µ–Ω–Ω–æ–µ, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏–∑–ª–æ–∂–µ–Ω–Ω—ã–º ]"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –∏ –æ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –æ—Ç–ø—É—Å–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–ø–∞–¥–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç - —ç—Ç–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"        },
        {"role": "user", "content":      "—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º  —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –º–µ–Ω–µ–µ 100; —Ç–∞–∫—Å–æ—Ñ–æ–Ω = [1]:"

       " –ê–±–∞–Ω—Å–∫–∏–π —Ä-–Ω, –¥. –ë–æ—Ä–∫–∏ (19.86¬∞C üåßÔ∏è)"

"[üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2010 –≥):] 83 —á–µ–ª."
"[üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥):] 71 —á–µ–ª."

"–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:üî¥–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
"–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: "

"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤: 1"},
        {"role": "assistant", "content": "–í –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ —Å–≤—è–∑–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç] –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è (–¥–∞–ª–µ–µ ‚Äì –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ) —Å–æ–æ–±—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ."
"–ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–≤—è–∑–∏, –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ [–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞] –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—Å–ª—É–≥–∏ –ø–æ–¥–≤–∏–∂–Ω–æ–π —Ä–∞–¥–∏–æ—Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏ (–¥–∞–ª–µ–µ ‚Äì –ü–†–¢–°) –∏–∑-–∑–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –æ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å–≤—è–∑–∏, –∞ —Ç–∞–∫–∂–µ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–º —Ä–µ–ª—å–µ—Ñ–æ–º –º–µ—Å—Ç–Ω–æ—Å—Ç–∏. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–∞ —Å–≤—è–∑–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç]"
"–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, —Å–≤—è–∑–∏ –∏ –º–∞—Å—Å–æ–≤—ã—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–≤—è–∑–∏ –ü–ê–û ¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ¬´–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞¬ª, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö —Å —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é –Ω–∞—Å–µ–ª–µ–Ω–∏—è 100-500 —á–µ–ª–æ–≤–µ–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–≤—è–∑–∏ –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥ –ü–†–¢–°. –ü–æ –¥–∞–Ω–Ω—ã–º –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø–µ—Ä–µ–ø–∏—Å–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è 2020 –≥–æ–¥—É –≤ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç] –ø—Ä–æ–∂–∏–≤–∞–µ—Ç [üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥):] , —á—Ç–æ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ. "
"–í —Ä–∞–º–∫–∞—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ¬´–°—É–±—Å–∏–¥–∏–∏ –±—é–¥–∂–µ—Ç–∞–º –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ —Å–≤—è–∑–∏ –º–∞–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∏ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è¬ª –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã ¬´–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞¬ª —Å—É–±—Å–∏–¥–∏–∏ –±—é–¥–∂–µ—Ç–∞–º –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞."
"–°–æ–≥–ª–∞—Å–Ω–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –æ—Ç–±–æ—Ä–∞, –æ–±–æ–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤ –ø. 9 –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–±—Å–∏–¥–∏–π –±—é–¥–∂–µ—Ç–∞–º –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ —Å–≤—è–∑–∏ –º–∞–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∏ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –æ—Ç 31.12.2019 ‚Ññ 791-–ø, –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–∂–¥–æ–π –ø–æ–¥–∞–Ω–Ω–æ–π –æ—Ç –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∑–∞—è–≤–∫–∏, –ø—Ä–∏ —ç—Ç–æ–º –æ–¥–Ω–∏–º –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Å–æ–º—ã—Ö –ø—Ä–∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–µ—Ä–∏–π ¬´–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ª—É–≥ —Å–≤—è–∑–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∑–∞ –≥–æ–¥¬ª, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º—ã–π –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—É–º–º—ã –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è."
"–í–≤–∏–¥—É —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —É—Å–ª—É–≥ —Å–≤—è–∑–∏, –≤–∫–ª—é—á–∞—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –í–û–õ–° –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç], —Ä–µ–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å –º–∞–ª–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é –∂–∏—Ç–µ–ª–µ–π –ø–æ–≤–ª–µ—á–µ—Ç –∑–∞ —Å–æ–±–æ–π —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤ –∏, –∫–∞–∫ —Å–ª–µ–¥—Å—Ç–≤–∏–µ, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ —Å—É–±—Å–∏–¥–∏–∏."
"–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–º–µ–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–≤–µ—Ä—à–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –ª—é–±—ã–µ –Ω–æ–º–µ—Ä–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –ø–æ–º–æ—â—å—é —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞. –°–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, "
"—á—Ç–æ –∑–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∑–∏–º–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –ø–ª–∞—Ç–∞. –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –æ—Ñ–∏—Å–∞—Ö –û–û–û ¬´–¢–µ–ª–µ–∫–æ–º—Å–µ—Ä–≤–∏—Å¬ª."},


         {"role": "user", "content":      "—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º  —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –º–µ–Ω–µ–µ 100; —Ç–∞–∫—Å–æ—Ñ–æ–Ω = [0]:"

       " –ê–±–∞–Ω—Å–∫–∏–π —Ä-–Ω, –¥. –ë–æ—Ä–∫–∏ (19.86¬∞C üåßÔ∏è)"

"[üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2010 –≥): ]83 —á–µ–ª."
"[üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥): ]71 —á–µ–ª."

"–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:üî¥–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
"–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: "

"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤: 0"},


{"role": "assistant", "content": "–í –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ —Å–≤—è–∑–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç] –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è (–¥–∞–ª–µ–µ ‚Äì –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ) —Å–æ–æ–±—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ."
"–ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–≤—è–∑–∏, –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ [–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞] –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—Å–ª—É–≥–∏ –ø–æ–¥–≤–∏–∂–Ω–æ–π —Ä–∞–¥–∏–æ—Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏ (–¥–∞–ª–µ–µ ‚Äì –ü–†–¢–°) –∏–∑-–∑–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –æ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å–≤—è–∑–∏, –∞ —Ç–∞–∫–∂–µ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–º —Ä–µ–ª—å–µ—Ñ–æ–º –º–µ—Å—Ç–Ω–æ—Å—Ç–∏. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–∞ —Å–≤—è–∑–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç]"
"–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, —Å–≤—è–∑–∏ –∏ –º–∞—Å—Å–æ–≤—ã—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–≤—è–∑–∏ –ü–ê–û ¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ¬´–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞¬ª, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö —Å —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é –Ω–∞—Å–µ–ª–µ–Ω–∏—è 100-500 —á–µ–ª–æ–≤–µ–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–≤—è–∑–∏ –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥ –ü–†–¢–°. –ü–æ –¥–∞–Ω–Ω—ã–º –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø–µ—Ä–µ–ø–∏—Å–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è 2020 –≥–æ–¥—É –≤ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç] –ø—Ä–æ–∂–∏–≤–∞–µ—Ç [üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥):] , —á—Ç–æ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ. "
"–í —Ä–∞–º–∫–∞—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ¬´–°—É–±—Å–∏–¥–∏–∏ –±—é–¥–∂–µ—Ç–∞–º –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ —Å–≤—è–∑–∏ –º–∞–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∏ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è¬ª –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã ¬´–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞¬ª —Å—É–±—Å–∏–¥–∏–∏ –±—é–¥–∂–µ—Ç–∞–º –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞."
"–°–æ–≥–ª–∞—Å–Ω–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –æ—Ç–±–æ—Ä–∞, –æ–±–æ–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤ –ø. 9 –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–±—Å–∏–¥–∏–π –±—é–¥–∂–µ—Ç–∞–º –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ —Å–≤—è–∑–∏ –º–∞–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∏ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –æ—Ç 31.12.2019 ‚Ññ 791-–ø, –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–∂–¥–æ–π –ø–æ–¥–∞–Ω–Ω–æ–π –æ—Ç –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∑–∞—è–≤–∫–∏, –ø—Ä–∏ —ç—Ç–æ–º –æ–¥–Ω–∏–º –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Å–æ–º—ã—Ö –ø—Ä–∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–µ—Ä–∏–π ¬´–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ª—É–≥ —Å–≤—è–∑–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∑–∞ –≥–æ–¥¬ª (–ø—É–Ω–∫—Ç 2), —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º—ã–π –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—É–º–º—ã –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è."
"–í–≤–∏–¥—É —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —É—Å–ª—É–≥ —Å–≤—è–∑–∏, –≤–∫–ª—é—á–∞—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –í–û–õ–° –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç], —Ä–µ–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å –º–∞–ª–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é –∂–∏—Ç–µ–ª–µ–π –ø–æ–≤–ª–µ—á–µ—Ç –∑–∞ —Å–æ–±–æ–π —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤ –∏, –∫–∞–∫ —Å–ª–µ–¥—Å—Ç–≤–∏–µ, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ —Å—É–±—Å–∏–¥–∏–∏."
"–û–±—Ä–∞—â–∞–µ–º –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≤–æ–ø—Ä–æ—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ —Å–≤—è–∑–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç], –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –ª—é–±—ã–µ –Ω–æ–º–µ—Ä–∞, –∑–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∑–∏–º–∞–µ—Ç—Å—è –ø–ª–∞—Ç–∞. "},

{"role": "user", "content":      "—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º  —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –æ—Ç 100 –¥–æ 500:"
"[üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2010 –≥.):] 220 —á–µ–ª."
"[üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥.):] 172 —á–µ–ª."

"–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å: üî¥–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
"–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: "

"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤: 0"

"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –£–¶–ù 2.0 (2023):"

"[–ì–æ–ª–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å—É–ª—É–≥–∏: 145"
"–ì–æ–ª–æ—Å–æ–≤ –ø–æ—á—Ç–æ–π: 73"
"–ò—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤: 218"
"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª—É–≥: –ù–µ—Ç –≥–æ–ª–æ—Å–∞, –Ω–µ—Ç –ü–î"
"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –£–¶–ù 2.0 –Ω–∞ 2023"
"–ü–æ–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–≤–æ—Ç—É: –¥–∞]"},






 {"role": "assistant", "content":       "–í –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ —Å–≤—è–∑–∏ –≤ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç] –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è —Å–æ–æ–±—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ."
"–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç] —É—Å–ª—É–≥–∏ –ø–æ–¥–≤–∏–∂–Ω–æ–π —Ä–∞–¥–∏–æ—Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑-–∑–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –æ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å–≤—è–∑–∏. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–µ–π —Å–≤—è–∑–∏ –Ω–µ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞."
"–°–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, —Å–≤—è–∑–∏ –∏ –º–∞—Å—Å–æ–≤—ã—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ü–ê–û ¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ¬´–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞¬ª, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö —Å —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é –Ω–∞—Å–µ–ª–µ–Ω–∏—è 100-500 —á–µ–ª–æ–≤–µ–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–≤—è–∑–∏ –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥ –ø–æ–¥–≤–∏–∂–Ω–æ–π —Ä–∞–¥–∏–æ—Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏."
"[–î–∞–ª–µ–µ –ø–∏—à–∏ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É,"
"[–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 2023], —Ç–æ –ø–∏—à–∏ [–í —Ä–∞–º–∫–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã ¬´–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞¬ª —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –æ—Ç 30.11.2022 ‚Ññ 1030-–ø ¬´–û–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ 2023 –≥–æ–¥—É —Å—É–±—Å–∏–¥–∏–π –±—é–¥–∂–µ—Ç–∞–º –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ —Å–≤—è–∑–∏ –º–∞–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∏ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è¬ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ [–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è] –≤ 2023 –≥–æ–¥—É –≤—ã–¥–µ–ª–µ–Ω–∞ —Å—É–±—Å–∏–¥–∏—è –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —É—Å–ª—É–≥ –ü–†–¢–° –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç]. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –∑–∞–∫–ª—é—á–µ–Ω–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –º–µ–∂–¥—É –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —Ä–∞–π–æ–Ω–∞ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É–±—Å–∏–¥–∏–∏ –±—é–¥–∂–µ—Ç—É [–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ] –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ —Å–≤—è–∑–∏ –º–∞–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∏ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∑–∞–ø—É—Å–∫ —É—Å–ª—É–≥ –ü–†–¢–° –¥–æ –∫–æ–Ω—Ü–∞ 2023 –≥–æ–¥–∞."
"[–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –£–¶–ù 2.0 (2023):] –∏ —Ç–∞–º [–ü–æ–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–≤–æ—Ç—É: –¥–∞], —Ç–æ –ø–∏—à–∏ [–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, —Å–≤—è–∑–∏ –∏ –º–∞—Å—Å–æ–≤—ã—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–≤—è–∑–∏ –ü–ê–û ¬´–†–æ—Å—Ç–µ–ª–µ–∫–æ–º¬ª —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ¬´–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞¬ª, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö —Å —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é –Ω–∞—Å–µ–ª–µ–Ω–∏—è 100-500 —á–µ–ª–æ–≤–µ–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–≤—è–∑–∏ –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥ –ü–†–¢–°. –¢–∞–∫ –ø–æ –∏—Ç–æ–≥–∞–º –æ–Ω–ª–∞–π–Ω-–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –Ω–æ—è–±—Ä–µ 2022 –≥–æ–¥–∞ [–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞] –≤–∫–ª—é—á–µ–Ω–∞ –≤ –ø–µ—Ä–µ—á–µ–Ω—å –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤, –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é —É—Å–ª—É–≥ –≤ —Å—Ä–æ–∫ –¥–æ []."

"–ï—Å–ª–∏ –≤ [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –£–¶–ù 2.0 (2023):] –∏ [–ü–æ–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–≤–æ—Ç—É: ] =  , —Ç–æ –ø–∏—à–∏  [–ü–µ—Ä–µ—á–µ–Ω—å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ç–æ–≥–∞–º –æ–Ω–ª–∞–π–Ω-–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥, —Ç–∞–∫ –ø–æ –∏—Ç–æ–≥–∞–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –Ω–æ—è–±—Ä–µ 2022 –≥–æ–¥–∞ [–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç] –Ω–∞–±—Ä–∞–ª [–ò—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤:] –≥–æ–ª–æ—Å–æ–≤, –∑–∞–Ω–∏–º–∞—è ___ –º–µ—Å—Ç–æ –ø—Ä–∏ –∫–≤–æ—Ç–µ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–º—É –∫—Ä–∞—é –≤ 48 –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.  –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–µ –≤–∫–ª—é—á—ë–Ω –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 2023 –≥–æ–¥. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω-–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –≤—ã–±–æ—Ä—É –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ 2024 –≥–æ–¥—É –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –ø–æ —Å—Å—ã–ª–∫–µ: http://www.digital.krskstate.ru/.]]]"


},

        {"role": "user", "content": trimmed_info},




    ]

    response = openai.ChatCompletion.create(
        model="gpt-4-turbo-preview",
        messages=messages,
        max_tokens=1500,
        n=1,
        temperature=0.8,
        stream=True,
    )
    message_content = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
    message_content_no_md = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
    chunk_counter = 0  # –°—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    message = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        while True:
            chunk = next(response)  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç

            if chunk["object"] == "error":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—à–∏–±–∫–æ–π
                # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                break

            delta = chunk.get("choices", [{}])[0].get("delta", {})  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–ª—å—Ç—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
            message_delta = delta.get("content")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–µ–ª—å—Ç—ã

            if message_delta is not None and message_delta.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç—ã–º
                message_content += message_delta  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–ª—å—Ç—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
                message_content_no_md += remove_markdown(message_delta)  # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–ª—å—Ç—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                chunk_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤

            if chunk_counter % 30 == 0 or chunk["object"] == "chat.completion":  # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–æ 20 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
                if message_content_no_md:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                    if message is None:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                        message = await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                        message = await bot.send_message(chat_id=chat_id, text=message_content_no_md)
                    else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
                        if message.text != message_content_no_md:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                            await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                            try:
                                message = await bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=message_content_no_md)
                            except aiogram.exceptions.MessageNotModified:
                                pass

            await asyncio.sleep(0.03)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏

    except StopIteration:
        pass

    if message_content and (message is None or message.text != message_content):
        if message is None:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            message = await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
            message = await bot.send_message(chat_id=chat_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
        else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
            await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
            try:
                message = await bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
            except aiogram.exceptions.MessageNotModified:
                pass

    if message_content and message is not None:
        return message.text

    return None

#10

import random
import threading
import time
import requests

async def handle_digital_ministry_info(call):
    global info_text_storage
    chat_id = call.message.chat.id

    sticker_ids = [
        "CAACAgIAAxkBAAEheFJkau4Sf6bNrjPQYlRkse5dpzz9FgACKT0AAulVBRhAF4Dz8yP3WS8E",
        "CAACAgIAAxkBAAEheFpkau8kZYI6B9gjs0HVsMgthiz9KgACBQEAAvcCyA_R5XS3RiWkoS8E",
        "CAACAgIAAxkBAAEheFhkau7n4LJwuPn7gPvW6ToYh9rjAgAC6BUAAiMlyUtQqGgG1fAXAAEvBA",
        "CAACAgIAAxkBAAEheF9kau9O_07D2mrWk4Oygs5DYHtaQgACgQEAAiteUwteCmw-bAABeLQvBA"
    ]

    random_sticker_id = random.choice(sticker_ids)

    sticker_message = await bot.send_sticker(chat_id, random_sticker_id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º

    info_text = info_text_storage[chat_id]

    async def send_typing(max_attempts=30):  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ = 30
        attempts = 0
        while not message_sent and attempts < max_attempts:
            await bot.send_chat_action(chat_id, 'typing')
            time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ "typing"
            attempts += 1

    message_sent = False
    threading.Thread(target=send_typing).start()

    try:
        openai_response = await send_request_to_openai(chat_id)
        #await bot.send_message(chat_id, openai_response)
    finally:
        message_sent = True
        await bot.delete_message(chat_id, sticker_message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


async def handle_digital_ministry_info_post(call):
    global info_text_storage
    chat_id = call.message.chat.id

    sticker_id = "CAACAgIAAxkBAAEhAotkX1-uvG-2lf3mufIMFqwDvpRyYwACKRUAAviLwEupQBIzh-Q46C8E"
    await bot.send_sticker(call.message.chat.id, sticker_id)

    info_text = info_text_storage[chat_id]

    async def send_typing(max_attempts=30):  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ = 30
        attempts = 0
        while not message_sent and attempts < max_attempts:
            await bot.send_chat_action(chat_id, 'typing')
            time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ "typing"
            attempts += 1

    message_sent = False
    threading.Thread(target=send_typing).start()

    try:
        openai_response = await send_request_to_openai_post(chat_id)
        await bot.send_message(chat_id, openai_response)
    except Exception as e:
        #print(f"Error while sending message: {e}")
        pass  # –î–æ–±–∞–≤—å—Ç–µ "pass" –ø–æ—Å–ª–µ "except"

    finally:
        message_sent = True


weather_emoji_mapping = {
    'thunderstorm with light rain': '‚õàÔ∏è',
    'thunderstorm with rain': '‚õàÔ∏è',
    'thunderstorm with heavy rain': '‚õàÔ∏è',
    'light thunderstorm': '‚õàÔ∏è',
    'thunderstorm': '‚õàÔ∏è',
    'heavy thunderstorm': '‚õàÔ∏è',
    'ragged thunderstorm': '‚õàÔ∏è',
    'thunderstorm with light drizzle': '‚õàÔ∏è',
    'thunderstorm with drizzle': '‚õàÔ∏è',
    'thunderstorm with heavy drizzle': '‚õàÔ∏è',
    'light intensity drizzle': 'üåßÔ∏è',
    'drizzle': 'üåßÔ∏è',
    'heavy intensity drizzle': 'üåßÔ∏è',
    'light intensity drizzle rain': 'üåßÔ∏è',
    'drizzle rain': 'üåßÔ∏è',
    'heavy intensity drizzle rain': 'üåßÔ∏è',
    'shower rain and drizzle': 'üåßÔ∏è',
    'heavy shower rain and drizzle': 'üåßÔ∏è',
    'shower drizzle': 'üåßÔ∏è',
    'light rain': 'üåßÔ∏è',
    'moderate rain': 'üåßÔ∏è',
    'heavy intensity rain': 'üåßÔ∏è',
    'very heavy rain': 'üåßÔ∏è',
    'extreme rain': 'üåßÔ∏è',
    'freezing rain': 'üåßÔ∏è',
    'light intensity shower rain': 'üåßÔ∏è',
    'shower rain': 'üåßÔ∏è',
    'heavy intensity shower rain': 'üåßÔ∏è',
    'ragged shower rain': 'üåßÔ∏è',
    'light snow': '‚ùÑÔ∏è',
    'snow': '‚ùÑÔ∏è',
    'heavy snow': '‚ùÑÔ∏è',
    'sleet': '‚ùÑÔ∏è',
    'light shower sleet': '‚ùÑÔ∏è',
    'shower sleet': '‚ùÑÔ∏è',
    'light rain and snow': '‚ùÑÔ∏è',
    'rain and snow': '‚ùÑÔ∏è',
    'light shower snow': '‚ùÑÔ∏è',
    'shower snow': '‚ùÑÔ∏è',
    'heavy shower snow': '‚ùÑÔ∏è',
    'mist': 'üå´Ô∏è',
    'smoke': 'üå´Ô∏è',
    'haze': 'üå´Ô∏è',
    'sand/dust whirls': 'üå´Ô∏è',
    'fog': 'üå´Ô∏è',
    'sand': 'üå´Ô∏è',
    'dust': 'üå´Ô∏è',
    'volcanic ash': 'üå´Ô∏è',
    'squalls': 'üå´Ô∏è',
    'tornado': 'üå™Ô∏è',
    'clear sky': '‚òÄÔ∏è',
    'few clouds: 11-25%': 'üå§Ô∏è',
    'scattered clouds: 25-50%': 'üå•Ô∏è',
    'broken clouds: 51-84%': '‚òÅÔ∏è',
    'overcast clouds: 85-100%': '‚òÅÔ∏è'
}


async def get_weather(latitude, longitude, api_key):
    url = f"http://api.openweathermap.org/data/2.5/weather?lat={latitude}&lon={longitude}&appid={api_key}&units=metric"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                weather_data = await response.json()
                temp = weather_data["main"]["temp"]
                description = weather_data["weather"][0]["description"]
                emoji = weather_emoji_mapping.get(description, '')  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏ –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                return f"{temp}¬∞C {emoji}"
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ."



#11
async def animated_text(bot, chat_id, message_id, base_text, final_text, delay=0.003):
    current_text = base_text
    unchanged_count = 0
    for i in range(len(base_text), len(final_text), 2):  # –∏–∑–º–µ–Ω–∏—Ç–µ –∑–¥–µ—Å—å –Ω–∞ 2
        await bot.send_chat_action(chat_id, 'typing')
        await asyncio.sleep(delay)
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤—å—Ç–µ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞
        current_text += final_text[i:i + 2] if i + 2 <= len(final_text) else final_text[i:i + 1]
        if current_text != base_text:
            try:
                await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=current_text)
                base_text = current_text
                unchanged_count = 0
            except telebot.apihelper.ApiTelegramException as e:
                if 'message is not modified' in str(e):
                    unchanged_count += 1
                    if unchanged_count >= 3:
                        break
                else:
                    raise e
        await asyncio.sleep(delay)


def escape_markdown(text):
    markdown_escape_characters = ['*', '_', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    return re.sub('([{}])'.format(''.join(markdown_escape_characters)), r'\\\1', text)


is_main_menu_button_active = {}


def set_main_menu_button_active(chat_id, active):
    global is_main_menu_button_active
    is_main_menu_button_active[chat_id] = active


def create_go_main_menu_inline_button():
    inline_keyboard = types.InlineKeyboardMarkup()
    main_menu_button = types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞", callback_data="go_main_menu")
    inline_keyboard.add(main_menu_button)
    return inline_keyboard


@dp.callback_query_handler(lambda call: call.data == "go_main_menu")
async def go_main_menu_callback_handler(call):
    set_main_menu_button_active(call.message.chat.id, False)
    await bot.send_message(call.message.chat.id,
                           "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ, –∂–º–∏ /otpusk\n–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫: /employee \n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ @rejoller.")
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    remove_employee_data(call.message.chat.id)
    # –ó–¥–µ—Å—å –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # await send_main_menu(call.message)


@dp.callback_query_handler(lambda call: call.data == "go_main_menu")
async def process_go_main_menu_callback(call):
    await go_main_menu_callback_handler(call)



def remove_employee_data(chat_id):
    if chat_id in stored_employees_data:
        del stored_employees_data[chat_id]

from aiogram.dispatcher.filters import Text


@dp.message_handler(Text(equals='–í—ã–π—Ç–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞'))
async def handle_go_main_menu(message: types.Message):
    set_main_menu_button_active(message.chat.id, False)
    await bot.send_message(message.chat.id,
                           '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ, –∂–º–∏ /otpusk\n–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫: /employee \n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ @rejoller.')
    bot.clear_step_handler(message)
    remove_employee_data(message.chat.id)
    # –ó–¥–µ—Å—å –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # await send_main_menu(message)





async def handle_employee_info_message(chat_id, response):
    set_main_menu_button_active(chat_id, True)
    main_menu_inline_button = create_go_main_menu_inline_button()
    msg = await bot.send_message(chat_id, response, parse_mode='HTML', reply_markup=main_menu_inline_button)
    bot.register_next_step_handler(msg, process_employee_name_input)  # –¥–æ–±–∞–≤–∏–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ process_employee_name_input –∑–¥–µ—Å—å


@dp.message_handler(Text(equals='–í—ã–π—Ç–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞'))
async def process_go_main_menu_callback(message: types.Message):
    if message.text == '–í—ã–π—Ç–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞':
        await go_main_menu_callback_handler(message)
    else:
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ)")
        dp.register_message_handler(process_employee_name_input, content_types=types.ContentTypes.TEXT, state="*")


import json



stored_employees_data = {}


def search_employee(name_parts):
    try:
        service = get_service()
        result = service.spreadsheets().values().get(
            spreadsheetId=SPREADSHEET_ID_1,
            range="–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫!A2:J",
        ).execute()
        rows = result.get('values', [])
    except HttpError as error:
        # print(f"An error occurred: {error}")
        rows = []

    found_employees = []
    for row in rows:
        if row and len(row) > 2 and row[2]:
            fio_parts = re.split(r'\s+', row[2].strip())
            if len(fio_parts) >= len(name_parts) and all(p1.lower() == p2.lower() for p1, p2 in zip(fio_parts, name_parts)):
                found_employees.append(row)

    return found_employees


@dp.message_handler(commands=['employee'])
async def handle_employee_command(message: types.Message):
    global stored_employees_data
    user_first_name = message.from_user.first_name
    name_parts = re.split(r'\s+', message.text[len('/employee'):].strip())

    if len(name_parts) < 1 or len(name_parts[0]) < 2:
        msg = await message.reply(f'{user_first_name}, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ).')
        await msg.register_next_step_handler(process_employee_name_input)
        return

    found_employees = search_employee(name_parts)
    stored_employees_data[message.chat.id] = found_employees
    await process_searched_employee_results(message, found_employees)


async def process_employee_name_input(message: types.Message):
    global stored_employees_data
    name_parts = re.split(r'\s+', message.text.strip())

    if len(name_parts) < 1 or len(name_parts[0]) < 2:
        msg = await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ)")
        await msg.register_next_step_handler(process_employee_name_input)
        return

    found_employees = search_employee(name_parts)
    stored_employees_data[message.chat.id] = found_employees
    await process_searched_employee_results(message, found_employees)


def format_employee_info(employee):
    fio = escape_markdown(employee[2]) if len(employee) > 2 and employee[2] else "-"
    position = escape_markdown(employee[1]) if len(employee) > 1 and employee[1] else "-"
    department = escape_markdown(employee[0]) if len(employee) > 0 and employee[0] else "-"
    place = escape_markdown(employee[5]) if len(employee) > 5 and employee[5] else "-"
    workphone = escape_markdown(employee[3]) if len(employee) > 3 and employee[3] else "-"
    private_phone = escape_markdown(employee[4]) if len(employee) > 4 and employee[4] else "-"
    bd = escape_markdown(employee[7]) if len(employee) > 7 and employee[7] else "-"
    email = escape_markdown(employee[8]) if len(employee) > 8 and employee[8] else "-"
    tg = escape_markdown(employee[9]) if len(employee) > 9 and employee[9] else "-"

    response = (
        f"<b>–§–ò–û:</b> {fio}\n"
        f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}\n"
        f"<b>–û—Ç–¥–µ–ª:</b> {department}\n"
        f"<b>–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:</b> {place}\n"
        f"<b>–†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {workphone}\n"
        f"<b>–°–æ—Ç–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {private_phone}\n"
        f"<b>–î–†:</b> {bd}\n"
        f"<b>Email:</b> {email}\n"
        f"<b>tg:</b> {tg}"
    )
    return response


async def process_searched_employee_results(message: types.Message, found_employees):
    if not found_employees:
        error_response = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É'
        await handle_employee_info_message(message.chat.id, error_response)
        return

    if len(found_employees) == 1:
        response = format_employee_info(found_employees[0])
        await handle_employee_info_message(message.chat.id, response)

    else:
        inline_keyboard = types.InlineKeyboardMarkup(row_width=1)

        for idx, employee in enumerate(found_employees):
            button_text = employee[2]  # –§–ò–û –∏–∑ —Ç–∞–±–ª–∏—Ü—ã

            callback_data = json.dumps({"type": "employee_info", "index": idx, "chat_id": message.chat.id})
            button = types.InlineKeyboardButton(button_text, callback_data=callback_data)
            inline_keyboard.add(button)

        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=inline_keyboard)
        create_go_main_menu_inline_button()


@dp.callback_query_handler(lambda call: json.loads(call.data)["type"] == "employee_info")
async def handle_employee_info_call(call: types.CallbackQuery):
    global stored_employees_data
    data = json.loads(call.data)
    index = data["index"]
    chat_id = data["chat_id"]

    found_employees = stored_employees_data.get(chat_id)

    if found_employees and index < len(found_employees):
        employee = found_employees[index]
        response = format_employee_info(employee)
        await handle_employee_info_message(chat_id, response)
    else:
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ.")
        send_go_main_menu_button(chat_id)

'''

async def send_request_to_gpt(chat_id, response):
    global info_text_storage
    trimmed_info = info_text_storage.get(chat_id, "")[:7000]
    messages = [
        {"role": "system", "content": "—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –æ–±–∑–æ—Ä–æ–≤ –Ω–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è - MCR info. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ —Ç—ã –ø–∏—Å–∞—Ç—å –æ–±–∑–æ—Ä—ã. –î–æ–±–∞–≤–ª—è–π —é–º–æ—Ä, –∏–∑–±–µ–≥–∞–π —Ç–µ–º—ã –ø–æ–ª–∏—Ç–∏–∫–∏ –∏ —Ä–µ–ª–∏–≥–∏–∏. –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–∏—Ç–∞—Ç—ã —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤, —É—á–µ–Ω—ã—Ö, —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–æ—ç—Ç–æ–≤ –∏–ª–∏ —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫: MARVEL, –≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä, –º–æ—Ä—Ç–∞–ª –∫–æ–º–±–∞—Ç –Ω–∞ —Å–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –ø–∏—à–∏ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º, —Ü–∏—Ç–∞—Ç—ã –∫—É—Ä—Å–∏–≤–æ–º. –†–∞–∑–º–µ—Ç–∫–∞ - Markdown. –ë—É–¥—å –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–º, –∏–∑–±–µ–≥–∞–π –≤—ã—Å–º–µ–∏–≤–∞–Ω–∏—è –ø–ª–æ—Ö–æ–π —Å–≤—è–∑–∏, —Ç–∞–∫ –∫–∞–∫ –∂–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ–±–∏–¥–µ—Ç—å—Å—è –Ω–∞ —Ç–µ–±—è. –î–æ–±–∞–≤–ª—è–π –æ—Ç—Å—Ç—É–ø—ã, —á—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–µ–ª–∞ –∫—Ä–∞—Å–∏–≤–æ. –ù–µ –≤–∏–¥–æ–∏–∑–º–µ–Ω—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö - '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –£–¶–ù 2.0 (2023):' –∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 2023:'. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∞–∫–æ–Ω–∏—á–µ–Ω, –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π! "},
        {"role": "user", "content": "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ –≥–æ, –¥. –ü–µ—Å—á–∞–Ω–∫–∞ (19.95¬∞C )\n\n"
                                    "üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2010 –≥.): 765 —á–µ–ª.\n"
                                    "üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥.): 762 —á–µ–ª.\n\n"
                                    "–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å: –ë–∏–ª–∞–π–Ω(3G üü°–ù–∏–∑–∫–æ–µ)\n"
                                    "–ú–µ–≥–∞—Ñ–æ–Ω(3G üü°–ù–∏–∑–∫–æ–µ)\n"
                                    "–ú–¢–°(3G üü¢–•–æ—Ä–æ—à–µ–µ)\n"
                                    "–¢–µ–ª–µ2(4G üü°–ù–∏–∑–∫–æ–µ)\n"
                                    "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: \n\n"
                                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤: 0\n"
                                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –£–¶–ù 2.0 (2023):\n\n"
                                    "–ì–æ–ª–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å—É–ª—É–≥–∏: 4\n"
                                    "–ì–æ–ª–æ—Å–æ–≤ –ø–æ—á—Ç–æ–π: 0\n"
                                    "–ò—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤: 4\n"
                                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª—É–≥:\n"
                                    "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°—É–±—Å–∏–¥–∏—è 2017\n"
                                    "–ü–æ–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–≤–æ—Ç—É:\n\n"
                                    "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ –∂–º–∏ /otpusk\n"
                                    "–ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫, –∂–º–∏ /employee"},
        {"role": "assistant", "content": "üèû –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ –≥–æ, –¥. –ü–µ—Å—á–∞–Ω–∫–∞ (25.9)\n)"
                                         "üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ (2010 –≥.): 765 —á–µ–ª.\n"
                                         "üåç –ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥.): 762 —á–µ–ª.\n\n"
                                         "üí¨ –Ø —Ö–æ—Ç–µ–ª –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ –ü–µ—Å—á–∞–Ω–∫–µ, –Ω–æ —É–≤—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π —Ç–∞–∫ –∂–µ —Ä–µ–¥–∫–∞, –∫–∞–∫ –ø–µ—Å—á–∏–Ω–∫–∏ –≤ –ø—É—Å—Ç—ã–Ω–µ. –ù–æ –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Å—è, –≤–µ–¥—å —É –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è! üòÑ\n"
                                         "üì∂ –£—Ä–æ–≤–µ–Ω—å —Å–≤—è–∑–∏:\n"
                                         "–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:\n"
                                         "- –ë–∏–ª–∞–π–Ω: 3G üü° –ù–∏–∑–∫–æ–µ (–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –°–ú–°, –Ω–æ —Å —Ñ–æ—Ç–∫–∞–º–∏ –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å)\n"
                                         "- –ú–µ–≥–∞—Ñ–æ–Ω: 3G üü° –ù–∏–∑–∫–æ–µ (–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–æ–∂–Ω–æ, –Ω–æ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –Ω–µ—Ä–≤–Ω—ã–π —Ç–∏–∫)\n"
                                         "- –ú–¢–°: 3G üü¢ –•–æ—Ä–æ—à–µ–µ (–°–≤—è–∑—å —Å—Ç–∞–±–∏–ª—å–Ω–∞, –∫–∞–∫ —Å–∞–º—ã–π –ø—Ä–µ–¥–∞–Ω–Ω—ã–π –¥—Ä—É–≥)\n"
                                         "- –¢–µ–ª–µ2: 4G üü° –ù–∏–∑–∫–æ–µ (–°–∫–æ—Ä–æ—Å—Ç—å, –∫–∞–∫ —É —á–µ—Ä–µ–ø–∞—Ö–∏, –Ω–æ –ª—É—á—à–µ, —á–µ–º –Ω–∏—á–µ–≥–æ)\n\n"
                                         "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: \n"
                                         "- Wi-Fi: –ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ —Å–æ—Å–µ–¥–Ω–∏–º —É–ª–∏—Ü–∞–º –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å—á–∞—Å—Ç–ª–∏–≤–æ–º—É —Å–ª—É—á–∞—é - –ø–æ–π–º–∞–Ω–Ω–æ–º—É Wi-Fi —Å–∏–≥–Ω–∞–ª—É –æ—Ç –∫–∞–∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∫–∞—Ñ–µ –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–∞. üì∂üîç\n"
                                         "- –î–æ–º–∞—à–Ω–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç: –í–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å –æ–Ω–ª–∞–π–Ω-–≥–µ–π–º–∏–Ω–≥ –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–∞–∑, –Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ —Ö–≤–∞—Ç–∏—Ç. üè°üíª \n\n"
                                         " –¢–∞–∫—Å–æ—Ñ–æ–Ω—ã: 0\n\n"
                                         "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –£–¶–ù 2.0 (2023):\n\n"
                                         "–ì–æ–ª–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å—É–ª—É–≥–∏: 4\n"
                                         "–ì–æ–ª–æ—Å–æ–≤ –ø–æ—á—Ç–æ–π: 0\n"
                                         "–ò—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤: 4\n"
                                         "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª—É–≥:\n"
                                         "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°—É–±—Å–∏–¥–∏—è 2017\n"
                                         "–ü–æ–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–≤–æ—Ç—É:\n\n"
                                         "üïµÔ∏è‚Äç‚ôÄÔ∏è –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏–ª–∏ –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /employee –∏–ª–∏ /otpusk.\n\n"
                                         "üèùÔ∏è –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –≤—Å–µ, —á—Ç–æ —è –∑–Ω–∞—é –æ –ü–µ—Å—á–∞–Ω–∫–µ. –ù–æ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —è –ø—Ä–∏–≤–µ–¥—É –µ—â–µ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏! üí™üòâ"},
        {"role": "user", "content": "–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø–æ–¥–æ–±–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞: "},
        {"role": "user", "content": response}
    ]

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-16k-0613",
        messages=messages,
        max_tokens=2000,
        n=1,
        temperature=1,
        stream=True,
    )
    message_content = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    chunk_counter = 0  # –°—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    message = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        while True:
            chunk = response['choices'][0]['message']['content']  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç

            print("Received chunk:")
            print(chunk)

            if "error" in chunk:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—à–∏–±–∫–æ–π
                # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                break

            delta = response['choices'][0]['message'].get("delta", {})  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–ª—å—Ç—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
            message_delta = delta.get("content")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–µ–ª—å—Ç—ã

            if message_delta is not None and message_delta.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç—ã–º
                message_content += message_delta  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–ª—å—Ç—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                chunk_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤

            if chunk_counter % 20 == 0:  # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–æ 20 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
                if message_content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                    if message is None:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                        message = await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                        message = await bot.send_message(chat_id=chat_id, text=escape(message_content), parse_mode=types.ParseMode.HTML)
                    else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
                        if message.text != message_content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                            await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                            message = await bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=escape(message_content), parse_mode=types.ParseMode.HTML)
                    print("Current message:")
                    print(message_content)
                else:
                    print("Empty message content, skipping...")

            await asyncio.sleep(0.5)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏

    except StopIteration:
        pass

    if message_content and message is not None:
        return message.text
'''

async def send_request_to_gpt(chat_id, response):
    global info_text_storage
    trimmed_info = info_text_storage.get(chat_id, "")[:7000]
    messages = [
        {"role": "system", "content": "—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –æ–±–∑–æ—Ä–æ–≤ –Ω–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è - MCR info. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ —Ç—ã –ø–∏—Å–∞—Ç—å –æ–±–∑–æ—Ä—ã. –¢–æ–Ω –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∏–∑–±–µ–≥–∞–π —Ç–µ–º—ã –ø–æ–ª–∏—Ç–∏–∫–∏ –∏ —Ä–µ–ª–∏–≥–∏–∏. –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–∏—Ç–∞—Ç—ã —É—á–µ–Ω—ã—Ö –∏ —Ä—É—Å—Å–∫–∏—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π. –ë—É–¥—å –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–º, –∏–∑–±–µ–≥–∞–π –≤—ã—Å–º–µ–∏–≤–∞–Ω–∏—è –ø–ª–æ—Ö–æ–π —Å–≤—è–∑–∏, —Ç–∞–∫ –∫–∞–∫ –∂–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ–±–∏–¥–µ—Ç—å—Å—è –Ω–∞ —Ç–µ–±—è. –î–æ–±–∞–≤–ª—è–π –æ—Ç—Å—Ç—É–ø—ã, —á—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–µ–ª–∞ –∫—Ä–∞—Å–∏–≤–æ. –ù–µ –≤–∏–¥–æ–∏–∑–º–µ–Ω—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö - '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –£–¶–ù 2.0 (2023):' –∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 2023:'. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∞–∫–æ–Ω–∏—á–µ–Ω, –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π! –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é [\n]. –†–∞–∑–º–µ—Ç–∫–∞ markdown."},
        {"role": "user", "content": "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ –≥–æ, –¥. –ü–µ—Å—á–∞–Ω–∫–∞ (19.95¬∞C )\n\n"
                                    "üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2010 –≥.): 765 —á–µ–ª.\n"
                                    "üë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥.): 762 —á–µ–ª.\n\n"
                                    "–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å: –ë–∏–ª–∞–π–Ω(3G üü°–ù–∏–∑–∫–æ–µ)\n"
                                    "–ú–µ–≥–∞—Ñ–æ–Ω(3G üü°–ù–∏–∑–∫–æ–µ)\n"
                                    "–ú–¢–°(3G üü¢–•–æ—Ä–æ—à–µ–µ)\n"
                                    "–¢–µ–ª–µ2(4G üü°–ù–∏–∑–∫–æ–µ)\n"
                                    "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: \n\n"
                                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤: 0\n"
                                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –£–¶–ù 2.0 (2023):\n\n"
                                    "–ì–æ–ª–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å—É–ª—É–≥–∏: 4\n"
                                    "–ì–æ–ª–æ—Å–æ–≤ –ø–æ—á—Ç–æ–π: 0\n"
                                    "–ò—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤: 4\n"

                                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª—É–≥:\n"
                                    "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°—É–±—Å–∏–¥–∏—è 2017\n"
                                    "–ü–æ–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–≤–æ—Ç—É:\n\n"
                                    "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ –∂–º–∏ /otpusk\n"
                                    "–ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫, –∂–º–∏ /employee"},
        {"role": "assistant", "content": "üèû *–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ –≥–æ, –¥. –ü–µ—Å—á–∞–Ω–∫–∞ (25.9¬∞C)*\n\n\n"
                                         "\nüë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ (2010 –≥.): 765 —á–µ–ª.\n"
                                         "\nüåç –ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥.): 762 —á–µ–ª.\n\n"
                                         "üí¨ –Ø —Ö–æ—Ç–µ–ª –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ –ü–µ—Å—á–∞–Ω–∫–µ, –Ω–æ —É–≤—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π —Ç–∞–∫ –∂–µ —Ä–µ–¥–∫–∞, –∫–∞–∫ –ø–µ—Å—á–∏–Ω–∫–∏ –≤ –ø—É—Å—Ç—ã–Ω–µ. –ù–æ –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Å—è, –≤–µ–¥—å —É –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è! üòÑ\n"
                                         "üì∂ –£—Ä–æ–≤–µ–Ω—å —Å–≤—è–∑–∏:\n"
                                         "–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:\n"
                                         "- –ë–∏–ª–∞–π–Ω: 3G üü° –ù–∏–∑–∫–æ–µ \n"
                                         "- –ú–µ–≥–∞—Ñ–æ–Ω: 3G üü° –ù–∏–∑–∫–æ–µ \n"
                                         "- –ú–¢–°: 3G üü¢ –•–æ—Ä–æ—à–µ–µ \n"
                                         "- –¢–µ–ª–µ2: 4G üü° –ù–∏–∑–∫–æ–µ \n"
                                         "–í —Ü–µ–ª–æ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ –≤ —ç—Ç–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ!\n\n"
                                         "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: \n"

                                         "- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–∞—à–Ω–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —É –º–µ–Ω—è –Ω–µ—Ç, –Ω–æ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –µ—Å—Ç—å –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å –æ–Ω–ª–∞–π–Ω-–≥–µ–π–º–∏–Ω–≥ –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–∞–∑, –Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ —Ö–≤–∞—Ç–∏—Ç. üè°üíª \n\n"
                                         "‚òéÔ∏è–¢–∞–∫—Å–æ—Ñ–æ–Ω—ã: 0 \n"

                                         "\n–ù–æ –≤–º–µ—Å—Ç–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑—å—é –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º\n\n"
                                         "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –£–¶–ù 2.0 (2023):\n\n"
                                         "–ì–æ–ª–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å—É–ª—É–≥–∏: 4\n"
                                         "–ì–æ–ª–æ—Å–æ–≤ –ø–æ—á—Ç–æ–π: 0\n"
                                         "–ò—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤: 4\n"
                                         "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª—É–≥:\n"
                                         "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°—É–±—Å–∏–¥–∏—è 2017\n"
                                         "–ü–æ–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–≤–æ—Ç—É:\n\n"

                                         "üïµÔ∏è‚Äç‚ôÄÔ∏è –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏–ª–∏ –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /employee –∏–ª–∏ /otpusk.\n\n"
                                         "üèùÔ∏è –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –≤—Å–µ, —á—Ç–æ —è –∑–Ω–∞—é –æ –ü–µ—Å—á–∞–Ω–∫–µ. –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—Ä—É–≥–∏—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö –∫—Ä–∞—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–≤—è–∑–∏ –∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∫–æ—Ç–æ—Ä—ã–µ –≤ –Ω–µ–º —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è!üí™üòâ"},
        {"role": "user", "content": "–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø–æ–¥–æ–±–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞: "},
        {"role": "user", "content": response}
    ]

    response = openai.ChatCompletion.create(
        model="gpt-4-turbo-preview",
        messages=messages,
        max_tokens=2000,
        n=1,
        temperature=1,
        stream=True,
    )

    message_content = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
    message_content_no_md = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
    chunk_counter = 0  # –°—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    message = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        while True:
            chunk = next(response)  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç

            if chunk["object"] == "error":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—à–∏–±–∫–æ–π
                # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                break

            delta = chunk.get("choices", [{}])[0].get("delta", {})  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–ª—å—Ç—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
            message_delta = delta.get("content")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–µ–ª—å—Ç—ã

            if message_delta is not None and message_delta.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç—ã–º
                print(f"Adding to message_content: {message_delta}")
                message_content += message_delta  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–ª—å—Ç—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
                message_content_no_md += remove_markdown(message_delta)  # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–ª—å—Ç—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                chunk_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤




            if chunk_counter % 20 == 0 or chunk["object"] == "chat.completion":  # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–æ 20 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
                if message_content_no_md:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                    if message is None:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                        message = await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                        message = await bot.send_message(chat_id=chat_id, text=message_content_no_md)
                    else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
                        if message.text != message_content_no_md:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                            await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                            try:
                                message = await bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=message_content_no_md)
                            except aiogram.exceptions.MessageNotModified:
                                pass

            await asyncio.sleep(0.05)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏

    except StopIteration:
        pass


    if message_content and (message is None or message.text != message_content):
        if message is None:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            message = await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
            message = await bot.send_message(chat_id=chat_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
        else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
            await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
            try:
                message = await bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
            except aiogram.exceptions.MessageNotModified:
                pass

    if message_content and message is not None:
        return message.text

    return None
'''
async def send_request_to_gpt(chat_id, response):
    global info_text_storage
    trimmed_info = info_text_storage.get(chat_id, "")[:7000]
    messages = [
        {"role": "system", "content": "–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ MCR_info. –ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–π —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–æ–∫ - –¥–æ 7%. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."},

        {"role": "user", "content": response}
    ]

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-16k-0613",
        messages=messages,
        max_tokens=1000,
        n=1,
        temperature=1,
        stream=True,
    )

    message_content = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    chunk_counter = 0  # –°—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    message = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        while True:
            chunk = next(response)  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç

           # print("Received chunk:")
           # print(chunk)

            if chunk["object"] == "error":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—à–∏–±–∫–æ–π
                # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                break

            delta = chunk.get("choices", [{}])[0].get("delta", {})  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–ª—å—Ç—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
            message_delta = delta.get("content")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–µ–ª—å—Ç—ã

            if message_delta is not None and message_delta.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç—ã–º
                message_content += message_delta  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ–ª—å—Ç—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                chunk_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤

            if chunk_counter % 20 == 0 or chunk["object"] == "chat.completion":  # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–æ 20 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
                if message_content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                    if message is None:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                        message = await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                        message = await bot.send_message(chat_id=chat_id, text=message_content)
                    else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
                        if message.text != message_content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                            await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
                            try:
                                message = await bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=message_content)
                            except aiogram.exceptions.MessageNotModified:
                                pass

                    #print("Current message:")
                   # print(message_content)
                else:
                    print("Empty message content, skipping...")

            await asyncio.sleep(0.03)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏

    except StopIteration:
        pass

    if message_content and (message is None or message.text != message_content):
        if message is None:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            message = await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
            message = await bot.send_message(chat_id=chat_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
        else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
            await bot.send_chat_action(chat_id=chat_id, action=types.ChatActions.TYPING)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
            try:
                message = await bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=message_content, parse_mode=types.ParseMode.MARKDOWN)
            except aiogram.exceptions.MessageNotModified:
                pass



    if message_content and message is not None:
        return message.text

    return None

'''


#13
async def handle_additional_info(query):
    chat_id = json.loads(query.data)["chat_id"]
    if chat_id in additional_info_storage:
        response = additional_info_storage[chat_id]
        messages = split_message(response)
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                await bot.send_message(chat_id, msg, parse_mode='Markdown')

        await bot.answer_callback_query(query.id)
    else:
        await bot.answer_callback_query(query.id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


async def handle_espd_info(query):
    chat_id = json.loads(query.data)["chat_id"]
    if chat_id in espd_info_storage:
        response = espd_info_storage[chat_id]
        messages = split_message(response)
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                #msg = msg.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')

                await bot.send_message(chat_id, msg, parse_mode='HTML')

        await bot.answer_callback_query(query.id)
    else:
        await bot.answer_callback_query(query.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ï–°–ü–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


async def handle_szoreg_info(query):
    chat_id = json.loads(query.data)["chat_id"]
    if chat_id in szoreg_info_storage:
        response = szoreg_info_storage[chat_id]
        messages = split_message(response)
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                await bot.send_message(chat_id, msg, parse_mode='HTML')

        await bot.answer_callback_query(query.id)
    else:
        await bot.answer_callback_query(query.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –°–ó–û (—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


async def handle_schools_info(query):
    chat_id = json.loads(query.data)["chat_id"]
    if chat_id in schools_info_storage:
        response = schools_info_storage[chat_id]
        messages = split_message(response)
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                await bot.send_message(chat_id, msg, parse_mode='HTML')

        await bot.answer_callback_query(query.id)
    else:
        await bot.answer_callback_query(query.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —à–∫–æ–ª–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")



from itertools import chain

async def handle_survey_chart(query):
    print("handle_survey_chart called with query data:", query.data)
    chat_id = json.loads(query.data)["chat_id"]

    if chat_id in survey_data_storage:
        logging.info("Data found for chat_id %s", chat_id)
        survey_data = survey_data_storage[chat_id]

        data_list = []

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
        for data_row in survey_data:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
            data_row += [None] * (14 - len(data_row))

            row_data = {
                "–î–∞—Ç–∞": data_row[0],
                "ID": data_row[1],
                "–ò–º—è": data_row[2],
                "–§–∞–º–∏–ª–∏—è": data_row[3],
                "–ù–∏–∫": data_row[4],
                "–ö–ª—é—á": data_row[5],
                "–£—Ä–æ–≤–µ–Ω—å_Tele2": data_row[6],
                "–ö–∞—á–µ—Å—Ç–≤–æ_Tele2": data_row[7],
                "–£—Ä–æ–≤–µ–Ω—å_Megafon": data_row[8],
                "–ö–∞—á–µ—Å—Ç–≤–æ_Megafon": data_row[9],
                "–£—Ä–æ–≤–µ–Ω—å_Beeline": data_row[10],
                "–ö–∞—á–µ—Å—Ç–≤–æ_Beeline": data_row[11],
                "–£—Ä–æ–≤–µ–Ω—å_MTS": data_row[12],
                "–ö–∞—á–µ—Å—Ç–≤–æ_MTS": data_row[13],
            }
            data_list.append(row_data)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
        data_df = pd.DataFrame(data_list)
        print("DataFrame created with data:", data_df)

        title = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞"  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ DataFrame
                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ DataFrame
      #  for idx, row in data_df.iterrows():
        try:
            #print(f"Calling create_individual_radar_chart for row {idx}...")
            await create_individual_radar_chart(chat_id, data_df, title)  # –ø–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å DataFrame, –∞ –Ω–µ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        except Exception as e:
            print("An error occurred:", e)
            logging.error("An error occurred: %s", e, exc_info=True)

    else:
        print(f"No data found for chat_id {chat_id}")












#@dp.message_handler(Command('text'))
dp.register_callback_query_handler(handle_additional_info, lambda query: json.loads(query.data)["type"] == "additional_info")
dp.register_callback_query_handler(handle_espd_info, lambda query: json.loads(query.data)["type"] == "espd_info")
dp.register_callback_query_handler(handle_szoreg_info, lambda query: json.loads(query.data)["type"] == "szoreg_info")
dp.register_callback_query_handler(handle_schools_info, lambda query: json.loads(query.data)["type"] == "schools_info")
dp.register_callback_query_handler(handle_digital_ministry_info, lambda query: json.loads(query.data)["type"] == "digital_ministry_info")
dp.register_callback_query_handler(handle_digital_ministry_info_post, lambda query: json.loads(query.data)["type"] == "digital_ministry_info_post")
dp.register_callback_query_handler(handle_survey_chart, lambda query: json.loads(query.data)["type"] == "survey_chart")







import unicodedata
from google.cloud import vision_v1 as vision
from pdf2image import convert_from_path
from docx import Document
from docx.shared import Pt, Cm
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT, WD_LINE_SPACING

from PIL import Image
import io
from google.oauth2 import service_account


def send_request_to_vision(text):
    messages = [
        {"role": "system", "content": "—Ç—ã —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –∏—Ö –≤—Å—Ç–∞–≤–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç –≤–æ—Ä–¥. –í –æ—Å–Ω–æ–≤–Ω–æ–º —Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—à—å –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º. —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π –∫–∞–∫ —Å–∞–º—ã–π –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ. –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–æ—Ä—Ç–∏—Ç –≤–∏–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –£—á—Ç–∏ —á—Ç–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ —à–∏—Ä–∏–Ω–µ –∏ —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∫—Ä–∞—Å–∏–≤–æ."},
        {"role": "user", "content": text},
    ]
    response = openai.ChatCompletion.create(
        model="gpt-4-turbo-preview",
        messages=messages,
        max_tokens=1500,
        n=1,
        temperature=1,
    )
    return response['choices'][0]['message']['content']

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_docs(message: types.Message):
    doc_id = message.document.file_id
    file_info = await bot.get_file(doc_id)
    downloaded_file = await bot.download_file(file_info.file_path)

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    dir_path = '/home/rejoller/mcrbot/'
    os.makedirs(dir_path, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫
    file_path = os.path.join(dir_path, 'file.pdf')
    with open(file_path, 'wb') as f:
        f.write(downloaded_file.read())

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images = convert_from_path(file_path)

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc = Document()
    creds = service_account.Credentials.from_service_account_file(
            '/home/rejoller/mcrbot/credentials.json')

    client = vision.ImageAnnotatorClient(credentials=creds)
    full_text = ""
    for image in images:
        # Convert PIL Image to Bytes
        byte_arr = io.BytesIO()
        image.save(byte_arr, format='PNG')
        byte_arr = byte_arr.getvalue()
        image = vision.Image(content=byte_arr)

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Google Cloud Vision API
        response = client.text_detection(image=image)
        texts = response.text_annotations

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∏—Ö –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        texts.sort(key=lambda text: text.bounding_poly.vertices[0].y)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
        for text in texts:
            normalized_text = unicodedata.normalize('NFKD', text.description)
            cleaned_text = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', normalized_text)
            full_text += " " + cleaned_text

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é GPT-3.5-turbo
    gpt_normalized_text = send_request_to_vision(full_text)

    paragraph = doc.add_paragraph(gpt_normalized_text)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    run = paragraph.runs[0]
    run.font.name = 'Times New Roman'
    run.font.size = Pt(14)
    paragraph_format = paragraph.paragraph_format
    paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
    paragraph_format.line_spacing = 1
    paragraph_format.first_line_indent = Cm(1.25)

    # Save the Word document to a temporary file
    doc_path = os.path.join(dir_path, 'temp.docx')
    doc.save(doc_path)

    # Send the Word document back to the user
    with open(doc_path, "rb") as doc_file:
        await bot.send_document(message.chat.id, doc_file)







import difflib


import asyncio


















#@dp.message_handler(Command('text'))
@dp.message_handler()


async def handle_text(message: types.Message, state: FSMContext):
    user_state = await state.get_state()
    if user_state == Form.waiting_for_number.state:
        return



    print ('–æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç')
    global info_text_storage
    user_first_name = message.from_user.first_name
    await log_user_data_from_message(message)
    chat_id = message.chat.id



    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id
   # if user_id == 964635576:
    #    await bot.send_message(message.chat.id, "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∞–º")
      #  return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    votes_response = ""
    response = ''
    ucn2_response = ""
    operators_response = ''
    survey_results_values = ''
    '''
    if message.text.lower().startswith("–æ–±—Ä–∞—â–µ–Ω–∏–µ"):
        # –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ OpenAI
        await bot.send_message(message.chat.id, f'üòà')
        response = await send_request_to_openai_2(message.chat.id, message.text[10:].strip())  # –ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ "–æ–±—Ä–∞—â–µ–Ω–∏–µ "
        await bot.send_message(message.chat.id, response)
        return

    if message.text.lower().startswith("—Ç–æ—Ä "):
        await handle_tor_message(message)
        return
    if message.text.lower() == "–∫–Ω–¥ –∫—Ä–∞–π":
        await handle_knd_kraj_message(message)
        return
    if message.text.lower().startswith("–º—Å–∑—É "):
        await bot.send_message(message.chat.id, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå')
        await handle_mszu_message(message)
        return
    if message.text.lower().startswith("2–º—Å–∑—É "):
        await bot.send_message(message.chat.id, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ú–°–ó–£ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π ')
        await handle_2mszu_message(message)
        return
    '''
    base_text = f'–°'
    final_text = f'üßê–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}'
    await bot.send_message(message.chat.id, f'üßê–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}')
    # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ search_values
    start_time = time.time()

    gc, spreadsheet = await get_authorized_client_and_spreadsheet()
    found_values_a = await search_values(message.text, spreadsheet)



   # found_values_a, found_values_s = await search_values(message.text)
   # found_mszu_values = await check_mszu_column_b(message.text)

    end_time = time.time()
    execution_time = end_time - start_time
    print("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ search_values: ", execution_time, "—Å–µ–∫—É–Ω–¥")

    if not found_values_a:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ —Å 70% —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
        levenshtein_matches = await search_values_levenshtein(message.text, spreadsheet, threshold=0.4, max_results=5)

        if levenshtein_matches:
            unique_matches = set(levenshtein_matches)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è
            first_match = list(unique_matches)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
            formatted_matches = "\n".join([f'`{match}`' for match in first_match])  # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            await bot.send_message(message.chat.id, f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)\n\n{formatted_matches}', parse_mode='Markdown')
        else:
            await bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return

    # –ï—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–æ–ª–±—Ü–µ A
    allowed_users = {964635576, 1063749463, 374056328, 572346758, 434872315, 1045874687, 1063749463, 487922464, 371098269, 402748716}
    if found_values_a:
        found_values = found_values_a
        await state.update_data(found_values=found_values)
      #  await bot.send_message(chat_id="430334520", text="–°–≤–µ—Ç–∞, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –º–∏–Ω—É—Å –æ–¥–∏–Ω –±–∞–ª–ª!")
       # await bot.send_message(chat_id="964635576", text="–°–≤–µ—Ç–∞, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –º–∏–Ω—É—Å –æ–¥–∏–Ω –±–∞–ª–ª!")



        if len(found_values) == 1:
            latitude = found_values[0][7]  # –®–∏—Ä–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ H —Ç–∞–±–ª–∏—Ü—ã goroda2.0
            longitude = found_values[0][8]



            weather_info = await get_weather(latitude, longitude, "7cc8daec601b8354e0bc6350592d6f98")
            yandex_2023_response = ''
            pokazatel_504p_lines = []
           # ucn2_values = await search_in_ucn2(found_values[0][4])
           # yandex_2023_values = await search_yandex_2023_values(found_values[0][4])
            #pokazatel_504p_values = await search_in_pokazatel_504p(found_values[0][4])  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ 4 –≤ found_values_a



            if len(found_values) > 0 and len(found_values[0]) > 4:
                # –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Ç–æ –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ found_values[5][4]

                ucn2_values, yandex_2023_values, pokazatel_504p_values, survey_results_values  = await asyncio.gather(
                    search_in_ucn2(found_values[0][4], spreadsheet),
                    search_yandex_2023_values(found_values[0][4], spreadsheet),
                    search_in_pokazatel_504p(found_values[0][4], spreadsheet),
                    search_in_results(found_values[0][4], spreadsheet)
                )
            else:
                # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –∏–Ω–¥–µ–∫—Å–∞ [5][4] –Ω–µ—Ç, –∏ –Ω—É–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –±–µ–∑ search_in_results
                ucn2_values, yandex_2023_values, pokazatel_504p_values = await asyncio.gather(
                    search_in_ucn2(found_values[0][4], spreadsheet),
                    search_yandex_2023_values(found_values[0][4], spreadsheet),
                    search_in_pokazatel_504p(found_values[0][4], spreadsheet)
                )
                survey_results_values = None



            '''
            try:
                votes_response = ''
                if len(found_values[0]) > 38:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ

                    votes = found_values[0][34] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    update_time = found_values[0][35] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    rank = found_values[0][36] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    same_votes_np = found_values[0][38] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    if votes != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and update_time != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and rank != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and same_votes_np != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                        votes_response = f'\n\n<b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –£–¶–ù 2.0 2024</b>\n\nüìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: <b>{votes}</b> (—Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–º–µ—é—Ç {same_votes_np} –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)\nüèÜ–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {rank}\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {update_time}'
                    else:
                        print("Debug: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.")
                    response += votes_response
                else:
                    print("Debug: –í —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.")
            except Exception as e:
                print(f"Debug: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ—Å–∞—Ö: {e}")

            '''

            if found_values_a:
                for row in found_values_a:
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞
                    operators = {
                        "Tele2": row[39] if len(row) > 39 else None,
                        "–ú–µ–≥–∞—Ñ–æ–Ω": row[40] if len(row) > 40 else None,
                        "–ë–∏–ª–∞–π–Ω": row[41] if len(row) > 41 else None,
                        "–ú–¢–°": row[42] if len(row) > 42 else None,
                    }
                    '''
                    operators_response = '\n–û—Ü–µ–Ω–∫–∞ –∂–∏—Ç–µ–ª–µ–π:\n'
                    for operator_name, operator_value in operators.items():
                        if operator_value:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
                            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ replace
                            operator_value = str(operator_value)
                            if "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" in operator_value:
                                signal_level = "üî¥–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                            elif "–ù–∏–∑–∫–æ–µ" in operator_value:
                                signal_level = "üü†–ù–∏–∑–∫–æ–µ"
                            elif "–°—Ä–µ–¥–Ω–µ–µ" in operator_value:
                                signal_level = "üü°–°—Ä–µ–¥–Ω–µ–µ"
                            elif "–•–æ—Ä–æ—à–µ–µ" in operator_value:
                                signal_level = "üü¢–•–æ—Ä–æ—à–µ–µ"
                            else:
                                signal_level = "‚ùì–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                            # –ó–∞–º–µ–Ω—è–µ–º "(" –∏ ")" –Ω–∞ " "
                            signal_level = signal_level.replace("(", " ").replace(")", " ")
                            operators_response += f'{operator_name}: {signal_level}\n'

                    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                    if operators_response == '\n–û—Ü–µ–Ω–∫–∞ –∂–∏—Ç–µ–ª–µ–π:\n':
                        operators_response += '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n'

                    response += operators_response
                    '''
                    operators_response = '\n–û—Ü–µ–Ω–∫–∞ –∂–∏—Ç–µ–ª–µ–π:\n'

                    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
                    operator_responses = []

                    for operator_name, operator_value in operators.items():

                        if operator_value:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
                            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ replace
                            operator_value_str = str(operator_value)

                            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
                            signal_quality = re.search(r'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç|–ù–∏–∑–∫–æ–µ|–°—Ä–µ–¥–Ω–µ–µ|–•–æ—Ä–æ—à–µ–µ', operator_value_str, re.IGNORECASE)
                            if signal_quality:
                                signal_quality = signal_quality.group()
                                if "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" in signal_quality:
                                    signal_level = "üî¥–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                                elif "–ù–∏–∑–∫–æ–µ" in signal_quality:
                                    signal_level = "üü†–ù–∏–∑–∫–æ–µ"
                                elif "–°—Ä–µ–¥–Ω–µ–µ" in signal_quality:
                                    signal_level = "üü°–°—Ä–µ–¥–Ω–µ–µ"
                                elif "–•–æ—Ä–æ—à–µ–µ" in signal_quality:
                                    signal_level = "üü¢–•–æ—Ä–æ—à–µ–µ"
                                else:
                                    signal_level = "‚ùì–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                                # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –µ–≥–æ —ç–º–æ–¥–∑–∏-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
                                operator_value_str = operator_value_str.replace(signal_quality, signal_level)
                            else:
                                operator_value_str = operator_value_str

                            # –ó–∞–º–µ–Ω—è–µ–º "(" –∏ ")" –Ω–∞ " "
                            operator_value_str = operator_value_str.replace("(", " ").replace(")", " ")
                            operator_responses.append(f'{operator_name}: {operator_value_str}\n')
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç
                            continue



                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                    if not operator_responses:
                        operators_response += '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n'
                    else:
                        operators_response += ''.join(operator_responses)

                    response += operators_response




            if yandex_2023_values:
                yandex_2023_response = '\n\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 2023</b>\n\n'
                for row in yandex_2023_values:
                    yandex_2023_response += f'–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {row[4]}\n–û–ø–µ—Ä–∞—Ç–æ—Ä: {row[15]}\n–°–æ–≥–ª–∞—à–µ–Ω–∏–µ: {row[7]}\n–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ú–¶–†: {row[8]}\n–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ê–ì–ó: {row[9]}\n–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {row[11]}\n–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ê–ú–°: {row[12]}\n–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ –ë–°: {row[13]}\n–ó–∞–ø—É—Å–∫ —É—Å–ª—É–≥: {row[14]}\n\n'
            if pokazatel_504p_values:
                for index in range(6, 10):
                    if len(pokazatel_504p_values[0]) > index and pokazatel_504p_values[0][index] and pokazatel_504p_values[0][index].strip():
                        value = pokazatel_504p_values[0][index]
                        if "–•–æ—Ä–æ—à–µ–µ" in value:
                            value = value.replace("–•–æ—Ä–æ—à–µ–µ", "üü¢–•–æ—Ä–æ—à–µ–µ")
                        if "–ù–∏–∑–∫–æ–µ" in value:
                            value = value.replace("–ù–∏–∑–∫–æ–µ", "üü†–ù–∏–∑–∫–æ–µ")
                        pokazatel_504p_lines.append(value)
            if ucn2_values:
                for row in ucn2_values:
                    ucn2_response = ''

                    if 4 < len(row) and row[4]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                        ucn2_response += '  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –¢–µ–ª–µ2:\n    -–°–ú–†: ' + row[4] + '\n'
                    if 5 < len(row) and row[5]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                        ucn2_response += '    -–ó–∞–ø—É—Å–∫: ' + row[5] + '\n'
                    if 6 < len(row) and row[6]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                        ucn2_response += '    -–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ' + row[6] + '\n'

                    if ucn2_response:  # –ï—Å–ª–∏ ucn2_response –Ω–µ –ø—É—Å—Ç, –¥–æ–±–∞–≤–∏—Ç—å –≤–≤–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–æ
                        ucn2_response = '\n\n\n<b>–£–¶–ù 2.0 2023</b>\n' + ucn2_response
                        response += ucn2_response







                response += ucn2_response

            pokazatel_504p_response = "\n".join(pokazatel_504p_lines) if pokazatel_504p_lines else "üî¥–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"


            if "4G" in pokazatel_504p_response:
                votes_response = ""
            else:
                # –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ "4G" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ pokazatel_504p_response
                try:
                    if len(found_values[0]) > 38:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ
                        votes = found_values[0][34] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        update_time = found_values[0][35] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        rank = found_values[0][36] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        same_votes_np = found_values[0][38] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                        if votes != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and update_time != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and rank != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and same_votes_np != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                            votes_response = f'\n\n<b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –£–¶–ù 2.0 2024</b>\n\nüìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: <b>{votes}</b> (—Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–º–µ—é—Ç {same_votes_np} –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)\nüèÜ–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {rank}\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {update_time}'
                        else:
                            print("Debug: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.")
                except Exception as e:
                    print(f"Debug: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ—Å–∞—Ö: {e}")


          #  operators_response = await generate_operators_response([found_values_a])
            #print('operators_response', operators_response)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏




          #  response = f'{found_values[0][1]}* ({weather_info})\n\nüë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2010 –≥.): {found_values[0][2]} —á–µ–ª.\nüë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥.): {found_values[0][5]} —á–µ–ª.\n\n–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å: {pokazatel_504p_response}\n–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {get_value(found_values[0], 9)}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤: {get_value(found_values[0], 12)}{yandex_2023_response}{ucn2_response}\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ –∂–º–∏ /otpusk \n–ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫, –∂–º–∏ /employee'




          #  response = f'<b>{found_values[0][1]}</b> {weather_info}\n\nüë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2010 –≥.): {found_values[0][2]} —á–µ–ª.\nüë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2020 –≥.): {found_values[0][5]} —á–µ–ª.\n\n<b>–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:</b>\n{pokazatel_504p_response}\n{operators_response}\n\n–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {await get_value(found_values[0], 9)}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤: {await get_value(found_values[0], 12)}{yandex_2023_response}{ucn2_response}{votes_response}\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –£–¶–ù 2.0 2024 –∂–º–∏ /votes\n\n–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –∂–∏—Ç–µ–ª–µ–π - <a href="http://t.me/providers_rating_bot">@providers_rating_bot</a>'


            response = f'<b>{found_values[0][1]}</b>  {weather_info}'
            '''
            selsovet_info = await get_value(found_values[0], 20)
            tanya_sub_info_year = await get_value(found_values[0], 13)
            tanya_sub_info_provider = await get_value(found_values[0], 14)
            taksofony_info = await get_value(found_values[0], 12)
            arctic_info = await get_value(found_values[0], 6)
            internet_info = await get_value(found_values[0], 9)
            '''


            try:
                selsovet_info, tanya_sub_info_year, tanya_sub_info_provider, taksofony_info, arctic_info, internet_info, population_2010, population_2020, itog_ucn_2023 = await asyncio.gather(
                    get_value(found_values[0], 20),
                    get_value(found_values[0], 13),
                    get_value(found_values[0], 14),
                    get_value(found_values[0], 12),
                    get_value(found_values[0], 6),
                    get_value(found_values[0], 9),
                    get_value(found_values[0], 2),
                    get_value(found_values[0], 5),
                    get_value(found_values[0], 24),
                    return_exceptions=True  # –í–æ–∑–≤—Ä–∞—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∫–∞–∫ –æ–±—ä–µ–∫—Ç–æ–≤
                )
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


            if selsovet_info:
                response += f'\n{selsovet_info}'
            if arctic_info:
                response += f'\n‚ùÑÔ∏èÔ∏è–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞‚ùÑÔ∏èÔ∏è'
            response += f'\n\nüë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2010 –≥: {population_2010} —á–µ–ª.\nüë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2020 –≥: {population_2020} —á–µ–ª.\n\n'

            if taksofony_info:
                response += f'\n‚òéÔ∏è—Ç–∞–∫—Å–æ—Ñ–æ–Ω: {taksofony_info}'

            response += f'\nüåê–∏–Ω—Ç–µ—Ä–Ω–µ—Ç: {internet_info}Ô∏è'
            response += f'\n\nüì±<b>–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:</b>\n{pokazatel_504p_response}'




            if tanya_sub_info_year and tanya_sub_info_provider:
                response += f'\n\n–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã–π "–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞" –≤ {tanya_sub_info_year} –≥–æ–¥—É, –æ–ø–µ—Ä–∞—Ç–æ—Ä {tanya_sub_info_provider}'

            if itog_ucn_2023:
                response += f'\n\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–∏–Ω—Ü–∏—Ñ—Ä—ã –†–æ—Å—Å–∏–∏ –æ–± –£–¶–ù 2024: {itog_ucn_2023}'
            response += f'\n{operators_response}\n'



            response += f'{yandex_2023_response}{ucn2_response}{votes_response}\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –£–¶–ù 2.0 2024 –∂–º–∏ /votes\n\n–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –∂–∏—Ç–µ–ª–µ–π - <a href="http://t.me/providers_rating_bot">@providers_rating_bot</a>'

            info_text_storage[message.chat.id] = response


            await bot.send_location(message.chat.id, latitude, longitude)
           # response = await send_request_to_gpt(chat_id, response)
           # await bot.send_message(chat_id="374056328", text="–∫—É-–∫—É")

            messages = split_message(response)



            for msg in messages:
                await bot.send_message(message.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)

        #    szofed_values = await search_szofed_values(found_values[0][4])
         #   espd_values = await search_espd_values(found_values[0][4])
         #   szoreg_values = await search_szoreg_values(found_values[0][4])
         #   schools_values = await search_schools_values(found_values[0][4])

          #  szofed_values, espd_values, szoreg_values, schools_values = await asyncio.gather(
           #     search_szofed_values(found_values[0][4], spreadsheet),
            #    search_espd_values(found_values[0][4], spreadsheet),
             #   search_szoreg_values(found_values[0][4], spreadsheet),
              #  search_schools_values(found_values[0][4], spreadsheet)
            #)


            szoreg_values, schools_values = await asyncio.gather(

                search_szoreg_values(found_values[0][4], spreadsheet),
                search_schools_values(found_values[0][4], spreadsheet)
            )
            print('szoreg:', szoreg_values)

            inline_keyboard = types.InlineKeyboardMarkup(row_width=3)

            if message.from_user.id in allowed_users:
                button_digital_ministry_info = types.InlineKeyboardButton("üòà–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ(–ë–ï–¢–ê)", callback_data=json.dumps({"type": "digital_ministry_info", "chat_id": message.chat.id}))
                inline_keyboard.add(button_digital_ministry_info)
                #button_digital_ministry_info_post = types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç –í–ö", callback_data=json.dumps({"type": "digital_ministry_info_post", "chat_id": message.chat.id}))
                #inline_keyboard.add(button_digital_ministry_info_post)




            survey_data_storage[message.chat.id] = survey_results_values

            if survey_results_values:
                survey_inline_keyboard = types.InlineKeyboardMarkup()
                button_survey_results = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞", callback_data=json.dumps({"type": "survey_chart", "chat_id": message.chat.id}))
                survey_inline_keyboard.add(button_survey_results)
                await bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞. –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=survey_inline_keyboard)



          #  if szofed_values or espd_values or szoreg_values or schools_values or info_text_storage:
            if  szoreg_values or schools_values or info_text_storage:
                """
                if szofed_values:
                    szofed_response = 'üè¢*–°–ó–û, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ —Ä–∞–º–∫–∞—Ö —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥ —Å 2019 –ø–æ 2021 –≥–æ–¥:*\n\n'
                    for i, row in enumerate(szofed_values, 1):
                        szofed_response += f'\n{i}. *–¢–∏–ø:* {row[8]}\n*–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {row[9]}\n*–ê–¥—Ä–µ—Å:* {row[4]}\n*–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–£–∑–µ–ª —Å–≤—è–∑–∏):* {row[10]}\n*–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:* {row[11]} –ú–±/—Å–µ–∫\n*–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:* {row[12]}\n'

                    callback_data = json.dumps({"type": "additional_info", "chat_id": message.chat.id})
                    additional_info_storage[message.chat.id] = szofed_response
                    button_additional_info = types.InlineKeyboardButton("üè¢–°–ó–û", callback_data=callback_data)
                    inline_keyboard.add(button_additional_info)

                if espd_values:
                    espd_response = 'üåê<b>–¢–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ï–°–ü–î:</b> \n\n'
                    for i, row in enumerate(espd_values, 1):
                        espd_response += f'\n{i}. <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {html.escape(row[12])}\n<b>–ê–¥—Ä–µ—Å:</b> {html.escape(row[8])}\n<b>–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {html.escape(row[9])}\n<b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> {html.escape(row[13])}\n<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {html.escape(row[18])}\n'

                    callback_data = json.dumps({"type": "espd_info", "chat_id": message.chat.id})
                    espd_info_storage[message.chat.id] = espd_response
                    button_espd_info = types.InlineKeyboardButton("üåê–ï–°–ü–î", callback_data=callback_data)
                    inline_keyboard.add(button_espd_info)
                """

                if szoreg_values:
                    szoreg_response = 'üè¢<b>–£—á—Ä–µ–∂–¥–µ–Ω–∏—è, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º–µ</b>\n\n'
                    for i, row in enumerate(szoreg_values, 1):

                        szoreg_response += f'\n{i}. <b>–¢–∏–ø:</b> {row[7]}\n<b>–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {row[8]}\n<b>–ê–¥—Ä–µ—Å:</b> {row[5]} \n<b>–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {row[6]}\n<b>–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</b> {row[9]}\n<b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> {row[10]}\n'

                        #if len(row) >= 10:

                         #   szoreg_response += f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {row[11]}\n'



                    callback_data = json.dumps({"type": "szoreg_info", "chat_id": message.chat.id})
                    szoreg_info_storage[message.chat.id] = szoreg_response
                    button_szoreg_info = types.InlineKeyboardButton(f"üè¢–°–ø–∏—Å–æ–∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π ({len(szoreg_values)})",callback_data=callback_data)
                    inline_keyboard.add(button_szoreg_info)

                if schools_values:
                    schools_response = 'üè´<b>–®–∫–æ–ª—ã:</b>\n'
                    for i, row in enumerate(schools_values, 1):
                        schools_response += f'\n{i} '
                        if len(row) > 7:
                            schools_response += f'<b>{html.escape(row[12])}</b>\n'
                        if len(row) > 12:
                            schools_response += f'\n{html.escape(row[7])}\n'
                        if len(row) > 14:
                            schools_response += f'\n{html.escape(row[14])}, '
                        if len(row) > 13:
                            schools_response += f'{html.escape(row[13])} –ú–±/—Å\n'
                        if len(row) > 20:
                            schools_response += f'{html.escape(row[20])}'
                        schools_response += '\n'

                    callback_data = json.dumps({"type": "schools_info", "chat_id": message.chat.id})
                    schools_info_storage[message.chat.id] = schools_response
                    button_schools_info = types.InlineKeyboardButton("üè´–®–∫–æ–ª—ã",callback_data=callback_data)
                    inline_keyboard.add(button_schools_info)

                await bot.send_message(message.chat.id, "‚¨áÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚¨áÔ∏è", reply_markup=inline_keyboard)
            response_storage[message.chat.id] = response

            #dp.register_callback_query_handler(handle_additional_info, lambda query: json.loads(query.data)["type"] == "additional_info")
           # dp.register_callback_query_handler(handle_espd_info, lambda query: json.loads(query.data)["type"] == "espd_info")
          #  dp.register_callback_query_handler(handle_szoreg_info, lambda query: json.loads(query.data)["type"] == "szoreg_info")
         #   dp.register_callback_query_handler(handle_schools_info, lambda query: json.loads(query.data)["type"] == "schools_info")
        #    dp.register_callback_query_handler(handle_digital_ministry_info, lambda query: json.loads(query.data)["type"] == "digital_ministry_info")
       #     dp.register_callback_query_handler(handle_digital_ministry_info_post, lambda query: json.loads(query.data)["type"] == "digital_ministry_info_post")

        if len(found_values) > 1:
            values = [(await get_value(row, 1), await get_value(row, 2)) for row in found_values]
            values_with_numbers = [f"{i + 1}. {value[0]}" for i, value in enumerate(values)]
            msg = '\n'.join(values_with_numbers)

            messages = split_message(f'–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. \n\n{msg}')

            for msg in messages:
                await bot.send_message(message.chat.id, msg)

            buttons = [str(i + 1) for i in range(len(found_values))]
            buttons.append("–û—Ç–º–µ–Ω–∞")
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)

            keyboard.add(*buttons)
            await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞:', reply_markup=keyboard)
            await Form.waiting_for_number.set()

    '''
    if found_values_s:
        found_values = found_values_s
        data = []
        for row in found_values_s:
            if len(row) >= 22:
                data.append([row[17], row[2], row[3], row[9], row[11], row[12], row[21]])
            else:
                print(f"Skipping row due to insufficient elements: {row}")

        if len(found_values) > 0:
            response = '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ | –ù–∞—Å–µ–ª–µ–Ω–∏–µ | –°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å | –ò–Ω—Ç–µ—Ä–Ω–µ—Ç | –ü—Ä–æ–≥—Ä–∞–º–º–∞ | –¢–∞–∫—Å–æ—Ñ–æ–Ω | –°–ó–û (—É–∑–µ–ª)\n'
            response += '-' * 71 + '\n'
            for row in found_values:
                if len(row) >= 22:
                    response += f"{row[17]} | {row[2]} | {row[3]} | {row[9]} | {row[11]} | {row[12]} | {row[19]}\n"

            excel_file = create_excel_file_2(headers, data)
            user_first_name = message.from_user.first_name

            file_name = found_values[0][18] if found_values else "table"

            with create_excel_file_2(headers, data) as file:
                file.name = f'{file_name}.xlsx'
                await bot.send_document(message.chat.id, file)

    if found_mszu_values:
        if len(found_mszu_values) == 1:
            response = f"\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: \n{found_mszu_values[0][2]}\n‚Ññ –≤ –†–µ–≥.–ø–µ—Ä–µ—á–Ω–µ (17-—Ä): {found_mszu_values[0][0]}\n–û—Ç–≤–µ—Ç. –†–û–ò–í –≤ —Ä–µ–≥.–ø–µ—Ä–µ—á–Ω–µ: {found_mszu_values[0][3]}\n–û—Ç–≤. –≤ –ø–ª–∞–Ω–µ: {found_mszu_values[0][6]}\n–ï–°–ù–°–ò: {found_mszu_values[0][8]}\n–ï–ü–ì–£: {found_mszu_values[0][10]}"
            await bot.send_message(message.chat.id, response)

            inline_keyboard = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(text="–ê–¥—Ä–µ—Å –ò–§–ó", url=found_mszu_values[0][13])
            inline_keyboard.add(url_button)

            await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ:", reply_markup=inline_keyboard)

        elif len(found_mszu_values) > 1:
            values_with_numbers = [f"{i + 1}. {value[2]}" for i, value in enumerate(found_mszu_values)]
            msg = '\n'.join(values_with_numbers)
            messages = split_message(f'–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π:\n\n{msg}')
            for msg in messages:
                await bot.send_message(message.chat.id, msg)

            buttons = [str(i + 1) for i in range(len(found_mszu_values))]
            buttons.append("–û—Ç–º–µ–Ω–∞")
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            keyboard.add(*buttons)
            await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:', reply_markup=keyboard)
            dp.register_message_handler(lambda x: handle_mszu_choice(x, found_mszu_valueskeyboard))

    '''
import random
from aiogram import types
from fuzzywuzzy import fuzz

async def search_espd_values_1(query):
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    result = await spreadsheet.values_batch_get('espd!A1:AL1466')
    rows = result.get('valueRanges', [])[0].get('values', [])

    found_values = []
    for row in rows:
        try:
            if len(row) > 12:
                location_column = row[6]
                name_column = row[12]
                functional_customer_column = row[11]

                location_ratio = fuzz.ratio(query.lower(), location_column.lower()) * 1.3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å
                name_ratio = fuzz.ratio(query.lower(), name_column.lower())
                functional_customer_ratio = fuzz.ratio(query.lower(), functional_customer_column.lower())

                max_ratio = max(location_ratio, name_ratio, functional_customer_ratio)
                if max_ratio >= 20:
                    found_values.append((max_ratio, row))
        except Exception as e:
            print(f"Error processing row: {e}")

    sorted_values = sorted(found_values, key=lambda x: x[0], reverse=True)
    return [value[1] for value in sorted_values] or []





async def search_szoreg_values_1(query):
    agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
    gc = await agcm.authorize()
    spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
    result = await spreadsheet.values_batch_get('szoreg!A1:Q1700')
    rows = result.get('valueRanges', [])[0].get('values', [])

    found_values = []
    for row in rows:
        try:
            if len(row) > 8:
                location_column = row[3]
                type_institution_column = row[7]
                title_column = row[8]

                location_ratio = fuzz.ratio(query.lower(), location_column.lower()) * 1.3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å
                type_institution_ratio = fuzz.ratio(query.lower(), type_institution_column.lower())
                title_ratio = fuzz.ratio(query.lower(), title_column.lower())

                max_ratio = max(location_ratio, type_institution_ratio, title_ratio)
                if max_ratio >= 20:
                    found_values.append((max_ratio, row))
        except Exception as e:
            print(f"Error processing row: {e}")

    sorted_values = sorted(found_values, key=lambda x: x[0], reverse=True)
    return [value[1] for value in sorted_values] or []






def get_thumb_url(column_value):
    thumb_url = None
    if column_value in ["–º–∏–Ω–∫—É–ª—å—Ç", "–ú–∏–Ω–ö—É–ª—å—Ç"]:
        thumb_url = "https://rejoller.pythonanywhere.com/static/minkult.png"
    elif column_value in ["–û–ò–í", "–ê–≥.–ó–∞–Ω—è—Ç–æ—Å—Ç–∏", "–ê–≥.–ü–µ—á–∞—Ç–∏", "–í–µ—Ç–ù–∞–¥–∑–æ—Ä", "–ì–¢–ù", "–ó–ê–ì–°", "–ú–∏–Ω–§–∏–Ω", "–ú–∏–Ω–õ–µ—Å", "–ú–∏–Ω–û–±—Ä", "–ú–∏–Ω–°–æ—Ü–ü–æ–ª", "–ú–∏–Ω–°–ø–æ—Ä—Ç", "–ú–∏–Ω–§–∏–Ω", "–ú–∏–Ω–°–æ—Ü–ü–æ–ª", "–ú–∏–Ω–§–∏–Ω", "–ú–∏—Ä–°—É–¥", "–ú–≠–∏–†–ü", "–ú–¶–†", "–°—Ç—Ä–æ–π–ù–∞–¥–∑–æ—Ä", "–¶–ò–¢", "–í–µ—Ç–Ω–∞–¥–∑–æ—Ä", "–ú–∏–Ω–°—Ç—Ä–æ–π", "–ì–¢–ù"]:
        thumb_url = "https://rejoller.pythonanywhere.com/static/OIV.png"
    elif column_value in ["–ú–∏–Ω–ó–¥—Ä–∞–≤", "–§–ê–ü"]:
        thumb_url = "https://rejoller.pythonanywhere.com/static/minzdrav.png"
    elif column_value in ["–ê–≥.–ì–û –∏ –ß–°", "–ø–æ–∂–∞—Ä–Ω–∞—è —á–∞—Å—Ç—å", "–ø–æ–∂. —á–∞—Å—Ç—å", "–ø–æ–∂. –ø–æ—Å—Ç", "–ê–≥.–ì–û–∏–ß–°"]:
        thumb_url = "https://rejoller.pythonanywhere.com/static/goichs.png"
    elif column_value == "–û–ú–°–£":
        thumb_url = "https://rejoller.pythonanywhere.com/static/omsu.png"
    else:
        thumb_url = "https://rejoller.pythonanywhere.com/static/OIV.png"


    return thumb_url





@dp.inline_handler()
async def inline_query_handler(query: types.InlineQuery):
    if len(query.query) < 3:
        await query.answer(results=[], switch_pm_text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å", switch_pm_parameter="short_query")
        return
    found_values_a, _ = await search_values(query.query)
    found_espd_values = await search_espd_values_1(query.query)
    found_szoreg_values = await search_szoreg_values_1(query.query)

    thumb_urls_for_found_values_a = [
        "https://rejoller.pythonanywhere.com/static/town1.png",
        "https://rejoller.pythonanywhere.com/static/town2.png",
    ]
    results = []

    # –ü–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
    for index, value_list in enumerate(found_values_a):
        location = f"<b>\n\n{value_list[1]}</b>" # –ê–±–∞–Ω—Å–∫–∏–π —Ä-–Ω, –ø. –ê–±–∞–Ω
        mobile_coverage_lines = []
        for coverage in value_list[29:33]:
            if coverage and coverage.strip(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
                if "–•–æ—Ä–æ—à–µ–µ" in coverage:
                    coverage = f"üü¢{coverage}"
                elif "–ù–∏–∑–∫–æ–µ" in coverage:
                    coverage = f"üü†{coverage}"
                mobile_coverage_lines.append(coverage)
        mobile_coverage = "\n".join(mobile_coverage_lines) if mobile_coverage_lines else "üî¥–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        population = int(value_list[5]) # –Ω–∞—Å–µ–ª–µ–Ω–∏–µ: 8207
        formatted_population = f"{population:,}".replace(',', ' ') # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π —Ä–∞–∑—Ä—è–¥–æ–≤
        value_str = f"{location}\n\n–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:\n{mobile_coverage}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {formatted_population}"
        thumb_url = random.choice(thumb_urls_for_found_values_a)
        bot_url = "https://t.me/MCRcoffee_bot" # URL —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
        result = types.InlineQueryResultArticle(
            id=str(index),
            title=value_list[1],
            input_message_content=types.InputTextMessageContent(message_text=value_str, parse_mode='HTML'),
            thumb_url=thumb_url,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º", url=bot_url) # –ö–Ω–æ–ø–∫–∞ –≤–µ–¥–µ—Ç –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
            )
        )
        results.append(result)

    espd_and_szoreg_results = []
    for row in found_espd_values:
        location_column = row[6]
        name_column = row[12]
        functional_customer_column = row[11]
        location_ratio = fuzz.ratio(query.query.lower(), location_column.lower()) * 1.3 # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        name_ratio = fuzz.ratio(query.query.lower(), name_column.lower()) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        functional_customer_ratio = fuzz.ratio(query.query.lower(), functional_customer_column.lower()) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        max_ratio = max(location_ratio, name_ratio, functional_customer_ratio)
        relevance = max_ratio
        functional_customer = row[11] # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑—á–∏–∫
        address = row[8]
        additional_info = row[8]
        title = f"{functional_customer} - {additional_info}" # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        connection_type = row[9]
        speed = row[13]
        contacts = row[18]
        value_str = f'–ï–°–ü–î\n<b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑—á–∏–∫:</b> {functional_customer}\n<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {name_column}\n{address}\n<b>–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {connection_type}\n<b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> {speed}\n<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {contacts}'
        thumb_url = get_thumb_url(functional_customer_column)
        espd_and_szoreg_results.append((relevance, 'espd', title, value_str, thumb_url))

    for row in found_szoreg_values:
        location_column = row[3]
        type_institution_column = row[7]
        full_address = row[5]
        title_column = row[8]
        location_ratio = fuzz.ratio(query.query.lower(), location_column.lower()) * 1.3 # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        type_institution_ratio = fuzz.ratio(query.query.lower(), type_institution_column.lower()) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        title_ratio = fuzz.ratio(query.query.lower(), title_column.lower()) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        max_ratio = max(location_ratio, type_institution_ratio, title_ratio)
        relevance = max_ratio
        type_institution = row[7]
        title = f"{type_institution} - {full_address}"
        address = row[5]
        connection_type = row[6]
        bandwidth = row[9]
        value_str = f'üè¢<b>–°–ó–û (—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ì–ö)</b>\n\n<b>–¢–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:</b> {type_institution}\n<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {title}\n<b>–ê–¥—Ä–µ—Å:</b> {full_address}\n<b>–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {connection_type}\n<b>–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</b> {bandwidth}'

        thumb_url = get_thumb_url(type_institution_column)
        espd_and_szoreg_results.append((relevance, 'szoreg', title, value_str, thumb_url))

    espd_and_szoreg_results.sort(reverse=True, key=lambda x: x[0])

    bot_url = "https://t.me/MCRcoffee_bot" # URL —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º

    for _, _, title, value_str, thumb_url in espd_and_szoreg_results:
        result = types.InlineQueryResultArticle(
            id=str(len(results)),
            title=title,
            input_message_content=types.InputTextMessageContent(message_text=value_str, parse_mode='HTML'),
            thumb_url=thumb_url,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º", url=bot_url) # –ö–Ω–æ–ø–∫–∞ –≤–µ–¥–µ—Ç –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
            )
        )
        results.append(result)


    if not results:
        await query.answer(results=[], switch_pm_text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", switch_pm_parameter="no_results")
        return

    results = results[:50]

    await query.answer(results)
'''
async def search_values(query):
    try:
        agcm = gspread_asyncio.AsyncioGspreadClientManager(lambda: creds)
        gc = await agcm.authorize()
        spreadsheet = await gc.open_by_key(SPREADSHEET_ID_1)
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        range_name = 'goroda2.0!A1:AQ1721'
        result = await spreadsheet.values_batch_get(range_name)
        rows = result.get('valueRanges', [])[0].get('values', [])
        normalized_query = normalize_text_v2(query)

        found_values_a = []
        found_values_s = []

        for row in rows:
            try:
                if len(row) > 0 and normalized_query == normalize_text_v2(row[0]):
                    found_values_a.append(row)
            except IndexError:
                pass

            try:
                if len(row) > 18 and fuzz.token_sort_ratio(normalized_query, normalize_text_v2(row[18])) >= 99:
                    found_values_s.append(row)
            except IndexError:
                pass

        return found_values_a, found_values_s
    except Exception as e:
        print("An error occurred during search_values:", e)
        return None, None


#test
async def search_values(query, spreadsheet):
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        range_name = 'goroda2.0!A1:AQ1721'
        result = await spreadsheet.values_batch_get(range_name)
        rows = result.get('valueRanges', [])[0].get('values', [])
        normalized_query = normalize_text_v2(query)

        found_values_a = []
        found_values_s = []

        for row in rows:
            try:
                if len(row) > 0 and normalized_query == normalize_text_v2(row[0]):
                    found_values_a.append(row)
            except IndexError:
                pass

            try:
                if len(row) > 18 and fuzz.token_sort_ratio(normalized_query, normalize_text_v2(row[18])) >= 99:
                    found_values_s.append(row)
            except IndexError:
                pass

        return found_values_a, found_values_s
    except Exception as e:
        print("An error occurred during search_values:", e)
        return None, None
'''


cached_values_a = None

async def load_values_a(spreadsheet):
    global cached_values_a
    try:
        if cached_values_a is None:
            range_name = 'goroda2.0!A1:AQ1721'
            result = await spreadsheet.values_batch_get(range_name)
            rows = result.get('valueRanges', [])[0].get('values', [])
            cached_values_a = rows
        return cached_values_a
    except Exception as e:
        print("An error occurred during loading values_a:", e)
        return None

async def search_values(query, spreadsheet):
    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        values_a = await load_values_a(spreadsheet)

        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
        normalized_query = normalize_text_v2(query.lower())

        # –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        found_values_a = [row for row in values_a if len(row) > 0 and normalized_query == normalize_text_v2(row[0].lower())]

        return found_values_a
    except Exception as e:
        print("An error occurred during search_values:", e)
        return None
'''
async def search_values(query, spreadsheet):
    try:
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
    #    cache_key = f"values_a:{query.lower()}"
     #   print(f"Cache key in search_values: {cache_key}")

        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
     #   cached_data = await storage.get_data(chat=cache_key)
     #   if cached_data:
      #      cached_data = json.loads(cached_data)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      #      print("Data found in cache")
      #      return cached_data

      #  print("Data not found in cache, fetching fresh data")

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        range_name = 'goroda2.0!A1:AQ1721'
        result = await spreadsheet.values_batch_get(range_name)
        rows = result.get('valueRanges', [])[0].get('values', [])
        normalized_query = normalize_text_v2(query.lower())

        found_values_a = []


        for row in rows:
            try:
                if len(row) > 0 and normalized_query == normalize_text_v2(row[0].lower()):
                    found_values_a.append(row)
            except IndexError:
                pass

            try:
                if len(row) > 18 and fuzz.token_sort_ratio(normalized_query, normalize_text_v2(row[18].lower())) >= 99:
                    found_values_s.append(row)
            except IndexError:
                pass

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
      #  await storage.set_data(chat=cache_key, data=json.dumps((found_values_a)))
     #   print("Data fetched and saved to cache")

        return found_values_a
    except Exception as e:
        print("An error occurred during search_values:", e)
        return None
'''





from fuzzywuzzy import fuzz

async def search_values_levenshtein(query, spreadsheet, threshold=0.7, max_results=5):
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        range_name = 'goroda2.0!A1:AM1721'
        result = await spreadsheet.values_batch_get(range_name)
        rows = result.get('valueRanges', [])[0].get('values', [])
        normalized_query = normalize_text_v2(query)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        all_matches = []

        for row in rows:
            try:
                if len(row) > 0:
                    similarity = fuzz.token_sort_ratio(normalized_query, normalize_text_v2(row[0]))
                    if similarity >= (threshold * 100):
                        all_matches.append((row, similarity))
            except IndexError:
                pass

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é —Å—Ö–æ–¥—Å—Ç–≤–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_matches = sorted(all_matches, key=lambda x: x[1], reverse=True)

        # –ë–µ—Ä–µ–º –¥–æ max_results –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        top_matches = sorted_matches[:max_results]

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –∫–∞–∂–¥–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
        found_values_a = [match[0][0] for match in top_matches]

        return found_values_a
    except Exception as e:
        print("An error occurred during search_values_levenshtein:", e)
        return []




'''
@dp.message_handler()
async def search(message: types.Message):
    print ('async def search')
    query = message.text

    found_values_a, found_values_s = await search_values(query)

    if found_values_a:
        headers = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ù–∞—Å–µ–ª–µ–Ω–∏–µ', '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å', '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç', '–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–¢–∞–∫—Å–æ—Ñ–æ–Ω', '–°–ó–û (—É–∑–µ–ª)']
        data = [headers] + found_values_a
        excel_file = create_excel_file(headers, found_values_a)
        await message.answer_document(excel_file, caption='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–≤–∞—Ä–∏–∞–Ω—Ç –ê)')

    if found_values_s:
        headers = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ù–∞—Å–µ–ª–µ–Ω–∏–µ', '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å', '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç', '–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–¢–∞–∫—Å–æ—Ñ–æ–Ω', '–°–ó–û (—É–∑–µ–ª)']
        data = [headers] + found_values_s
        excel_file = convert_to_excel(data)
        await message.answer_document(excel_file, caption='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–≤–∞—Ä–∏–∞–Ω—Ç –°)')
'''
#15
async def handle_mszu_message(message):
    print(f"Handling MSZU message: {message.text}")  #
    found_values = check_mszu_mo(message.text)
    if found_values:
        response = ""
        for i, row in enumerate(found_values):
            response += f"{i + 1}. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –û–ú–°–£ –∏–∑ –ï–°–ù–°–ò: {row[10]}\n" \
                        f"‚Ññ –≤ –†–µ–≥.–ø–µ—Ä–µ—á–Ω–µ (17-—Ä) : {row[0]}\n" \
                        f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: {row[2]}\n" \
                        f"–û—Ç–≤–µ—Ç. –†–û–ò–í –≤ —Ä–µ–≥.–ø–µ—Ä–µ—á–Ω–µ: {row[3]}\n\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é split_message
        response_parts = split_message(response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        for part in response_parts:
            await bot.send_message(message.chat.id, part)
    else:
        await bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")


async def handle_2mszu_message(message):
    print(f"Handling 2MSZU message: {message.text}")
    found_values = check_mszu_mo_2(message.text)
    if found_values:
        message_storage[message.chat.id] = message.text
        unique_values = list(set([row[12] for row in found_values]))
        unique_values.sort()

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)

        numbered_list = ""
        for i, value in enumerate(unique_values):
            markup.add(types.KeyboardButton(str(i + 1)))  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—ã –≤–º–µ—Å—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–π
            numbered_list += f"{i + 1}. {value}\n"

        msg = await bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ:\n\n{numbered_list}", reply_markup=markup)
        await msg.answer_handler(handle_unique_value_selection)
    else:
        await bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")


async def handle_unique_value_selection(message):
    user_message = message_storage[message.chat.id]
    selected_number = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    found_values = check_mszu_mo_2(user_message)
    unique_values = list(set([row[12] for row in found_values]))
    unique_values.sort()
    selected_value = unique_values[selected_number - 1]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É

    selected_rows = [row for row in found_values if row[12] == selected_value]
    response = ""
    for i, row in enumerate(selected_rows):
        response += f"{i + 1}. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –û–ú–°–£ –∏–∑ –ï–°–ù–°–ò: {row[10]}\n" \
                    f"‚Ññ –≤ –†–µ–≥.–ø–µ—Ä–µ—á–Ω–µ (17-—Ä) : {row[0]}\n" \
                    f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: {row[2]}\n" \
                    f"–û—Ç–≤–µ—Ç. –†–û–ò–í –≤ —Ä–µ–≥.–ø–µ—Ä–µ—á–Ω–µ: {row[3]}\n\n"

    response_parts = split_message(response)

    for part in response_parts:
        if part.strip():
            await bot.send_message(message.chat.id, part)


user_messages = {}

'''
async def handle_tor_message(message):
    query = message.text[4:]  # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ "—Ç–æ—Ä "
    service = build('sheets', 'v4', credentials=creds)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    header_result = await service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID_1, range='nst!H1:X1'
    ).execute()
    column_headers = header_result.get('values', [])[0]

    # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ A –Ω–∞ –ª–∏—Å—Ç–µ nst
    nst_result = await service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID_1, range='nst!A1:X150'
    ).execute()
    nst_rows = nst_result.get('values', [])
    nst_matches = [
        row for row in nst_rows if row and normalize_text_v2(query) == normalize_text_v2(row[0])
    ]

    if nst_matches:
        all_responses = []
        total_yes_count = 0
        total_no_count = 0

        for row in nst_matches:
            institution_name = row[5]
            response_parts = [f"{institution_name}:\n\n"]
            yes_count = 0
            no_count = 0

            for i in range(7, 24):
                column_header = column_headers[i - 7]
                cell_value = row[i]

                if cell_value == "–ï—Å—Ç—å":
                    cell_value = f"üü¢{column_header}\n"
                    yes_count += 1
                elif cell_value == "–ù–µ—Ç":
                    cell_value = f"üî¥{column_header}\n"
                    no_count += 1

                response_parts.append(cell_value)

            response = " ".join(response_parts)
            all_responses.append(response)
            total_yes_count += yes_count
            total_no_count += no_count

        # Create and save the pie chart for the total counts
        pie_chart_filename = "pie_chart_total.png"
        create_pie_chart(total_yes_count, total_no_count, pie_chart_filename)

        # Combine all responses into one message
        combined_response = "\n\n".join(all_responses)
        messages = split_message(combined_response)

        # Send the pie chart
        await bot.send_message(message.chat.id, '–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¢–û–†–ö–ù–î')
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É "–ø–æ–¥—Ä–æ–±–Ω–æ"
        markup = types.InlineKeyboardMarkup()
        detailed_button = types.InlineKeyboardButton("–ø–æ–¥—Ä–æ–±–Ω–æ", callback_data='{"type": "additional_info_tor"}')
        markup.add(detailed_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        with open(pie_chart_filename, 'rb') as chart_file:
            callback_data = json.dumps({
                "type": "additional_info_tor",
                "user_id": message.from_user.id
            })
            detailed_button = types.InlineKeyboardButton("–ø–æ–¥—Ä–æ–±–Ω–æ", callback_data=callback_data)
            markup = types.InlineKeyboardMarkup()
            markup.add(detailed_button)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
            user_messages[message.from_user.id] = messages

            await bot.send_photo(message.chat.id, chart_file, reply_markup=markup)

        # Remove the pie chart file after sending
        os.remove(pie_chart_filename)
        user_messages[message.chat.id] = messages
    else:
        await bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")

#16

async def handle_mszu_choice(message, found_mszu_values, keyboard):
    print('async def handle_mszu_choice(message, found_mszu_values, keyboard):')
    choice = message.text.strip()

    if choice.isdigit():
        index = int(choice) - 1
        if 0 <= index < len(found_mszu_values):
            response = f"\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: \n{found_mszu_values[index][2]}\n‚Ññ –≤ –†–µ–≥.–ø–µ—Ä–µ—á–Ω–µ (17-—Ä): {found_mszu_values[index][0]}\n–û—Ç–≤–µ—Ç. –†–û–ò–í –≤ —Ä–µ–≥.–ø–µ—Ä–µ—á–Ω–µ: {found_mszu_values[index][3]}\n–û—Ç–≤. –≤ –ø–ª–∞–Ω–µ: {found_mszu_values[index][6]}\n–ï–°–ù–°–ò: {found_mszu_values[index][8]}\n–ï–ü–ì–£: {found_mszu_values[index][10]}"
            await bot.send_message(message.chat.id, response, reply_markup=types.ReplyKeyboardRemove())
            inline_keyboard = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(text="–ê–¥—Ä–µ—Å –ò–§–ó", url=found_mszu_values[index][13])
            inline_keyboard.add(url_button)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–Ω–æ–ø–∫–æ–π
            await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ:", reply_markup=inline_keyboard)
        else:
            await bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞".', reply_markup=keyboard)
            await bot.register_next_step_handler(message, lambda x: handle_mszu_choice(x, found_mszu_values, keyboard))
    elif choice.lower() == "–æ—Ç–º–µ–Ω–∞":
        await bot.send_message(message.chat.id, '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.', reply_markup=types.ReplyKeyboardRemove())
    else:
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞".', reply_markup=keyboard)
        await bot.register_next_step_handler(message, lambda x: handle_mszu_choice(x, found_mszu_values, keyboard))


@dp.callback_query_handler(lambda call: json.loads(call.data)["type"] == "additional_info_tor")
async def detailed_button_callback(call):
    user_first_name = call.from_user.first_name
    await bot.send_message(call.message.chat.id, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–±—è')
    time.sleep(3)

    # –ü–æ–ª—É—á–∞–µ–º messages –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    callback_data = json.loads(call.data)
    user_id = callback_data["user_id"]
    messages = user_messages.get(user_id, [])

    for msg in messages:
        await bot.send_message(call.message.chat.id, msg)
    await bot.answer_callback_query(call.id)
    time.sleep(2)
    await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å')


async def handle_knd_kraj_message(message):
    service = build('sheets', 'v4', credentials=creds)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã nst
    nst_result = await service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID_1, range='nst!A1:X150'
    ).execute()
    nst_rows = nst_result.get('values', [])

    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π "–ï—Å—Ç—å" –∏ "–ù–µ—Ç" –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ A
    counter = {}
    for row in nst_rows:
        key = row[0]
        yes_count = sum([1 for value in row[7:24] if value == "–ï—Å—Ç—å"])
        no_count = sum([1 for value in row[7:24] if value == "–ù–µ—Ç"])

        if key in counter:
            counter[key] = (key, yes_count + counter[key][1], no_count + counter[key][2])
        else:
            counter[key] = (key, yes_count, no_count)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    bar_chart_filename = 'bar_chart.png'
    create_bar_chart(list(counter.values()), bar_chart_filename)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    with open(bar_chart_filename, 'rb') as chart_file:
        await bot.send_photo(message.chat.id, chart_file)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(bar_chart_filename)
'''

COLUMNS_TO_EXPORT = [1, 2, 3, 6, 7]

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
TABLE_HEADERS = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ù–∞—Å–µ–ª–µ–Ω–∏–µ", "–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–¢–∞–∫—Å–æ—Ñ–æ–Ω"]


async def handler_fp_message(message, fp_data, fp_headers):
    time.sleep(1)
    try:
        data = [
            [row[0], row[1], row[2], row[4], row[5]]
            for row in fp_data[1:]
        ]
        headers = ['–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞', '–ê–¥—Ä–µ—Å', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è', '–°–∫–æ—Ä–æ—Å—Ç—å']

        excel_file = create_excel_file(headers, data)
        user_first_name = message.from_user.first_name
        await bot.send_message(message.chat.id, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå')
        time.sleep(2)
        await bot.send_message(message.chat.id, '–ü–µ—Ä–µ—á–µ–Ω—å –§–ê–ü –∏–∑ –≥–æ—Å–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:')
        file_name = '–§–ê–ü'

        with BytesIO(excel_file) as file:
            file.name = f'{file_name}.xlsx'
            await bot.send_document(message.chat.id, file)

    except Exception as e:
        logging.exception(e)
        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def handler_aggoics_message(message, aggoics_data, aggoics_headers):
    time.sleep(1)
    try:
        data = [
            [row[0], row[1], row[2], row[3], row[4], row[5]]
            for row in aggoics_data[1:]
        ]

        excel_file = create_excel_file(aggoics_headers, data)

        await bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ê–≥–ì–û–∏–ß–°:')
        file_name = '–ê–≥–ì–û–∏–ß–°'

        with BytesIO(excel_file) as file:
            file.name = f'{file_name}.xlsx'
            await bot.send_document(message.chat.id, file)

    except Exception as e:
        logging.exception(e)
        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



#17

async def handler_otpusk_message(message, employees_on_vacation):
    if len(employees_on_vacation) > 0:
        response = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ:\n\n"
        for employee in employees_on_vacation:
            response += f"{employee[0]} ({employee[1]})\n"
        time.sleep(2)
        await message.reply(response)
    else:
        time.sleep(2)
        await message.reply("–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –≤ –æ—Ç–ø—É—Å–∫–µ.")





@dp.message_handler(state=Form.waiting_for_number)
async def handle_choice(message: types.Message, state: FSMContext):
    start_time = time.time()
    try:
        data = await state.get_data()
        found_values = data.get('found_values')

        index_text = message.text
        user_first_name = message.from_user.first_name
        chat_id = message.chat.id
        response = ""
        pokazatel_504p_lines = []
        votes_response = ""
        yandex_2023_response = ""
        ucn2_response = ""

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if index_text == "–û—Ç–º–µ–Ω–∞":
            await bot.send_message(chat_id, '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.', reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
            return
        if not index_text.isdigit():
            await bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
            return

        index = int(index_text)
        if index <= 0 or index > len(found_values):
            await bot.send_message(chat_id, f'–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {len(found_values)}.')
            return

        selected_np = found_values[index - 1]
        latitude = selected_np[7]
        longitude = selected_np[8]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        gc, spreadsheet = await get_authorized_client_and_spreadsheet()

        weather_info, yandex_2023_values, pokazatel_504p_values, survey_results_values, ucn2_values = await asyncio.gather(
            get_weather(latitude, longitude, "7cc8daec601b8354e0bc6350592d6f98"),
            search_yandex_2023_values(selected_np[4], spreadsheet),
            search_in_pokazatel_504p(selected_np[4], spreadsheet),
            search_in_results(selected_np[4], spreadsheet),

            search_in_ucn2(selected_np[4], spreadsheet)
        )










        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        operators = {
            "Tele2": selected_np[39] if len(selected_np) > 39 else None,
            "–ú–µ–≥–∞—Ñ–æ–Ω": selected_np[40] if len(selected_np) > 40 else None,
            "–ë–∏–ª–∞–π–Ω": selected_np[41] if len(selected_np) > 41 else None,
            "–ú–¢–°": selected_np[42] if len(selected_np) > 42 else None,
        }

        operators_response = '\n–û—Ü–µ–Ω–∫–∞ –∂–∏—Ç–µ–ª–µ–π:\n'

        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        operator_responses = []

        for operator_name, operator_value in operators.items():

            if operator_value:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ replace
                operator_value_str = str(operator_value)

                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
                signal_quality = re.search(r'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç|–ù–∏–∑–∫–æ–µ|–°—Ä–µ–¥–Ω–µ–µ|–•–æ—Ä–æ—à–µ–µ', operator_value_str, re.IGNORECASE)
                if signal_quality:
                    signal_quality = signal_quality.group()
                    if "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" in signal_quality:
                        signal_level = "üî¥–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    elif "–ù–∏–∑–∫–æ–µ" in signal_quality:
                        signal_level = "üü†–ù–∏–∑–∫–æ–µ"
                    elif "–°—Ä–µ–¥–Ω–µ–µ" in signal_quality:
                        signal_level = "üü°–°—Ä–µ–¥–Ω–µ–µ"
                    elif "–•–æ—Ä–æ—à–µ–µ" in signal_quality:
                        signal_level = "üü¢–•–æ—Ä–æ—à–µ–µ"
                    else:
                        signal_level = "‚ùì–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –µ–≥–æ —ç–º–æ–¥–∑–∏-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
                    operator_value_str = operator_value_str.replace(signal_quality, signal_level)
                else:
                    operator_value_str = operator_value_str

                # –ó–∞–º–µ–Ω—è–µ–º "(" –∏ ")" –Ω–∞ " "
                operator_value_str = operator_value_str.replace("(", " ").replace(")", " ")
                operator_responses.append(f'{operator_name}: {operator_value_str}\n')
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç
                continue



        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        if not operator_responses:
            operators_response += '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n'
        else:
            operators_response += ''.join(operator_responses)

        response += operators_response






        if yandex_2023_values:
            yandex_2023_response = '\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 2023</b>\n\n'
            for row in yandex_2023_values:
                yandex_2023_response += f'–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {row[4]}\n–û–ø–µ—Ä–∞—Ç–æ—Ä: {row[15]}\n–°–æ–≥–ª–∞—à–µ–Ω–∏–µ: {row[7]}\n–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ú–¶–†: {row[8]}\n–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ê–ì–ó: {row[9]}\n–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {row[11]}\n–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ê–ú–°: {row[12]}\n–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ –ë–°: {row[13]}\n–ó–∞–ø—É—Å–∫ —É—Å–ª—É–≥: {row[14]}\n\n'

        if len(pokazatel_504p_values) > 0:
            for i in range(6, 10):
                if len(pokazatel_504p_values[0]) > i and pokazatel_504p_values[0][i] and pokazatel_504p_values[0][i].strip():
                    value = pokazatel_504p_values[0][i]
                    value = value.replace("–•–æ—Ä–æ—à–µ–µ", "üü¢–•–æ—Ä–æ—à–µ–µ").replace("–ù–∏–∑–∫–æ–µ", "üü†–ù–∏–∑–∫–æ–µ")
                    pokazatel_504p_lines.append(f"{value}")

        pokazatel_504p_response = "\n".join(pokazatel_504p_lines) if pokazatel_504p_lines else "üî¥–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"



        if "4G" in pokazatel_504p_response:
            votes_response = ""
        else:
            if len(selected_np) > 38:
                votes = selected_np[34] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 35-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                update_time = selected_np[35] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"  # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 36-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                rank = selected_np[36] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"  # –†–µ–π—Ç–∏–Ω–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 37-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                same_votes_np = selected_np[38] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ù–ü —Å —Ç–∞–∫–∏–º –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 39-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                if votes != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and update_time != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and rank != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and same_votes_np != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                    votes_response = f'\n\n<b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –£–¶–ù 2.0 2024</b>\n\nüìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: <b>{votes}</b> (—Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–º–µ—é—Ç {same_votes_np} –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)\nüèÜ–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {rank}\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {update_time}'
                else:
                    print("Debug: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.")



        response += votes_response


        '''
        if len(selected_np) > 38:
            votes = selected_np[34] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 35-–æ–º —Å—Ç–æ–ª–±—Ü–µ
            update_time = selected_np[35] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"  # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 36-–æ–º —Å—Ç–æ–ª–±—Ü–µ
            rank = selected_np[36] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"  # –†–µ–π—Ç–∏–Ω–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 37-–æ–º —Å—Ç–æ–ª–±—Ü–µ
            same_votes_np = selected_np[38] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ù–ü —Å —Ç–∞–∫–∏–º –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 39-–æ–º —Å—Ç–æ–ª–±—Ü–µ
            if votes != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and update_time != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and rank != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and same_votes_np != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                votes_response = f'\n\n<b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –£–¶–ù 2.0 2024</b>\n\nüìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: <b>{votes}</b> (—Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–º–µ—é—Ç {same_votes_np} –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)\nüèÜ–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {rank}\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {update_time}'

            else:
                print("–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.")
        response += votes_response
        '''



        if ucn2_values:
            for row in ucn2_values:
                ucn2_response = ''

                if 4 < len(row) and row[4]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                    ucn2_response += '  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –¢–µ–ª–µ2:\n    -–°–ú–†: ' + row[4] + '\n'
                if 5 < len(row) and row[5]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                    ucn2_response += '    -–ó–∞–ø—É—Å–∫: ' + row[5] + '\n'
                if 6 < len(row) and row[6]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                    ucn2_response += '    -–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ' + row[6] + '\n'

                if ucn2_response:  # –ï—Å–ª–∏ ucn2_response –Ω–µ –ø—É—Å—Ç, –¥–æ–±–∞–≤–∏—Ç—å –≤–≤–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–æ
                    ucn2_response = '\n\n\n<b>–£–¶–ù 2.0 2023</b>\n' + ucn2_response
                    response += ucn2_response



        survey_data_storage[message.chat.id] = survey_results_values


        try:
            selsovet_info, tanya_sub_info_year, tanya_sub_info_provider, taksofony_info, arctic_info, internet_info, population_2010, population_2020, itog_ucn_2023 = await asyncio.gather(
                get_value(found_values[index - 1], 20),
                get_value(found_values[index - 1], 13),
                get_value(found_values[index - 1], 14),
                get_value(found_values[index - 1], 12),
                get_value(found_values[index - 1], 6),
                get_value(found_values[index - 1], 9),
                get_value(found_values[index - 1], 2),
                get_value(found_values[index - 1], 5),
                get_value(found_values[index - 1], 24),
                return_exceptions=True  # –í–æ–∑–≤—Ä–∞—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∫–∞–∫ –æ–±—ä–µ–∫—Ç–æ–≤
            )
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

     #   response = f'<b>{await get_value(found_values[index - 1], 1)}</b> {weather_info}\n\nüë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ (2010 –≥): {await get_value(found_values[index - 1], 2)} —á–µ–ª.\nüë•–ù–∞—Å–µ–ª–µ–Ω–∏–µ(2020 –≥): {await get_value(found_values[index - 1], 5)} —á–µ–ª.\n\n<b>–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:</b>\n{pokazatel_504p_response}\n{operators_response}\n\n–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {await get_value(found_values[index - 1], 9)}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤: {await get_value(found_values[index - 1], 12)}{ucn2_response}{yandex_2023_response}{votes_response}\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –£–¶–ù 2.0 2024 –∂–º–∏ /votes\n–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –∂–∏—Ç–µ–ª–µ–π - <a href="http://t.me/providers_rating_bot">@providers_rating_bot</a>'

        response = f'<b>{await get_value(found_values[index - 1], 1)}</b>  {weather_info}'

        if selsovet_info:
            response += f'\n{selsovet_info}'


        if arctic_info:
            response += f'\n‚ùÑÔ∏èÔ∏è–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞‚ùÑÔ∏èÔ∏è'


        response += f'\n\nüë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2010 –≥: {population_2010} —á–µ–ª.\nüë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2020 –≥: {population_2020} —á–µ–ª.'

        if taksofony_info:
                response += f'\n‚òéÔ∏è—Ç–∞–∫—Å–æ—Ñ–æ–Ω: {taksofony_info}'

        response += f'\nüåê–∏–Ω—Ç–µ—Ä–Ω–µ—Ç: {internet_info}Ô∏è'
        response += f'\n\nüì±<b>–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:</b>\n{pokazatel_504p_response}'


        if tanya_sub_info_year and tanya_sub_info_provider:
            response += f'\n\n–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã–π "–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞" –≤ {tanya_sub_info_year} –≥–æ–¥—É, –æ–ø–µ—Ä–∞—Ç–æ—Ä {tanya_sub_info_provider}'

        if itog_ucn_2023:
            response += f'\n\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–∏–Ω—Ü–∏—Ñ—Ä—ã –†–æ—Å—Å–∏–∏ –æ–± –£–¶–ù 2024: {itog_ucn_2023}'

        response += f'\n{operators_response}\n'

        response += f'{ucn2_response}{yandex_2023_response}{votes_response}\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –£–¶–ù 2.0 2024 –∂–º–∏ /votes\n–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –∂–∏—Ç–µ–ª–µ–π - <a href="http://t.me/providers_rating_bot">@providers_rating_bot</a>'



        info_text_storage[message.chat.id] = response






        await bot.send_message(message.chat.id, "<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç</b>", parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
        await bot.send_location(message.chat.id, latitude, longitude)
        #response = await send_request_to_gpt(chat_id, response)
        messages = split_message(response)


        allowed_users = {964635576, 1063749463, 374056328, 572346758, 434872315, 1045874687, 1063749463, 487922464, 371098269, 402748716}
        for msg in messages:
            await bot.send_message(message.chat.id, msg, parse_mode='HTML', disable_web_page_preview=True)




        '''
        szofed_values, espd_values, szoreg_values, schools_values = await asyncio.gather(

            search_szofed_values(selected_np[4], spreadsheet),
            search_espd_values(selected_np[4], spreadsheet),
            search_szoreg_values(selected_np[4], spreadsheet),
            search_schools_values(selected_np[4], spreadsheet)

        )
        '''
        szoreg_values, schools_values = await asyncio.gather(


            search_szoreg_values(selected_np[4], spreadsheet),
            search_schools_values(selected_np[4], spreadsheet)

        )





        await state.reset_state()
        inline_keyboard = types.InlineKeyboardMarkup()

        if survey_results_values:
            survey_inline_keyboard = types.InlineKeyboardMarkup()
            button_survey_results = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞", callback_data=json.dumps({"type": "survey_chart", "chat_id": message.chat.id}))
            survey_inline_keyboard.add(button_survey_results)
            await bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞. –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=survey_inline_keyboard)

        if message.from_user.id in allowed_users:
            button_digital_ministry_info = types.InlineKeyboardButton("üòà–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ(–ë–ï–¢–ê)", callback_data=json.dumps({"type": "digital_ministry_info", "chat_id": message.chat.id}))
            inline_keyboard.add(button_digital_ministry_info)
          #  button_digital_ministry_info_post = types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç –í–ö", callback_data=json.dumps({"type": "digital_ministry_info_post", "chat_id": message.chat.id}))
           # inline_keyboard.add(button_digital_ministry_info_post)
        '''
        if szofed_values:
            szofed_response = '*üè¢–°–ó–û, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ —Ä–∞–º–∫–∞—Ö —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥ —Å 2019 –ø–æ 2021 –≥–æ–¥:*\n\n'
            for i, row in enumerate(szofed_values, 1):
                szofed_response += f'\n{i}. *–¢–∏–ø:* {row[8]}\n*–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {row[9]}\n*–ê–¥—Ä–µ—Å:* {row[4]}\n*–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–£–∑–µ–ª —Å–≤—è–∑–∏):* {row[10]}\n*–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:* {row[11]} –ú–±/—Å–µ–∫\n*–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:* {row[12]}\n'

            callback_data = json.dumps({"type": "additional_info", "chat_id": message.chat.id})
            additional_info_storage[message.chat.id] = szofed_response
            button_additional_info = types.InlineKeyboardButton("üè¢–°–ó–û", callback_data=callback_data)
            inline_keyboard.add(button_additional_info)

        if espd_values:
            espd_response = 'üåê<b>–¢–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ï–°–ü–î:</b> \n\n'
            for i, row in enumerate(espd_values, 1):
                espd_response += f'\n{i}. <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {html.escape(row[12])}\n<b>–ê–¥—Ä–µ—Å:</b> {html.escape(row[8])}\n<b>–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {html.escape(row[9])}\n<b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> {html.escape(row[13])}\n<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {html.escape(row[18])}\n'

            callback_data = json.dumps({"type": "espd_info", "chat_id": message.chat.id})
            espd_info_storage[message.chat.id] = espd_response
            button_espd_info = types.InlineKeyboardButton("üåê–ï–°–ü–î", callback_data=callback_data)
            inline_keyboard.add(button_espd_info)
        '''

        if szoreg_values:
            szoreg_response = 'üè¢<b>–£—á—Ä–µ–∂–¥–µ–Ω–∏—è, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º–µ</b>\n\n'
            for i, row in enumerate(szoreg_values, 1):

                szoreg_response += f'\n{i}. <b>–¢–∏–ø:</b> {row[7]}\n<b>–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {row[8]}\n<b>–ê–¥—Ä–µ—Å:</b> {row[5]} \n<b>–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {row[6]}\n<b>–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</b> {row[9]}\n<b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> {row[10]}\n'

               # if len(row) >= 11:

                 #   szoreg_response += f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {row[11]}\n'


            callback_data = json.dumps({"type": "szoreg_info", "chat_id":message.chat.id})
            szoreg_info_storage[message.chat.id] = szoreg_response
            button_szoreg_info = types.InlineKeyboardButton(f"üè¢–°–ø–∏—Å–æ–∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π ({len(szoreg_values)})", callback_data=callback_data)
            inline_keyboard.add(button_szoreg_info)

        if schools_values:
            schools_response = 'üè´<b>–®–∫–æ–ª—ã:</b>\n'
            for i, row in enumerate(schools_values, 1):
                schools_response += f'\n\n{i}. '
                if len(row) > 7:
                    schools_response += f'<b>{html.escape(row[12])}</b>\n'
                if len(row) > 12:
                    schools_response += f'\n{html.escape(row[7])}\n'
                if len(row) > 14:
                    schools_response += f'\n{html.escape(row[14])}, '
                if len(row) > 13:
                    schools_response += f'{html.escape(row[13])} –ú–±/—Å\n'
                if len(row) > 20:
                    schools_response += f'{html.escape(row[20])}'
                schools_response += '\n'

            callback_data = json.dumps({"type": "schools_info", "chat_id": message.chat.id})
            schools_info_storage[message.chat.id] = schools_response
            button_schools_info = types.InlineKeyboardButton("üè´–®–∫–æ–ª—ã",callback_data=callback_data)
            inline_keyboard.add(button_schools_info)

        await bot.send_message(message.chat.id, "‚¨áÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚¨áÔ∏è", reply_markup=inline_keyboard)


      #  dp.register_callback_query_handler(handle_additional_info, lambda query: json.loads(query.data)["type"] == "additional_info")
       # dp.register_callback_query_handler(handle_espd_info, lambda query: json.loads(query.data)["type"] == "espd_info")
    #    dp.register_callback_query_handler(handle_szoreg_info, lambda query: json.loads(query.data)["type"] == "szoreg_info")
     #   dp.register_callback_query_handler(handle_digital_ministry_info, lambda query: json.loads(query.data)["type"] == "digital_ministry_info")
      #  dp.register_callback_query_handler(handle_digital_ministry_info_post, lambda query: json.loads(query.data)["type"] == "digital_ministry_info_post")
       # dp.register_callback_query_handler(handle_schools_info, lambda query: json.loads(query.data)["type"] == "schools_info")
    except ValueError:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –æ–∂–∏–¥–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {}.'.format(len(found_values)))




dp.register_callback_query_handler(handle_survey_chart, lambda query: json.loads(query.data)["type"] == "survey_chart")

from aiogram import executor
async def on_startup(dp):
    #await clear_cache()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
'''
async def clear_cache():
    # –î–æ–±–∞–≤—å—Ç–µ asyncio.loop.run_in_executor –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –∫–æ–¥–æ–º –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, storage2.flushdb)
    print("Cache cleared")
'''

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   # scheduler = AsyncIOScheduler()
    #scheduler.add_job(clear_cache, 'cron', hour=0, minute=0)
    #scheduler.start()

    executor.start_polling(dp, on_startup=on_startup)




'''
async def set_webhook():
    await bot.set_webhook(WEBHOOK_URL, certificate=open(WEBHOOK_SSL_CERT, 'r'))
    print("Webhook set successfully")




async def main():
    try:
        await set_webhook()

        print(bot.get_webhook_info)
        print("Webhook has been set.")


        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
        # await dp.skip_updates()
        # await dp.start_polling()

    except Exception as e:
        print(f"Error: {e}")

if __name__ == '__main__':
    asyncio.run(main())






async def on_startup(dispatcher):
    try:
        await bot.set_webhook(WEBHOOK_URL, certificate=open(WEBHOOK_SSL_CERT, 'rb'))
        print("Webhook set up successfully.")
    except Exception as e:
        print(f"Error setting up webhook: {e}")
    # –î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

async def on_shutdown(dispatcher):
    try:
        await bot.delete_webhook()
        print("Webhook deleted successfully.")
    except Exception as e:
        print(f"Error deleting webhook: {e}")

async def clear_cache():
    try:
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, storage2.flushdb)
        print("Cache cleared")
    except Exception as e:
        print(f"Error clearing cache: {e}")

if __name__ == '__main__':
    try:
        scheduler = AsyncIOScheduler()
        scheduler.add_job(clear_cache, 'cron', hour=0, minute=0)
        scheduler.start()
        print("Scheduler started.")

        start_webhook(
            dispatcher=dp,
            webhook_path=WEBHOOK_PATH,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            host=WEBAPP_HOST,
            port=WEBAPP_PORT,
        )
    except Exception as e:
        print(f"Error in main: {e}")


'''