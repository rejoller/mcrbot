

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReactionTypeEmoji, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types, Router, F
import asyncio
import re
from aiogram.types.web_app_info import WebAppInfo
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from additional import split_message
from handlers import Form
from google_connections import (get_authorized_client_and_spreadsheet, search_yandex_2023_values, search_in_pokazatel_504p, search_in_ucn2,
                                search_schools_values, load_otpusk_data, search_values, search_values_levenshtein, search_szoreg_values, get_value, init_redis)
from mongo_connect import search_survey_results
import json
import html

main_router=Router()


info_text_storage = {}
user_messages = {}
additional_info_storage = {}
szoreg_info_storage = {}
schools_info_storage = {}
message_storage = {}
survey_data_storage = {}
response_storage = {}



@main_router.message(StateFilter(Form.waiting_for_number))
async def handle_select_number(message: Message, state: FSMContext):
    from google_connections import init_redis
    redis = await init_redis()
    data = await state.get_data()
    from main import bot

    try:

        found_values = data.get('found_values')

        index_text = message.text

        user_first_name = message.from_user.first_name
        chat_id = message.chat.id
        response = ''
        pokazatel_504p_lines = []
        votes_response = ''
        yandex_2023_response = ''
        ucn2_response = ''

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if index_text == "–û—Ç–º–µ–Ω–∞":
            await bot.send_message(chat_id, '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.', reply_markup=types.ReplyKeyboardRemove())
            await state.clear()
            return
        if not index_text.isdigit():
            await bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
            return

        index = int(index_text)

        if index <= 0 or index > len(found_values):
            await bot.send_message(chat_id, f'–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {len(found_values)}.')
            return

        selected_np = found_values[index - 1]
        await state.clear()
        await state.update_data(found_values=selected_np)
        await state.update_data(np=selected_np[4])
        latitude = selected_np[7]
        longitude = selected_np[8]

        async with asyncio.TaskGroup() as tg:
            yandex_2023_task = tg.create_task(
                search_yandex_2023_values(selected_np[4], redis))
            pokazatel_504p_task = tg.create_task(
                search_in_pokazatel_504p(selected_np[4], redis))
            ucn2_task = tg.create_task(search_in_ucn2(selected_np[4], redis))
            survey_results_task = tg.create_task(
                search_survey_results(np=selected_np[4]))
            szoreg_task = tg.create_task(
                search_szoreg_values(selected_np[4], redis))
            schools_task = tg.create_task(
                search_schools_values(selected_np[4], redis))

            yandex_2023_values = await yandex_2023_task
            pokazatel_504p_values = await pokazatel_504p_task
            ucn2_values = await ucn2_task
            survey_results_values = await survey_results_task
            szoreg_values = await szoreg_task
            schools_values = await schools_task

        operators = {
            "    |Tele2": selected_np[39] if len(selected_np) > 39 else None,
            "    |–ú–µ–≥–∞—Ñ–æ–Ω": selected_np[40] if len(selected_np) > 40 else None,
            "    |–ë–∏–ª–∞–π–Ω": selected_np[41] if len(selected_np) > 41 else None,
            "    |–ú–¢–°": selected_np[42] if len(selected_np) > 42 else None,
        }

        operator_responses = []

        for operator_name, operator_value in operators.items():

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
            if operator_value:
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ replace
                operator_value_str = str(operator_value)

                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
                signal_quality = re.search(
                    r'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç|–ù–∏–∑–∫–æ–µ|–°—Ä–µ–¥–Ω–µ–µ|–•–æ—Ä–æ—à–µ–µ', operator_value_str, re.IGNORECASE)
                if signal_quality:
                    signal_quality = signal_quality.group()
                    if "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" in signal_quality:
                        signal_level = "üî¥–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    elif "–ù–∏–∑–∫–æ–µ" in signal_quality:
                        signal_level = "üü†–ù–∏–∑–∫–æ–µ"
                    elif "–°—Ä–µ–¥–Ω–µ–µ" in signal_quality:
                        signal_level = "üü°–°—Ä–µ–¥–Ω–µ–µ"
                    elif "–•–æ—Ä–æ—à–µ–µ" in signal_quality:
                        signal_level = "üü¢–•–æ—Ä–æ—à–µ–µ"
                    else:
                        signal_level = "‚ùì–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –µ–≥–æ —ç–º–æ–¥–∑–∏-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
                    operator_value_str = operator_value_str.replace(
                        signal_quality, signal_level)
                else:
                    operator_value_str = operator_value_str

                # –ó–∞–º–µ–Ω—è–µ–º "(" –∏ ")" –Ω–∞ " "
                operator_value_str = operator_value_str.replace(
                    "(", " ").replace(")", " ")
                operator_responses.append(
                    f'{operator_name}: {operator_value_str}\n')
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç
                continue

        if yandex_2023_values:
            yandex_2023_response = '\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 2023</b>\n\n'
            for row in yandex_2023_values:
                yandex_2023_response += f'–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {row[4]}\n–û–ø–µ—Ä–∞—Ç–æ—Ä: {row[15]}\n–°–æ–≥–ª–∞—à–µ–Ω–∏–µ: {row[7]}\n–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ú–¶–†: {row[8]}\n–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ê–ì–ó: {row[9]}\n–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {row[11]}\n–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ê–ú–°: {row[12]}\n–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ –ë–°: {row[13]}\n–ó–∞–ø—É—Å–∫ —É—Å–ª—É–≥: {row[14]}\n\n'

        if len(pokazatel_504p_values) > 0:
            for i in range(6, 10):
                if len(pokazatel_504p_values[0]) > i and pokazatel_504p_values[0][i] and pokazatel_504p_values[0][i].strip():
                    value = pokazatel_504p_values[0][i]
                    value = value.replace("–•–æ—Ä–æ—à–µ–µ", "üü¢–•–æ—Ä–æ—à–µ–µ").replace(
                        "–ù–∏–∑–∫–æ–µ", "üü†–ù–∏–∑–∫–æ–µ")
                    pokazatel_504p_lines.append(f"{value}")

        pokazatel_504p_response = "\n".join(
            pokazatel_504p_lines) if pokazatel_504p_lines else "üî¥–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        if "4G" in pokazatel_504p_response:
            votes_response = ""
        else:
            if len(selected_np) > 38:
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 35-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                votes = selected_np[34] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 36-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                update_time = selected_np[35] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                # –†–µ–π—Ç–∏–Ω–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 37-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                rank = selected_np[36] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ù–ü —Å —Ç–∞–∫–∏–º –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 39-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                same_votes_np = selected_np[38] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if votes != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and update_time != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and rank != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and same_votes_np != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                    votes_response = f'\n\n<b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –£–¶–ù 2.0 2024</b>\n\nüìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: <b>{votes}</b> (—Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–º–µ—é—Ç {same_votes_np} –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)\nüèÜ–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {rank}\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {update_time}'
                else:
                    print("Debug: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.")

        response += votes_response

        if ucn2_values:
            for row in ucn2_values:
                ucn2_response = ''

                if 4 < len(row) and row[4]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                    ucn2_response += '  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –¢–µ–ª–µ2:\n    -–°–ú–†: ' + \
                        row[4] + '\n'
                if 5 < len(row) and row[5]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                    ucn2_response += '    -–ó–∞–ø—É—Å–∫: ' + row[5] + '\n'
                if 6 < len(row) and row[6]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                    ucn2_response += '    -–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ' + row[6] + '\n'

                if ucn2_response:  # –ï—Å–ª–∏ ucn2_response –Ω–µ –ø—É—Å—Ç, –¥–æ–±–∞–≤–∏—Ç—å –≤–≤–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–æ
                    ucn2_response = '\n\n\n<b>–£–¶–ù 2.0 2023</b>\n' + ucn2_response
                    response += ucn2_response
        survey_data_storage[message.chat.id] = survey_results_values

        try:

            async with asyncio.TaskGroup() as tg:
                task1 = tg.create_task(
                    get_value(found_values[index - 1], 20))
                task2 = tg.create_task(
                    get_value(found_values[index - 1], 13))
                task3 = tg.create_task(
                    get_value(found_values[index - 1], 14))
                task4 = tg.create_task(
                    get_value(found_values[index - 1], 12))
                task5 = tg.create_task(
                    get_value(found_values[index - 1], 6))
                task6 = tg.create_task(
                    get_value(found_values[index - 1], 9))
                task7 = tg.create_task(
                    get_value(found_values[index - 1], 2))
                task8 = tg.create_task(
                    get_value(found_values[index - 1], 5))
                task9 = tg.create_task(
                    get_value(found_values[index - 1], 24))

                selsovet_info = await task1
                tanya_sub_info_year = await task2
                tanya_sub_info_provider = await task3
                taksofony_info = await task4
                arctic_info = await task5
                internet_info = await task6
                population_2010 = await task7
                population_2020 = await task8
                itog_ucn_2023 = await task9

        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

        response = f'<b>{await get_value(found_values[index - 1], 1)}</b>'

        if selsovet_info:
            response += f'\n{selsovet_info}'
        if arctic_info:
            response += f'\n‚ùÑÔ∏èÔ∏è–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞‚ùÑÔ∏èÔ∏è'

        response += f'\n\nüë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2010 –≥:{population_2010} —á–µ–ª.\nüë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2020 –≥: {population_2020} —á–µ–ª.'

        if taksofony_info:
            response += f'\n‚òéÔ∏è—Ç–∞–∫—Å–æ—Ñ–æ–Ω: {taksofony_info}'

        response += f'\nüåê–∏–Ω—Ç–µ—Ä–Ω–µ—Ç: {internet_info}Ô∏è\n'
        response += f'‚†Ä'
        response += f'<pre>üì±–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:\n{pokazatel_504p_response}</pre>\n'

        if tanya_sub_info_year and tanya_sub_info_provider:
            response += f'\n\n–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã–π "–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞" –≤ {tanya_sub_info_year} –≥–æ–¥—É, –æ–ø–µ—Ä–∞—Ç–æ—Ä {tanya_sub_info_provider}'

        if itog_ucn_2023:
            response += f'\n\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–∏–Ω—Ü–∏—Ñ—Ä—ã –†–æ—Å—Å–∏–∏ –æ–± –£–¶–ù 2024: {itog_ucn_2023}'

        response += f'{ucn2_response}{yandex_2023_response}{votes_response}\n'

        info_text_storage[message.chat.id] = response

        await bot.send_message(message.chat.id, "<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç</b>", parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())

        await bot.send_location(message.chat.id, latitude, longitude)

        messages = split_message(response)

        # allowed_users = {964635576, 1063749463, 374056328, 572346758, 434872315, 1045874687, 1063749463, 487922464, 371098269, 402748716}
        allowed_users = {1}

        survey_builder = InlineKeyboardBuilder()
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='start_survey')]
        ])
        survey_builder.attach(InlineKeyboardBuilder.from_markup(markup))
        response += f'‚†Ä'
        await bot.send_message(message.chat.id, response, parse_mode='HTML', disable_web_page_preview=True, reply_markup=survey_builder.as_markup())

        builder_2 = InlineKeyboardBuilder()

        if survey_results_values:
            survey_data_storage[message.chat.id] = survey_results_values
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ ({len(survey_results_values)})", callback_data=json.dumps(
                    {"type": "2_survey_results", "chat_id": message.chat.id}))]
            ])
            builder_2.attach(InlineKeyboardBuilder.from_markup(markup))

        if szoreg_values:

            szoreg_response = 'üè¢<b>–£—á—Ä–µ–∂–¥–µ–Ω–∏—è, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º–µ</b>\n\n'
            for i, row in enumerate(szoreg_values, 1):
                if len(row) > 6:

                    szoreg_response += f'\n{i}. <b>–¢–∏–ø:</b> {row[7]}\n<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {row[8]}\n<b>–ê–¥—Ä–µ—Å:</b> {row[5]} \n<b>–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {row[6]}\n<b>–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</b> {row[9]}\n<b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> {row[10]}\n'
                else:
                    print(f'–°—Ç—Ä–æ–∫–∞ {i} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {row}')

            szoreg_info_storage[message.chat.id] = szoreg_response
            callback_data = json.dumps(
                {"type": "2_szoreg_info", "chat_id": message.chat.id})

            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"üè¢–°–ø–∏—Å–æ–∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π ({len(szoreg_values)})", callback_data=callback_data)]
            ])
            builder_2.attach(InlineKeyboardBuilder.from_markup(markup))

        if schools_values:
            schools_response = 'üè´<b>–®–∫–æ–ª—ã:</b>\n'
            for i, row in enumerate(schools_values, 1):
                schools_response += f'\n{i} '
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –æ—Ç–≤–µ—Ç
                if len(row) > 7 and row[12] is not None:
                    schools_response += f'<b>{html.escape(row[12])}</b>\n'
                if len(row) > 12 and row[7] is not None:
                    schools_response += f'\n{html.escape(row[7])}\n'
                if len(row) > 14 and row[14] is not None:
                    schools_response += f'\n{html.escape(row[14])}, '
                if len(row) > 13 and row[13] is not None:
                    schools_response += f'{html.escape(row[13])} –ú–±/—Å\n'
                if len(row) > 20 and row[20] is not None:
                    schools_response += f'{html.escape(row[20])}'
                else:
                    schools_response += ''
                schools_response += '\n'

            schools_info_storage[message.chat.id] = schools_response
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"üè´–®–∫–æ–ª—ã ({len(schools_values)})", callback_data=json.dumps(
                    {"type": "2_schools_info", "chat_id": message.chat.id}))]
            ])
            builder_2.attach(InlineKeyboardBuilder.from_markup(markup))

        if schools_values or szoreg_values or survey_results_values:
            await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", reply_markup=builder_2.as_markup())

        else:
            await bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    except ValueError:

        await bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {}.'.format(len(found_values)))