

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReactionTypeEmoji, InputFile, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types, Router, F


from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import Message
from datetime import datetime, timedelta
import csv
from mongo_connect import save_survey_results
from google_connections import get_authorized_client_and_spreadsheet, search_yandex_2023_values, search_in_pokazatel_504p, search_in_ucn2, search_schools_values, search_survey_results, load_otpusk_data, search_values, search_values_levenshtein, search_szoreg_values, get_value, init_redis
from openai_file import handle_digital_ministry_info
import asyncio
from additional import split_message, create_excel_file_2
import json
import html
import re
import logging
import os
import traceback
import tempfile
import shutil
from PIL import Image, ImageDraw, ImageFont
import pandas as pd
import json
from animations_providers import (megafon_id, mts_id, tele2_id, beeline_id)
from main import bot
from google_connections import init_redis

info_text_storage = {}
user_messages = {}
additional_info_storage = {}
szoreg_info_storage = {}
schools_info_storage = {}
message_storage = {}
survey_data_storage = {}
response_storage = {}
main_router = Router()



# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def log_user_data(user_id, first_name, last_name, username, message_text):
    file_path = 'users_data.csv'
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª. –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    try:
        with open(file_path, 'x', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Timestamp', 'User ID', 'First Name',
                            'Last Name', 'Username', 'Message'])
    except FileExistsError:
        pass

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
    with open(file_path, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([current_time, user_id, first_name,
                        last_name, username, message_text])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è


async def log_user_data_from_message(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    message_text = message.text

    log_user_data(user_id, first_name, last_name, username, message_text)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–µ–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ)


class Form(StatesGroup):
    default = State()
    waiting_for_number = State()


class Survey(StatesGroup):
    tele2_level = State()
    tele2_quality = State()
    megafon_level = State()
    megafon_quality = State()
    mts_level = State()
    mts_quality = State()
    beeline_level = State()
    beeline_quality = State()


def get_employees_on_vacation(otpusk_data, days_ahead=3):
    today = datetime.today().date()
    future_vacation_start = today + timedelta(days=days_ahead)
    employees_on_vacation = []
    employees_starting_vacation_soon = []

    for row_idx, row in enumerate(otpusk_data):
        if row_idx == 0:  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            continue
        if len(row) >= 5:
            try:
                start_date = datetime.strptime(row[3], "%d.%m.%Y").date()
                end_date = datetime.strptime(row[4], "%d.%m.%Y").date()

                if start_date <= today <= end_date:
                    employees_on_vacation.append(row)

                if today < start_date <= future_vacation_start:
                    employees_starting_vacation_soon.append(row)

            except ValueError:
                pass  # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã

    return employees_on_vacation, employees_starting_vacation_soon


@main_router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    await state.clear()

    user_first_name = message.from_user.first_name
    await message.answer(
        f'–Ø –±–æ—Ç –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è!'
        '\n –í–≤–µ–¥–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∫—Ä–∞—è, '

        '—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏ –≤ –Ω–µ–º. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @rejoller.')




@main_router.message(F.location)
async def handle_location(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
    from mongo_connect import save_user_location
    user_id = message.from_user.id
    location_data = {"latitude": message.location.latitude, "longitude": message.location.longitude}
    await message.answer('—Å–ø–∞—Å–∏–±–æüòâ')
    await save_user_location(user_id, location_data)



@main_router.message(F.animation)
async def echo_gif(message: Message):
    file_id = message.animation.file_id
    print(file_id)
    await message.reply_animation(message.animation.file_id)


@main_router.message(~StateFilter(Form.waiting_for_number))
async def handle_text(message: Message, state: FSMContext):
   
    reaction_emoji = ReactionTypeEmoji(emoji='ü´°')
    await message.react(reaction=[reaction_emoji], is_big=True)
    redis = await init_redis()

  #  user_state = await state.get_state()



    global info_text_storage
    await state.set_state(Form.default)
   # user_first_name = message.from_user.first_name
    await log_user_data_from_message(message)
  #  chat_id = message.chat.id

    #user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id

    votes_response = ""
    response = ''
    ucn2_response = ""
    operators_response = ''
    survey_results_values = ''

    gc, spreadsheet = await get_authorized_client_and_spreadsheet()

    found_values_a = await search_values(message.text, redis)
    
    
    if not found_values_a:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ —Å 70% —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
        levenshtein_matches = await search_values_levenshtein(message.text, spreadsheet, threshold=0.4, max_results=5)

        if levenshtein_matches:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è
            unique_matches = set(levenshtein_matches)
            first_match = list(unique_matches)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            formatted_matches = "\n".join(
                [f'`{match}`' for match in first_match])
            await bot.send_message(message.chat.id, f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)\n\n{formatted_matches}', parse_mode='Markdown')
        else:
            await bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return

    allowed_users = {1}
    if found_values_a:
        found_values = found_values_a
        await state.update_data(found_values=found_values)
        await state.update_data(np=found_values[0][4])

        if len(found_values) == 1:
            # –®–∏—Ä–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ H —Ç–∞–±–ª–∏—Ü—ã goroda2.0
            latitude = found_values[0][7]
            longitude = found_values[0][8]

            yandex_2023_response = ''
            pokazatel_504p_lines = []

            if len(found_values) > 0 and len(found_values[0]) > 4:
                # –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Ç–æ –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ found_values[5][4]

                ucn2_values, yandex_2023_values, pokazatel_504p_values, survey_results_values = await asyncio.gather(
                    search_in_ucn2(found_values[0][4], redis),
                    search_yandex_2023_values(found_values[0][4], redis),
                    search_in_pokazatel_504p(found_values[0][4], redis),
                    search_survey_results(found_values[0][4], redis)
                )
            else:
                # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –∏–Ω–¥–µ–∫—Å–∞ [5][4] –Ω–µ—Ç, –∏ –Ω—É–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –±–µ–∑ search_in_results
                ucn2_values, yandex_2023_values, pokazatel_504p_values = await asyncio.gather(
                    search_in_ucn2(found_values[0][4], redis),
                    search_yandex_2023_values(found_values[0][4], redis),
                    search_in_pokazatel_504p(found_values[0][4], redis)
                )
                survey_results_values = None

            if found_values_a:
                for row in found_values_a:
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞
                    operators = {
                        "Tele2": row[39] if len(row) > 39 else None,
                        "–ú–µ–≥–∞—Ñ–æ–Ω": row[40] if len(row) > 40 else None,
                        "–ë–∏–ª–∞–π–Ω": row[41] if len(row) > 41 else None,
                        "–ú–¢–°": row[42] if len(row) > 42 else None,
                    }

                    operators_response = '\n–û—Ü–µ–Ω–∫–∞ –∂–∏—Ç–µ–ª–µ–π:\n'

                    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
                    operator_responses = []

                    for operator_name, operator_value in operators.items():

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
                        if operator_value:
                            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ replace
                            operator_value_str = str(operator_value)

                            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
                            signal_quality = re.search(
                                r'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç|–ù–∏–∑–∫–æ–µ|–°—Ä–µ–¥–Ω–µ–µ|–•–æ—Ä–æ—à–µ–µ', operator_value_str, re.IGNORECASE)
                            if signal_quality:
                                signal_quality = signal_quality.group()
                                if "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" in signal_quality:
                                    signal_level = "üî¥–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                                elif "–ù–∏–∑–∫–æ–µ" in signal_quality:
                                    signal_level = "üü†–ù–∏–∑–∫–æ–µ"
                                elif "–°—Ä–µ–¥–Ω–µ–µ" in signal_quality:
                                    signal_level = "üü°–°—Ä–µ–¥–Ω–µ–µ"
                                elif "–•–æ—Ä–æ—à–µ–µ" in signal_quality:
                                    signal_level = "üü¢–•–æ—Ä–æ—à–µ–µ"
                                else:
                                    signal_level = "‚ùì–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                                # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –µ–≥–æ —ç–º–æ–¥–∑–∏-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
                                operator_value_str = operator_value_str.replace(
                                    signal_quality, signal_level)
                            else:
                                operator_value_str = operator_value_str

                            operator_value_str = operator_value_str.replace(
                                "(", " ").replace(")", " ")
                            operator_responses.append(
                                f'{operator_name}: {operator_value_str}\n')
                        else:

                            continue

                    if not operator_responses:
                        operators_response += '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n'
                    else:
                        operators_response += ''.join(operator_responses)

                    response += operators_response

            if yandex_2023_values:
                yandex_2023_response = '\n\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 2023</b>\n\n'
                for row in yandex_2023_values:
                    yandex_2023_response += f'–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {row[4]}\n–û–ø–µ—Ä–∞—Ç–æ—Ä: {row[15]}\n–°–æ–≥–ª–∞—à–µ–Ω–∏–µ: {row[7]}\n–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ú–¶–†: {row[8]}\n–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ê–ì–ó: {row[9]}\n–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {row[11]}\n–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ê–ú–°: {row[12]}\n–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ –ë–°: {row[13]}\n–ó–∞–ø—É—Å–∫ —É—Å–ª—É–≥: {row[14]}\n\n'
            if pokazatel_504p_values:
                for index in range(6, 10):
                    if len(pokazatel_504p_values[0]) > index and pokazatel_504p_values[0][index] and pokazatel_504p_values[0][index].strip():
                        value = pokazatel_504p_values[0][index]
                        if "–•–æ—Ä–æ—à–µ–µ" in value:
                            value = value.replace("–•–æ—Ä–æ—à–µ–µ", "üü¢–•–æ—Ä–æ—à–µ–µ")
                        if "–ù–∏–∑–∫–æ–µ" in value:
                            value = value.replace("–ù–∏–∑–∫–æ–µ", "üü†–ù–∏–∑–∫–æ–µ")
                        pokazatel_504p_lines.append(value)
            if ucn2_values:
                for row in ucn2_values:
                    ucn2_response = ''

                    if 4 < len(row) and row[4]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                        ucn2_response += '  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –¢–µ–ª–µ2:\n    -–°–ú–†: ' + \
                            row[4] + '\n'
                    if 5 < len(row) and row[5]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                        ucn2_response += '    -–ó–∞–ø—É—Å–∫: ' + row[5] + '\n'
                    if 6 < len(row) and row[6]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                        ucn2_response += '    -–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ' + row[6] + '\n'

                    if ucn2_response:  # –ï—Å–ª–∏ ucn2_response –Ω–µ –ø—É—Å—Ç, –¥–æ–±–∞–≤–∏—Ç—å –≤–≤–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–æ
                        ucn2_response = '\n\n\n<b>–£–¶–ù 2.0 2023</b>\n' + ucn2_response
                        response += ucn2_response

                response += ucn2_response
            pokazatel_504p_response = "\n".join(
                pokazatel_504p_lines) if pokazatel_504p_lines else "üî¥–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

            if "4G" in pokazatel_504p_response:
                votes_response = ""
            else:

                try:
                    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ
                    if len(found_values[0]) > 38:
                        votes = found_values[0][34] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        update_time = found_values[0][35] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        rank = found_values[0][36] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        same_votes_np = found_values[0][38] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                        if votes != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and update_time != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and rank != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and same_votes_np != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                            votes_response = f'\n\n<b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –£–¶–ù 2.0 2024</b>\n\nüìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: <b>{votes}</b> (—Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–º–µ—é—Ç {same_votes_np} –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)\nüèÜ–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {rank}\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {update_time}'
                        else:
                            print(
                                "Debug: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.")
                except Exception as e:
                    print(
                        f"Debug: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ—Å–∞—Ö: {e}")

            response = f'<b>{found_values[0][1]}</b>'

            try:
                selsovet_info, tanya_sub_info_year, tanya_sub_info_provider, taksofony_info, arctic_info, internet_info, population_2010, population_2020, itog_ucn_2023 = await asyncio.gather(
                    get_value(found_values[0], 20),
                    get_value(found_values[0], 13),
                    get_value(found_values[0], 14),
                    get_value(found_values[0], 12),
                    get_value(found_values[0], 6),
                    get_value(found_values[0], 9),
                    get_value(found_values[0], 2),
                    get_value(found_values[0], 5),
                    get_value(found_values[0], 24),
                    return_exceptions=True  # –í–æ–∑–≤—Ä–∞—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∫–∞–∫ –æ–±—ä–µ–∫—Ç–æ–≤
                )
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

            if selsovet_info:
                response += f'\n{selsovet_info}'
            if arctic_info:
                response += f'\n‚ùÑÔ∏èÔ∏è–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞‚ùÑÔ∏èÔ∏è'
            response += f'\n\nüë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2010 –≥:{population_2010} —á–µ–ª.\nüë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2020 –≥: {population_2020} —á–µ–ª.'

            if taksofony_info:
                response += f'\n‚òéÔ∏è—Ç–∞–∫—Å–æ—Ñ–æ–Ω: {taksofony_info}'

            response += f'\nüåê–∏–Ω—Ç–µ—Ä–Ω–µ—Ç: {internet_info}Ô∏è'
            response += f'\n\nüì±<b>–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:</b>\n{pokazatel_504p_response}'

            if tanya_sub_info_year and tanya_sub_info_provider:
                response += f'\n\n–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã–π "–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞" –≤ {tanya_sub_info_year} –≥–æ–¥—É, –æ–ø–µ—Ä–∞—Ç–æ—Ä {tanya_sub_info_provider}'

            if itog_ucn_2023:
                response += f'\n\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–∏–Ω—Ü–∏—Ñ—Ä—ã –†–æ—Å—Å–∏–∏ –æ–± –£–¶–ù 2024: {itog_ucn_2023}'
            response += f'\n{operators_response}\n'
            response += f'{yandex_2023_response}{ucn2_response}{votes_response}\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –£–¶–ù 2.0 2024 –∂–º–∏ /votes\n\n–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –∂–∏—Ç–µ–ª–µ–π - <a href="http://t.me/providers_rating_bot">@providers_rating_bot</a>'

            info_text_storage[message.chat.id] = response

            await bot.send_location(message.chat.id, latitude, longitude, heading=10, proximity_alert_radius = 200)

            messages = split_message(response)
            survey_builder = InlineKeyboardBuilder()
            markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='start_survey')]
                ])
            survey_builder.attach(InlineKeyboardBuilder.from_markup(markup))

            
            await bot.send_message(message.chat.id, response, parse_mode='HTML', disable_web_page_preview=True, reply_markup=survey_builder.as_markup())


                
                

            szoreg_values, schools_values = await asyncio.gather(

                search_szoreg_values(found_values[0][4], redis),
                search_schools_values(found_values[0][4], redis)
            )

            # if message.from_user.id in allowed_users:
            # button_digital_ministry_info = types.InlineKeyboardButton("üòà–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ(–ë–ï–¢–ê)", callback_data=json.dumps({"type": "digital_ministry_info", "chat_id": message.chat.id}))
            # inline_keyboard.add(button_digital_ministry_info)
            #   button_digital_ministry_info = types.InlineKeyboardButton("üòà–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ(–ë–ï–¢–ê)", 'digital_ministry_info')
            #  inline_keyboard.add(button_digital_ministry_info)

            if message.from_user.id in allowed_users:
                button_digital_ministry_info = types.InlineKeyboardButton(
                    "üòà–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ(–ë–ï–¢–ê)", callback_data="digital_ministry_info")
                inline_keyboard.add(button_digital_ministry_info)

            builder = InlineKeyboardBuilder()
            survey_data_storage[message.chat.id] = survey_results_values

            if survey_results_values:

                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞", callback_data=json.dumps(
                        {"type": "survey_chart", "chat_id": message.chat.id}))]
                ])
                builder.attach(InlineKeyboardBuilder.from_markup(markup))
                await message.answer("–ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞. –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=builder.as_markup())

        #  if szofed_values or espd_values or szoreg_values or schools_values or info_text_storage:

            if szoreg_values:
                szoreg_response = 'üè¢<b>–£—á—Ä–µ–∂–¥–µ–Ω–∏—è, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º–µ</b>\n\n'
                for i, row in enumerate(szoreg_values, 1):
                    if len(row) > 6:

                        szoreg_response += f'\n{i}. <b>–¢–∏–ø:</b> {row[7]}\n<b>–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {row[8]}\n<b>–ê–¥—Ä–µ—Å:</b> {row[5]} \n<b>–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {row[6]}\n<b>–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</b> {row[9]}\n<b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> {row[10]}\n'
                    else:
                        print(
                            f'–°—Ç—Ä–æ–∫–∞ {i} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {row}')

                szoreg_info_storage[message.chat.id] = szoreg_response
                callback_data = json.dumps(
                    {"type": "szoreg_info", "chat_id": message.chat.id})

                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"üè¢–°–ø–∏—Å–æ–∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π ({len(szoreg_values)})", callback_data=callback_data)]
                ])
                builder.attach(InlineKeyboardBuilder.from_markup(markup))

            if schools_values:
                schools_response = 'üè´<b>–®–∫–æ–ª—ã:</b>\n'
                for i, row in enumerate(schools_values, 1):
                    schools_response += f'\n{i} '

                    if len(row) > 7 and row[12] is not None:
                        schools_response += f'<b>{html.escape(row[12])}</b>\n'
                    if len(row) > 12 and row[7] is not None:
                        schools_response += f'\n{html.escape(row[7])}\n'
                    if len(row) > 14 and row[14] is not None:
                        schools_response += f'\n{html.escape(row[14])}, '
                    if len(row) > 13 and row[13] is not None:
                        schools_response += f'{html.escape(row[13])} –ú–±/—Å\n'
                    if len(row) > 20 and row[20] is not None:
                        schools_response += f'{html.escape(row[20])}'
                    else:
                        schools_response += ''
                    schools_response += '\n'

                callback_data = json.dumps(
                    {"type": "schools_info", "chat_id": message.chat.id})
                schools_info_storage[message.chat.id] = schools_response
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"üè´–®–∫–æ–ª—ã({len(schools_values)})", callback_data=callback_data)]
                ])
                builder.attach(InlineKeyboardBuilder.from_markup(markup))

            if markup:
                await message.answer("–¥–æ–ø –∏–Ω—Ñ–æ", reply_markup=builder.as_markup())

                # await bot.send_message(message.chat.id, "‚¨áÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚¨áÔ∏è", reply_markup=inline_keyboard)
            else:
                await bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

                # await bot.send_message(message.chat.id, "‚¨áÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚¨áÔ∏è", reply_markup=inline_keyboard)
        # response_storage[message.chat.id] = response

    if len(found_values) > 1:

        builder_1 = ReplyKeyboardBuilder()

        values = [(await get_value(row, 1), await get_value(row, 2)) for row in found_values]
        values_with_numbers = [
            f"{i + 1}. {value[0]}" for i, value in enumerate(values)]
        msg = '\n'.join(values_with_numbers)

        messages = split_message(
            f'–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. \n\n{msg}')

        for msg in messages:
            await bot.send_message(message.chat.id, msg)

        for index in enumerate(found_values, start=1):

            button_text = f"{index[0]}"

            builder_1.button(text=button_text)
        builder_1.button(text="–û—Ç–º–µ–Ω–∞")
        builder_1.adjust(5)
        keyboard_1 = builder_1.as_markup(
            resize_keyboard=True, one_time_keyboard=True)

        saved_data = await state.update_data()
        await state.set_state(Form.waiting_for_number)

        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞:', reply_markup=keyboard_1)

        logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")


@main_router.message(StateFilter(Form.waiting_for_number))
async def handle_select_number(message: Message, state: FSMContext):
    from google_connections import init_redis
    redis = await init_redis()
    data = await state.get_data()
    from main import bot

    try:
        await state.clear()
        found_values = data.get('found_values')

        index_text = message.text
        print(f'–≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {index_text}')
        user_first_name = message.from_user.first_name
        chat_id = message.chat.id
        response = ''
        pokazatel_504p_lines = []
        votes_response = ''
        yandex_2023_response = ''
        ucn2_response = ''

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if index_text == "–û—Ç–º–µ–Ω–∞":
            await bot.send_message(chat_id, '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.', reply_markup=types.ReplyKeyboardRemove())
            await state.clear()
            return
        if not index_text.isdigit():
            await bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
            return

        index = int(index_text)
        print(f'–≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç {index}')
        if index <= 0 or index > len(found_values):
            await bot.send_message(chat_id, f'–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {len(found_values)}.')
            return

        selected_np = found_values[index - 1]
        await state.update_data(found_values=selected_np)
        await state.update_data(np=selected_np[4])
        latitude = selected_np[7]
        longitude = selected_np[8]

        yandex_2023_values, pokazatel_504p_values, survey_results_values, ucn2_values = await asyncio.gather(
            search_yandex_2023_values(selected_np[4], redis),
            search_in_pokazatel_504p(selected_np[4], redis),
            search_survey_results(selected_np[4], redis),

            search_in_ucn2(selected_np[4], redis)
        )
        print('pokazatel_504p_values:', pokazatel_504p_values,)

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        operators = {
            "    |Tele2": selected_np[39] if len(selected_np) > 39 else None,
            "    |–ú–µ–≥–∞—Ñ–æ–Ω": selected_np[40] if len(selected_np) > 40 else None,
            "    |–ë–∏–ª–∞–π–Ω": selected_np[41] if len(selected_np) > 41 else None,
            "    |–ú–¢–°": selected_np[42] if len(selected_np) > 42 else None,
        }

        operators_response = '\n–û—Ü–µ–Ω–∫–∞ –∂–∏—Ç–µ–ª–µ–π:\n'

        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        operator_responses = []

        for operator_name, operator_value in operators.items():

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
            if operator_value:
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ replace
                operator_value_str = str(operator_value)

                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
                signal_quality = re.search(
                    r'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç|–ù–∏–∑–∫–æ–µ|–°—Ä–µ–¥–Ω–µ–µ|–•–æ—Ä–æ—à–µ–µ', operator_value_str, re.IGNORECASE)
                if signal_quality:
                    signal_quality = signal_quality.group()
                    if "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" in signal_quality:
                        signal_level = "üî¥–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    elif "–ù–∏–∑–∫–æ–µ" in signal_quality:
                        signal_level = "üü†–ù–∏–∑–∫–æ–µ"
                    elif "–°—Ä–µ–¥–Ω–µ–µ" in signal_quality:
                        signal_level = "üü°–°—Ä–µ–¥–Ω–µ–µ"
                    elif "–•–æ—Ä–æ—à–µ–µ" in signal_quality:
                        signal_level = "üü¢–•–æ—Ä–æ—à–µ–µ"
                    else:
                        signal_level = "‚ùì–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –µ–≥–æ —ç–º–æ–¥–∑–∏-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
                    operator_value_str = operator_value_str.replace(
                        signal_quality, signal_level)
                else:
                    operator_value_str = operator_value_str

                # –ó–∞–º–µ–Ω—è–µ–º "(" –∏ ")" –Ω–∞ " "
                operator_value_str = operator_value_str.replace(
                    "(", " ").replace(")", " ")
                operator_responses.append(
                    f'{operator_name}: {operator_value_str}\n')
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç
                continue

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        if not operator_responses:
            operators_response += '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n'
        else:
            operators_response += ''.join(operator_responses)

        response += operators_response

        if yandex_2023_values:
            yandex_2023_response = '\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 2023</b>\n\n'
            for row in yandex_2023_values:
                yandex_2023_response += f'–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {row[4]}\n–û–ø–µ—Ä–∞—Ç–æ—Ä: {row[15]}\n–°–æ–≥–ª–∞—à–µ–Ω–∏–µ: {row[7]}\n–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ú–¶–†: {row[8]}\n–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ê–ì–ó: {row[9]}\n–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {row[11]}\n–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ê–ú–°: {row[12]}\n–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ –ë–°: {row[13]}\n–ó–∞–ø—É—Å–∫ —É—Å–ª—É–≥: {row[14]}\n\n'

        if len(pokazatel_504p_values) > 0:
            for i in range(6, 10):
                if len(pokazatel_504p_values[0]) > i and pokazatel_504p_values[0][i] and pokazatel_504p_values[0][i].strip():
                    value = pokazatel_504p_values[0][i]
                    value = value.replace("–•–æ—Ä–æ—à–µ–µ", "üü¢–•–æ—Ä–æ—à–µ–µ").replace(
                        "–ù–∏–∑–∫–æ–µ", "üü†–ù–∏–∑–∫–æ–µ")
                    pokazatel_504p_lines.append(f"{value}")

        pokazatel_504p_response = "\n".join(
            pokazatel_504p_lines) if pokazatel_504p_lines else "üî¥–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        if "4G" in pokazatel_504p_response:
            votes_response = ""
        else:
            if len(selected_np) > 38:
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 35-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                votes = selected_np[34] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 36-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                update_time = selected_np[35] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                # –†–µ–π—Ç–∏–Ω–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 37-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                rank = selected_np[36] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ù–ü —Å —Ç–∞–∫–∏–º –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 39-–æ–º —Å—Ç–æ–ª–±—Ü–µ
                same_votes_np = selected_np[38] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if votes != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and update_time != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and rank != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and same_votes_np != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                    votes_response = f'\n\n<b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –£–¶–ù 2.0 2024</b>\n\nüìä–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: <b>{votes}</b> (—Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–º–µ—é—Ç {same_votes_np} –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)\nüèÜ–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {rank}\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {update_time}'
                else:
                    print("Debug: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.")

        response += votes_response

        if ucn2_values:
            for row in ucn2_values:
                ucn2_response = ''

                if 4 < len(row) and row[4]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                    ucn2_response += '  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –¢–µ–ª–µ2:\n    -–°–ú–†: ' + \
                        row[4] + '\n'
                if 5 < len(row) and row[5]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                    ucn2_response += '    -–ó–∞–ø—É—Å–∫: ' + row[5] + '\n'
                if 6 < len(row) and row[6]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                    ucn2_response += '    -–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ' + row[6] + '\n'

                if ucn2_response:  # –ï—Å–ª–∏ ucn2_response –Ω–µ –ø—É—Å—Ç, –¥–æ–±–∞–≤–∏—Ç—å –≤–≤–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–æ
                    ucn2_response = '\n\n\n<b>–£–¶–ù 2.0 2023</b>\n' + ucn2_response
                    response += ucn2_response
        survey_data_storage[message.chat.id] = survey_results_values

        try:
            selsovet_info, tanya_sub_info_year, tanya_sub_info_provider, taksofony_info, arctic_info, internet_info, population_2010, population_2020, itog_ucn_2023 = await asyncio.gather(
                get_value(found_values[index - 1], 20),
                get_value(found_values[index - 1], 13),
                get_value(found_values[index - 1], 14),
                get_value(found_values[index - 1], 12),
                get_value(found_values[index - 1], 6),
                get_value(found_values[index - 1], 9),
                get_value(found_values[index - 1], 2),
                get_value(found_values[index - 1], 5),
                get_value(found_values[index - 1], 24),
                return_exceptions=True  # –í–æ–∑–≤—Ä–∞—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∫–∞–∫ –æ–±—ä–µ–∫—Ç–æ–≤
            )
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

        response = f'<b>{await get_value(found_values[index - 1], 1)}</b>'

        if selsovet_info:
            response += f'\n{selsovet_info}'
        if arctic_info:
            response += f'\n‚ùÑÔ∏èÔ∏è–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞‚ùÑÔ∏èÔ∏è'

        response += f'\n\nüë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2010 –≥:{population_2010} —á–µ–ª.\nüë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2020 –≥: {population_2020} —á–µ–ª.'

        if taksofony_info:
            response += f'\n‚òéÔ∏è—Ç–∞–∫—Å–æ—Ñ–æ–Ω: {taksofony_info}'

        response += f'\nüåê–∏–Ω—Ç–µ—Ä–Ω–µ—Ç: {internet_info}Ô∏è'
        response += f'\n\nüì±<b>–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:</b>\n{pokazatel_504p_response}'

        if tanya_sub_info_year and tanya_sub_info_provider:
            response += f'\n\n–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã–π "–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞" –≤ {tanya_sub_info_year} –≥–æ–¥—É, –æ–ø–µ—Ä–∞—Ç–æ—Ä {tanya_sub_info_provider}'

        if itog_ucn_2023:
            response += f'\n\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–∏–Ω—Ü–∏—Ñ—Ä—ã –†–æ—Å—Å–∏–∏ –æ–± –£–¶–ù 2024: {itog_ucn_2023}'

        response += f'\n{operators_response}\n'

        response += f'{ucn2_response}{yandex_2023_response}{votes_response}\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –£–¶–ù 2.0 2024 –∂–º–∏ /votes\n–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –∂–∏—Ç–µ–ª–µ–π - <a href="http://t.me/providers_rating_bot">@providers_rating_bot</a>'

        info_text_storage[message.chat.id] = response

        await bot.send_message(message.chat.id, "<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç</b>", parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())


        


        await bot.send_location(message.chat.id, latitude, longitude)

        messages = split_message(response)

        # allowed_users = {964635576, 1063749463, 374056328, 572346758, 434872315, 1045874687, 1063749463, 487922464, 371098269, 402748716}
        allowed_users = {1}
       

        survey_builder = InlineKeyboardBuilder()
        markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='start_survey')]
                ])
        survey_builder.attach(InlineKeyboardBuilder.from_markup(markup))

       
        await bot.send_message(message.chat.id, response, parse_mode='HTML', disable_web_page_preview=True, reply_markup=survey_builder.as_markup())
        
        szoreg_values, schools_values = await asyncio.gather(
            search_szoreg_values(selected_np[4], redis),
            search_schools_values(selected_np[4], redis)
        )
        print(f'szoreg_values: {szoreg_values}')
        print(f'schools_values: {schools_values}')
        builder_2 = InlineKeyboardBuilder()

        

        markup = None
        if survey_results_values:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞", callback_data=json.dumps(
                    {"type": "survey_chart", "chat_id": message.chat.id}))]
            ])
            builder_2.attach(InlineKeyboardBuilder.from_markup(markup))

        '''
        if message.from_user.id in allowed_users:
            button_digital_ministry_info = types.InlineKeyboardButton("üòà–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ(–ë–ï–¢–ê)", callback_data=json.dumps({"type": "digital_ministry_info", "chat_id": message.chat.id}))
            inline_keyboard.add(button_digital_ministry_info)
        '''
        if szoreg_values:

            szoreg_response = 'üè¢<b>–£—á—Ä–µ–∂–¥–µ–Ω–∏—è, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º–µ</b>\n\n'
            for i, row in enumerate(szoreg_values, 1):
                if len(row) > 6:

                    szoreg_response += f'\n{i}. <b>–¢–∏–ø:</b> {row[7]}\n<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {row[8]}\n<b>–ê–¥—Ä–µ—Å:</b> {row[5]} \n<b>–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {row[6]}\n<b>–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</b> {row[9]}\n<b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> {row[10]}\n'
                else:
                    print(f'–°—Ç—Ä–æ–∫–∞ {i} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {row}')

            szoreg_info_storage[message.chat.id] = szoreg_response
            callback_data = json.dumps(
                {"type": "szoreg_info", "chat_id": message.chat.id})

            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"üè¢–°–ø–∏—Å–æ–∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π ({len(szoreg_values)})", callback_data=callback_data)]
            ])
            builder_2.attach(InlineKeyboardBuilder.from_markup(markup))

        if schools_values:
            schools_response = 'üè´<b>–®–∫–æ–ª—ã:</b>\n'
            for i, row in enumerate(schools_values, 1):
                schools_response += f'\n{i} '
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –æ—Ç–≤–µ—Ç
                if len(row) > 7 and row[12] is not None:
                    schools_response += f'<b>{html.escape(row[12])}</b>\n'
                if len(row) > 12 and row[7] is not None:
                    schools_response += f'\n{html.escape(row[7])}\n'
                if len(row) > 14 and row[14] is not None:
                    schools_response += f'\n{html.escape(row[14])}, '
                if len(row) > 13 and row[13] is not None:
                    schools_response += f'{html.escape(row[13])} –ú–±/—Å\n'
                if len(row) > 20 and row[20] is not None:
                    schools_response += f'{html.escape(row[20])}'
                else:
                    schools_response += ''
                schools_response += '\n'

            schools_info_storage[message.chat.id] = schools_response
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"üè´–®–∫–æ–ª—ã ({len(schools_values)})", callback_data=json.dumps(
                    {"type": "schools_info", "chat_id": message.chat.id}))]
            ])
            builder_2.attach(InlineKeyboardBuilder.from_markup(markup))

        print(
            f"Creating szo button with data: {json.dumps({'type': 'szoreg_info', 'chat_id': message.chat.id})}")
        print(
            f"Creating school button with data: {json.dumps({'type': 'school_info', 'chat_id': message.chat.id})}")

        if markup != None:
            await message.answer("–¥–æ–ø –∏–Ω—Ñ–æ", reply_markup=builder_2.as_markup())

        else:
            await bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    except ValueError:

        await bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {}.'.format(len(found_values)))


@main_router.message(F.text == "–ø—Ä–∏–≤–µ—Ç")
async def hello(message: types.Message):
    await message.answer("–Ø —Å —Ç–æ–±–æ–π –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é!")


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /start)


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –∏—Ç–æ–≥–∞–º–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –£–¶–ù 2024 (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /votes)
@main_router.message(Command("votes"))
async def send_votes(message: types.Message):
    from main import bot
    from google_connections import get_votes_data
    try:
        gc, spreadsheet = await get_authorized_client_and_spreadsheet()
        data = await get_votes_data(spreadsheet)
        excel_data = create_excel_file_2(data)  # —É–±—Ä–∞–ª–∏ headers –∑–¥–µ—Å—å
        await log_user_data_from_message(message)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Excel –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as temp:
            temp.write(excel_data.read())
            temp_filename = temp.name

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        final_filename = "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –£–¶–ù 2_0 2024.xlsx"
        shutil.move(temp_filename, final_filename)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(final_filename, "rb") as temp:
            await bot.send_document(message.chat.id, temp, caption='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –£–¶–ù 2.0 2024')

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(final_filename)

    except Exception as e:
        tb = traceback.format_exc()  # –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞
        # –ü–µ—á–∞—Ç–∞–µ—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞
        print("An error occurred while handling /votes:", tb)
        # –í–∫–ª—é—á–∞–µ—Ç –æ—à–∏–±–∫—É –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞ –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}\n{tb}')


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã /otpusk


@main_router.message(Command('otpusk'))
async def handle_otpusk_command(message: types.Message, days_ahead=30):
    
    await bot.send_message(message.chat.id, 'üèù–ó–∞–≥—Ä—É–∂–∞—éÔ∏è')
    await log_user_data_from_message(message)
    otpusk_data = await load_otpusk_data()

    employees_on_vacation, employees_starting_vacation_soon = get_employees_on_vacation(
        otpusk_data, days_ahead)

    response = ""

    if employees_on_vacation:
        response += '*–°–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ*üòé\n\n'
        for row in employees_on_vacation:
            response += f"{row[0]}, {row[1]}\n"
            response += f"  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: {row[3]}\n"
            response += f"  - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: {row[4]}\n\n"

    if employees_starting_vacation_soon:
        response += f"\n*–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —É—Ö–æ–¥—è—â–∏–µ –≤ –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ {days_ahead} –¥–Ω–µ–π*\n\n"
        for emp_row in employees_starting_vacation_soon:
            response += f"{emp_row[0]}, {emp_row[1]}\n"
            response += f"  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: {emp_row[3]}\n"
            response += f"  - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: {emp_row[4]}\n\n"

    if not response:
        response = "–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –≤ –æ—Ç–ø—É—Å–∫–µ, –∏ –Ω–∏–∫—Ç–æ –Ω–µ —É—Ö–æ–¥–∏—Ç –≤ –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π."

    messages = split_message(response)

    for msg in messages:

        await bot.send_message(message.chat.id, msg, parse_mode='Markdown')


'''
async def handle_additional_info(query):
    from main import bot
    chat_id = json.loads(query.data)["chat_id"]
    if chat_id in additional_info_storage:
        response = additional_info_storage[chat_id]
        messages = split_message(response)
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                await bot.send_message(chat_id, msg, parse_mode='Markdown')

        await bot.answer_callback_query(query.id)
    else:
        await bot.answer_callback_query(query.id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
'''


@main_router.callback_query(F.data.contains("school"))
async def handle_schools_info(query):
    data = json.loads(query.data)
    print(f"Received callback school data: {data}")
    from main import bot
    chat_id = json.loads(query.data)["chat_id"]
    if chat_id in schools_info_storage:
        response = schools_info_storage[chat_id]
        messages = split_message(response)
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                await bot.send_message(chat_id, msg, parse_mode='HTML')

        await bot.answer_callback_query(query.id)
    else:
        await bot.answer_callback_query(query.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —à–∫–æ–ª–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


@main_router.callback_query(F.data.contains("survey"))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext ):
    from main import bot
    
    data = await state.get_data()
    print(f'data in multipl: {data}')
    
    
    np = data['np']
    
        
    await state.set_state(Survey.tele2_level)


    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="4G", callback_data="tele2_4g"),
        InlineKeyboardButton(text="3G", callback_data="tele2_3g"),
        InlineKeyboardButton(text="2G", callback_data="tele2_2g")],
        [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="tele2_none"),
        InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é", callback_data="tele2_unknown")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞
    await bot.send_animation(chat_id=query.message.chat.id, 
                         animation=tele2_id, 
                         caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ Tele2:", 
                         reply_markup=markup)

@main_router.callback_query(F.data.startswith("tele2"), StateFilter(Survey.tele2_level))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext ):
    await state.update_data(tele2_level=query.data.split("_")[1])
  #  print(f'data –≤ tele2_level: {data}')
    data = await state.get_data()
    
    user_id = query.from_user.id
    message_id=query.message.message_id
    survey_data = {
        "tele2_level": data.get("tele2_level"),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    }
   # survey_data = await state.update_data(tele2_level=query.data.split("_")[1])
    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    await state.set_state(Survey.tele2_quality)
    

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∏–∑–∫–æ–µ", callback_data="tele2_quality_low"),
        InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ–µ", callback_data="tele2_quality_mid"),
        InlineKeyboardButton(text="–•–æ—Ä–æ—à–µ–µ", callback_data="tele2_quality_good")],
        [InlineKeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", callback_data="tele2_quality_unknown")]
    ])

    #await query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ Tele2:", reply_markup=markup)
    try:
        # Attempt to edit the caption of the message
        await bot.edit_message_caption(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    caption="–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –¢–µ–ª–µ2",
                                    reply_markup=markup)
    except Exception as e:
        print(f"Failed to edit message caption: {str(e)}")
    



@main_router.callback_query(F.data.startswith("tele2_quality"), StateFilter(Survey.tele2_quality))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext ):
    
    await state.update_data(tele2_quality=query.data.split("_")[2])
    data = await state.get_data()
  #  print(f'data –≤ t2_quality: {data}')
    user_id = query.from_user.id
    survey_data = {
        "tele2_quality": data.get("tele2_quality"),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    }
    print(f'survey_data –≤ tele2_quality {survey_data}')
   # survey_data = await state.update_data(tele2_level=query.data.split("_")[1])
    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    await state.set_state(Survey.mts_level)
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="4G", callback_data="mts_4g"),
        InlineKeyboardButton(text="3G", callback_data="mts_3g"),
        InlineKeyboardButton(text="2G", callback_data="mts_2g")],
        [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="mts_none"),
        InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é", callback_data="mts_unknown")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞
    
    try:
        # Attempt to edit the caption of the message
        await bot.send_animation(chat_id=query.message.chat.id, 
                         animation=mts_id, 
                         caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –ú–¢–°:", 
                         reply_markup=markup)
    except Exception as e:
        print(f"Failed to edit message caption: {str(e)}")









@main_router.callback_query(F.data.startswith("mts"), StateFilter(Survey.mts_level))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext ):
    await state.update_data(mts_level=query.data.split("_")[1])
    data = await state.get_data()
  #  print(f'data –≤ mts level: {data}')
    user_id = query.from_user.id
    survey_data = {
        "mts_level": data.get("mts_level"),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    }
   # survey_data = await state.update_data(tele2_level=query.data.split("_")[1])
    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    await state.set_state(Survey.mts_quality)
    

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∏–∑–∫–æ–µ", callback_data="mts_quality_low"),
        InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ–µ", callback_data="mts_quality_mid"),
        InlineKeyboardButton(text="–•–æ—Ä–æ—à–µ–µ", callback_data="mts_quality_good")],
        [InlineKeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", callback_data="mts_quality_unknown")]
    ])

    try:
        # Attempt to edit the caption of the message
        await bot.edit_message_caption(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    caption="–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –ú–¢–°",
                                    reply_markup=markup)
    except Exception as e:
        print(f"Failed to edit message caption: {str(e)}")


@main_router.callback_query(F.data.startswith("mts_quality"), StateFilter(Survey.mts_quality))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext ):
    await state.update_data(mts_quality=query.data.split("_")[2])
    data = await state.get_data()
    
 #   print(f'data –≤ mts_quality: {data}')
    user_id = query.from_user.id
    survey_data = {
        "mts_quality": data.get("mts_quality"),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    }
   # survey_data = await state.update_data(tele2_level=query.data.split("_")[1])
    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    await state.set_state(Survey.megafon_level)
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)


    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="4G", callback_data="megafon_4g"),
        InlineKeyboardButton(text="3G", callback_data="megafon_3g"),
        InlineKeyboardButton(text="2G", callback_data="megafon_2g")],
        [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="megafon_none"),
        InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é", callback_data="megafon_unknown")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞
    
    try:
        # Attempt to edit the caption of the message
        await bot.send_animation(chat_id=query.message.chat.id, 
                         animation=megafon_id, 
                         caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –ú–µ–≥–∞—Ñ–æ–Ω:", 
                         reply_markup=markup)
    except Exception as e:
        print(f"Failed to edit message caption: {str(e)}")


@main_router.callback_query(F.data.startswith("megafon"), StateFilter(Survey.megafon_level))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext ):
    await state.update_data(megafon_level=query.data.split("_")[1])
    data = await state.get_data()
  #  print(f'data –≤ megafon_level: {data}')
    user_id = query.from_user.id
    survey_data = {
        "megafon_level": data.get("megafon_level"),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    }
    
    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    await state.set_state(Survey.megafon_quality)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∏–∑–∫–æ–µ", callback_data="megafon_quality_low"),
        InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ–µ", callback_data="megafon_quality_mid"),
        InlineKeyboardButton(text="–•–æ—Ä–æ—à–µ–µ", callback_data="megafon_quality_good")],
        [InlineKeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", callback_data="megafon_quality_unknown")]
    ])

    try:
        # Attempt to edit the caption of the message
        await bot.edit_message_caption(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    caption="–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –ú–µ–≥–∞—Ñ–æ–Ω",
                                    reply_markup=markup)
    except Exception as e:
        print(f"Failed to edit message caption: {str(e)}")


@main_router.callback_query(F.data.startswith("megafon_quality"), StateFilter(Survey.megafon_quality))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext ):
    await state.update_data(megafon_quality=query.data.split("_")[2])
    data = await state.get_data()
  #  print(f'data –≤ megafon_quality: {data}')
    
    
    user_id = query.from_user.id
    survey_data = {
        "megafon_quality": data.get("megafon_quality"),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    }
   # survey_data = await state.update_data(tele2_level=query.data.split("_")[1])
    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    await state.set_state(Survey.beeline_level)

    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)



    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="4G", callback_data="beeline_4g"),
        InlineKeyboardButton(text="3G", callback_data="beeline_3g"),
        InlineKeyboardButton(text="2G", callback_data="beeline_2g")],
        [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="beeline_none"),
        InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é", callback_data="beeline_unknown")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞
    #CgACAgIAAxkBAAKO2WY0XeYvkJTECxFtYXIyzr7ZMmTTAALcTAAC7Y2gSQJWxCwQ2DtvNAQ
    #CgACAgIAAxkBAAKO12Y0XdG8exa0B19UHY15jEDLZpoYAALRTAAC7Y2gSU01Fs6vmKdjNAQ
    try:
        # Attempt to edit the caption of the message
        await bot.send_animation(chat_id=query.message.chat.id, 
                         animation=beeline_id, 
                         caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –ë–∏–ª–∞–π–Ω:", 
                         reply_markup=markup)
    except Exception as e:
        print(f"Failed to edit message caption: {str(e)}")


@main_router.callback_query(F.data.startswith("beeline"), StateFilter(Survey.beeline_level))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext ):
    await state.update_data(beeline_level=query.data.split("_")[1])
    data = await state.get_data()
   # print(f'data –≤ beeline_level: {data}')
    user_id = query.from_user.id
    survey_data = {
        "beeline_level": data.get("beeline_level"),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    }
   # survey_data = await state.update_data(tele2_level=query.data.split("_")[1])
    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    await state.set_state(Survey.beeline_quality)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∏–∑–∫–æ–µ", callback_data="beeline_quality_low"),
        InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ–µ", callback_data="beeline_quality_mid"),
        InlineKeyboardButton(text="–•–æ—Ä–æ—à–µ–µ", callback_data="beeline_quality_good")],
        [InlineKeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", callback_data="beeline_quality_unknown")]
    ])

    try:
        # Attempt to edit the caption of the message
        await bot.edit_message_caption(chat_id=query.message.chat.id,
                                    message_id=query.message.message_id,
                                    caption="–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –ë–∏–ª–∞–π–Ω",
                                    reply_markup=markup)
    except Exception as e:
        print(f"Failed to edit message caption: {str(e)}")


@main_router.callback_query(F.data.startswith("beeline_quality"), StateFilter(Survey.beeline_quality))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext ):
    await state.update_data(beeline_quality=query.data.split("_")[2])
    data = await state.get_data()
   # print(f'data –≤ beeline_quality: {data}')
   
    
    
    user_id = query.from_user.id
    survey_data = {
        "beeline_quality": data.get("beeline_quality"),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    }
   # survey_data = await state.update_data(tele2_level=query.data.split("_")[1])
    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    await state.clear()
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

    builder_loc = ReplyKeyboardBuilder()

    builder_loc.button(text='–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π', request_location=True)
  
    
    keyboard_loc = builder_loc.as_markup(resize_keyboard=True, one_time_keyboard=True)
    
    await query.message.answer("–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º üòä \n (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞)", reply_markup=keyboard_loc)








  #  await bot.answer_callback_query(query.id, f'–Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞: {np}')

@main_router.callback_query(F.data.contains("szore"))
async def handle_szoreg_info(query: types.CallbackQuery):
    data = json.loads(query.data)
    print(f"Received szo callback data: {data}")
    try:

        print("–î–∞–Ω–Ω—ã–µ –∏–∑ callback_data:", data)
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        await query.bot.answer_callback_query(query.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    chat_id = data["chat_id"]
    if chat_id not in szoreg_info_storage:
        print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")
        await query.bot.answer_callback_query(query.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    response = szoreg_info_storage[chat_id]
    messages = split_message(response)

    try:
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():
                await query.bot.send_message(chat_id, msg, parse_mode='HTML')
        await query.bot.answer_callback_query(query.id, "–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

        print("–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

    except Exception as e:
        await query.bot.answer_callback_query(query.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        print(
            f"Exception: {e} Callback query didn't answer for chat ID {chat_id}")


async def create_individual_radar_chart(chat_id, data_df, title):
    print("create_individual_radar_chart called with data:", data_df)
    from main import bot
    # –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
    img_width, img_height = 1000, 600
    img = Image.new('RGB', (img_width, img_height), 'white')
    draw = ImageDraw.Draw(img)

    # –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title_font_path = "fonts/ofont.ru_Geologica.ttf"
    title_font = ImageFont.truetype(title_font_path, 30)
    text_font = ImageFont.truetype(title_font_path, 18)

    title_bbox = draw.textbbox((0, 0), title, font=title_font)
    title_width, title_height = title_bbox[2] - \
        title_bbox[0], title_bbox[3] - title_bbox[1]
    draw.text(((img_width - title_width) // 2, 20),
              title, fill="black", font=title_font)

    # –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø—ã –∏ —É–º–µ–Ω—å—à–∏—Ç–µ –∏—Ö
    logo_paths = [
        'logos/tele2_1.png',
        'logos/megafon_1.png',
        'logos/beeline_1.png',
        'logos/mts_1.png',
    ]

    logos = []
    # –£–º–µ–Ω—å—à–∞–µ–º –ú–¢–° –≤ 3 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ë–∏–ª–∞–π–Ω –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
    resize_factors = [0.1, 0.1, 0.1*2, 0.1/3]
    for i, path in enumerate(logo_paths):
        logo = Image.open(path)
        logo_width, logo_height = logo.size
        logos.append(logo.resize(
            (int(logo_width * resize_factors[i]), int(logo_height * resize_factors[i]))))

    # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø—ã
    column_width = img_width // 4
    for i, logo in enumerate(logos):
        x = column_width * i + (column_width - logo.width) // 2
        y = 100
        if i in [1, 2]:  # –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ë–∏–ª–∞–π–Ω –∏ –ú–µ–≥–∞—Ñ–æ–Ω
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
            logo_img = Image.new(
                'RGBA', (img_width, img_height), (255, 255, 255, 0))
            logo_img.paste(logo, (x, y))

            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.alpha_composite(
                img.convert('RGBA'), logo_img).convert('RGB')
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö
            img.paste(logo, (x, y))

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç draw –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    draw = ImageDraw.Draw(img)

    # –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ data_df –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
    operator_columns = [
        ('–£—Ä–æ–≤–µ–Ω—å_Tele2', '–ö–∞—á–µ—Å—Ç–≤–æ_Tele2'),
        ('–£—Ä–æ–≤–µ–Ω—å_Megafon', '–ö–∞—á–µ—Å—Ç–≤–æ_Megafon'),
        ('–£—Ä–æ–≤–µ–Ω—å_Beeline', '–ö–∞—á–µ—Å—Ç–≤–æ_Beeline'),
        ('–£—Ä–æ–≤–µ–Ω—å_MTS', '–ö–∞—á–µ—Å—Ç–≤–æ_MTS')
    ]

    y_start = y + logos[0].height + 20
    y_step = 20

    for idx, row_series in data_df.iterrows():
        for i, (level_column, quality_column) in enumerate(operator_columns):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            if pd.notnull(row_series[level_column]) or pd.notnull(row_series[quality_column]):
                text = f"{row_series.get(level_column, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} {row_series.get(quality_column, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
            else:
                text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            x = column_width * i + (column_width - logos[i].width) // 2
            y_text = y_start + idx * y_step

            draw.text((x, y_text), text, fill="black", font=text_font)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    temp_file_path = "temp_survey_result.png"
    img.save(temp_file_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_photo(chat_id, open(temp_file_path, 'rb'))

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(temp_file_path)
