from datetime import datetime
import json
from zoneinfo import ZoneInfo
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types, Router, F
from additional import split_message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import Message
from animations_providers import (megafon_id, mts_id, tele2_id, beeline_id)
from mongo_connect import save_survey_results, search_survey_results
from main import bot
from images import default_profile


main_router = Router()

class Survey(StatesGroup):
    tele2_level = State()
    tele2_quality = State()
    megafon_level = State()
    megafon_quality = State()
    mts_level = State()
    mts_quality = State()
    beeline_level = State()
    beeline_quality = State()


from handlers import additional_info_storage, szoreg_info_storage, schools_info_storage, message_storage, survey_data_storage, response_storage



@main_router.callback_query(F.data.in["szoreg_info", "2_szoreg_info"])
async def handle_schools_info(query):
    data = json.loads(query.data)

    from main import bot
    chat_id = json.loads(query.data)["chat_id"]
    if chat_id in schools_info_storage:
        response = schools_info_storage[chat_id]
        messages = split_message(response)
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                await bot.send_message(chat_id, msg, parse_mode='HTML')

        await bot.answer_callback_query(query.id)
    else:
        await bot.answer_callback_query(query.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —à–∫–æ–ª–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


@main_router.callback_query(F.data == "start_survey")
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext):
    from main import bot

    data = await state.get_data()

    np = data['np']

    await state.set_state(Survey.tele2_level)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="4G", callback_data="tele2_4g"),
         InlineKeyboardButton(text="3G", callback_data="tele2_3g"),
         InlineKeyboardButton(text="2G", callback_data="tele2_2g")],
        [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="tele2_none"),
         InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é", callback_data="tele2_unknown")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞
    await bot.send_animation(chat_id=query.message.chat.id,
                             animation=tele2_id,
                             caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ Tele2:",
                             reply_markup=markup)


@main_router.callback_query(F.data.contains("survey_res"))
async def handle_show_survey_results(query: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()
    np = data['np']
    survey_res = await search_survey_results(np)
    builder = InlineKeyboardBuilder()
    survey_results_dict = {}
    for item in survey_res:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
        user_id = item['user_id']
        # user_info = f"ID {item['user_id']}: Tele2 {item['tele2_level']} {item['tele2_quality']}, MTS {item['mts_level']}"
        builder.button(text=f"üè¢ {item['first_name']}",
                       callback_data=f"detailed_survey_data:{item['user_id']}")
        builder.adjust(2)
        survey_results_dict[user_id] = item

    await state.update_data(survey_results_dict=survey_results_dict)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
    keyboard = builder.as_markup()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await query.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=keyboard)


@main_router.callback_query(F.data.contains("detailed_survey_data"))
async def show_user_data(query: types.CallbackQuery, state: FSMContext):
    user_id = query.data.split(":")[1]
    data = await state.get_data()

    survey_results_dict = data.get('survey_results_dict', {})
    survey_results = survey_results_dict.get(user_id)

    if survey_results:
        response_text = (
            f"<b>{survey_results['first_name']} {survey_results['last_name']}</b>\n\n"
            f"–ù–∏–∫–Ω–µ–π–º: @{survey_results['username']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {survey_results['contact']}\n"

            f"Tele2: {survey_results['tele2_level']} {survey_results['tele2_quality']}\n"
            f"–ú–¢–°: {survey_results['mts_level']} {survey_results['mts_quality']}\n"
            f"–ú–µ–≥–∞—Ñ–æ–Ω: {survey_results['megafon_level']} {survey_results['megafon_quality']}\n"
            f"–ë–∏–ª–∞–π–Ω: {survey_results['beeline_level']} {survey_results['beeline_quality']}\n\n"
            f"{survey_results['time']}"

        )
    else:
        response_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    await query.message.answer_photo(protect_content=True, photo=default_profile, caption=response_text, parse_mode='HTML')


@main_router.callback_query(F.data.startswith("tele2"), StateFilter(Survey.tele2_level))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext):
    await state.update_data(tele2_level=query.data.split("_")[1])
    data = await state.get_data()

    selected_option = query.data.split("_")[1]
    user_id = query.from_user.id
    first_name = query.from_user.first_name
    last_name = query.from_user.last_name
    username = query.from_user.username
    survey_time = datetime.now().astimezone(
        ZoneInfo("Asia/Krasnoyarsk")).strftime("%Y-%m-%d %H:%M:%S")
    survey_data = {
        "first_name": first_name,
        "last_name": last_name,
        "username": username,
        "time": survey_time,
        "tele2_level": data.get("tele2_level"),

    }

    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    if selected_option == "none":
        np = data['np']

        await state.set_state(Survey.mts_level)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="4G", callback_data="mts_4g"),
             InlineKeyboardButton(text="3G", callback_data="mts_3g"),
             InlineKeyboardButton(text="2G", callback_data="mts_2g")],
            [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="mts_none"),
             InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é", callback_data="mts_unknown")]
        ])

        try:

            await bot.send_animation(chat_id=query.message.chat.id,
                                     animation=mts_id,
                                     caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –ú–¢–°:",
                                     reply_markup=markup)
        except Exception as e:
            print(f"Failed to edit message caption: {str(e)}")

            return
    else:

        await state.set_state(Survey.tele2_quality)

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∏–∑–∫–æ–µ", callback_data="tele2_quality_low"),
             InlineKeyboardButton(
                 text="–°—Ä–µ–¥–Ω–µ–µ", callback_data="tele2_quality_mid"),
             InlineKeyboardButton(text="–•–æ—Ä–æ—à–µ–µ", callback_data="tele2_quality_good")],
            [InlineKeyboardButton(
                text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", callback_data="tele2_quality_unknown")]
        ])

        try:

            await bot.edit_message_caption(chat_id=query.message.chat.id,
                                           message_id=query.message.message_id,
                                           caption="–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –¢–µ–ª–µ2",
                                           reply_markup=markup)
        except Exception as e:
            print(f"Failed to edit message caption: {str(e)}")


@main_router.callback_query(F.data.startswith("tele2_quality"), StateFilter(Survey.tele2_quality))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext):

    await state.update_data(tele2_quality=query.data.split("_")[2])
    data = await state.get_data()

    user_id = query.from_user.id
    survey_data = {
        "tele2_quality": data.get("tele2_quality"),

    }
    print(f'survey_data –≤ tele2_quality {survey_data}')

    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    await state.set_state(Survey.mts_level)
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="4G", callback_data="mts_4g"),
         InlineKeyboardButton(text="3G", callback_data="mts_3g"),
         InlineKeyboardButton(text="2G", callback_data="mts_2g")],
        [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="mts_none"),
         InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é", callback_data="mts_unknown")]
    ])

    try:

        await bot.send_animation(chat_id=query.message.chat.id,
                                 animation=mts_id,
                                 caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –ú–¢–°:",
                                 reply_markup=markup)
    except Exception as e:
        print(f"Failed to edit message caption: {str(e)}")


@main_router.callback_query(F.data.startswith("mts"), StateFilter(Survey.mts_level))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext):
    await state.update_data(mts_level=query.data.split("_")[1])
    data = await state.get_data()
    selected_option = query.data.split("_")[1]

    np = data['np']
    user_id = query.from_user.id
    survey_data = {
        "mts_level": data.get("mts_level"),

    }
    await save_survey_results(np, user_id, survey_data)
    if selected_option == 'none':

        await state.set_state(Survey.megafon_level)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="4G", callback_data="megafon_4g"),
             InlineKeyboardButton(text="3G", callback_data="megafon_3g"),
             InlineKeyboardButton(text="2G", callback_data="megafon_2g")],
            [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="megafon_none"),
             InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é", callback_data="megafon_unknown")]
        ])

        try:

            await bot.send_animation(chat_id=query.message.chat.id,
                                     animation=megafon_id,
                                     caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –ú–µ–≥–∞—Ñ–æ–Ω:",
                                     reply_markup=markup)
        except Exception as e:
            print(f"Failed to edit message caption: {str(e)}")

    else:

        await state.set_state(Survey.mts_quality)

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∏–∑–∫–æ–µ", callback_data="mts_quality_low"),
             InlineKeyboardButton(
                 text="–°—Ä–µ–¥–Ω–µ–µ", callback_data="mts_quality_mid"),
             InlineKeyboardButton(text="–•–æ—Ä–æ—à–µ–µ", callback_data="mts_quality_good")],
            [InlineKeyboardButton(
                text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", callback_data="mts_quality_unknown")]
        ])

        try:

            await bot.edit_message_caption(chat_id=query.message.chat.id,
                                           message_id=query.message.message_id,
                                           caption="–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –ú–¢–°",
                                           reply_markup=markup)
        except Exception as e:
            print(f"Failed to edit message caption: {str(e)}")


@main_router.callback_query(F.data.startswith("mts_quality"), StateFilter(Survey.mts_quality))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext):
    await state.update_data(mts_quality=query.data.split("_")[2])
    data = await state.get_data()
    np = data['np']
    user_id = query.from_user.id
    survey_data = {
        "mts_quality": data.get("mts_quality"),

    }
    await save_survey_results(np, user_id, survey_data)

    await state.set_state(Survey.megafon_level)
    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="4G", callback_data="megafon_4g"),
            InlineKeyboardButton(text="3G", callback_data="megafon_3g"),
            InlineKeyboardButton(text="2G", callback_data="megafon_2g")],
        [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="megafon_none"),
            InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é", callback_data="megafon_unknown")]
    ])

    try:

        await bot.send_animation(chat_id=query.message.chat.id,
                                 animation=megafon_id,
                                 caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –ú–µ–≥–∞—Ñ–æ–Ω:",
                                 reply_markup=markup)
    except Exception as e:
        print(f"Failed to edit message caption: {str(e)}")


@main_router.callback_query(F.data.startswith("megafon"), StateFilter(Survey.megafon_level))
async def megafon_level_survey(query: types.CallbackQuery, state: FSMContext):
    await state.update_data(megafon_level=query.data.split("_")[1])
    data = await state.get_data()

    user_id = query.from_user.id
    survey_data = {
        "megafon_level": data.get("megafon_level"),

    }

    np = data['np']
    selected_option = query.data.split("_")[1]

    await save_survey_results(np, user_id, survey_data)
    if selected_option == 'none':
        np = data['np']

        await state.set_state(Survey.beeline_level)

        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="4G", callback_data="beeline_4g"),
             InlineKeyboardButton(text="3G", callback_data="beeline_3g"),
             InlineKeyboardButton(text="2G", callback_data="beeline_2g")],
            [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="beeline_none"),
             InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é", callback_data="beeline_unknown")]
        ])

        try:

            await bot.send_animation(chat_id=query.message.chat.id,
                                     animation=beeline_id,
                                     caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –ë–∏–ª–∞–π–Ω:",
                                     reply_markup=markup)
        except Exception as e:
            print(f"Failed to edit message caption: {str(e)}")

    else:
        await state.set_state(Survey.megafon_quality)

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∏–∑–∫–æ–µ", callback_data="megafon_quality_low"),
             InlineKeyboardButton(
                text="–°—Ä–µ–¥–Ω–µ–µ", callback_data="megafon_quality_mid"),
             InlineKeyboardButton(text="–•–æ—Ä–æ—à–µ–µ", callback_data="megafon_quality_good")],
            [InlineKeyboardButton(text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å",
                                  callback_data="megafon_quality_unknown")]
        ])

        try:

            await bot.edit_message_caption(chat_id=query.message.chat.id,
                                           message_id=query.message.message_id,
                                           caption="–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –ú–µ–≥–∞—Ñ–æ–Ω",
                                           reply_markup=markup)
        except Exception as e:
            print(f"Failed to edit message caption: {str(e)}")


@main_router.callback_query(F.data.startswith("megafon_quality"), StateFilter(Survey.megafon_quality))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext):
    await state.update_data(megafon_quality=query.data.split("_")[2])
    data = await state.get_data()

    user_id = query.from_user.id
    survey_data = {
        "megafon_quality": data.get("megafon_quality"),

    }

    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    await state.set_state(Survey.beeline_level)

    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="4G", callback_data="beeline_4g"),
         InlineKeyboardButton(text="3G", callback_data="beeline_3g"),
         InlineKeyboardButton(text="2G", callback_data="beeline_2g")],
        [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data="beeline_none"),
         InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é", callback_data="beeline_unknown")]
    ])

    try:

        await bot.send_animation(chat_id=query.message.chat.id,
                                 animation=beeline_id,
                                 caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –ë–∏–ª–∞–π–Ω:",
                                 reply_markup=markup)
    except Exception as e:
        print(f"send_animation: {str(e)}")


@main_router.callback_query(F.data.startswith("beeline"), StateFilter(Survey.beeline_level))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext):
    await state.update_data(beeline_level=query.data.split("_")[1])
    data = await state.get_data()
    selected_option = query.data.split("_")[1]
    user_id = query.from_user.id
    survey_data = {
        "beeline_level": data.get("beeline_level"),

    }

    np = data['np']
    await save_survey_results(np, user_id, survey_data)
    if selected_option == 'none':

        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        builder_loc = ReplyKeyboardBuilder()

        builder_loc.row(types.KeyboardButton(text='–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π', request_location=True),
                        types.KeyboardButton(text='–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True))

        keyboard_loc = builder_loc.as_markup(
            resize_keyboard=True, one_time_keyboard=True)

        await query.message.answer("–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –Ω–∞–º–∏ üòä \n (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞)", reply_markup=keyboard_loc)

    else:

        await state.set_state(Survey.beeline_quality)

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∏–∑–∫–æ–µ", callback_data="beeline_quality_low"),
             InlineKeyboardButton(
                 text="–°—Ä–µ–¥–Ω–µ–µ", callback_data="beeline_quality_mid"),
             InlineKeyboardButton(text="–•–æ—Ä–æ—à–µ–µ", callback_data="beeline_quality_good")],
            [InlineKeyboardButton(
                text="–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", callback_data="beeline_quality_unknown")]
        ])

        try:
            # Attempt to edit the caption of the message
            await bot.edit_message_caption(chat_id=query.message.chat.id,
                                           message_id=query.message.message_id,
                                           caption="–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –ë–∏–ª–∞–π–Ω",
                                           reply_markup=markup)
        except Exception as e:
            print(f"Failed to edit message caption: {str(e)}")


@main_router.callback_query(F.data.startswith("beeline_quality"), StateFilter(Survey.beeline_quality))
async def handle_survey_chart(query: types.CallbackQuery, state: FSMContext):
    await state.update_data(beeline_quality=query.data.split("_")[2])
    data = await state.get_data()

    user_id = query.from_user.id
    survey_data = {
        "beeline_quality": data.get("beeline_quality"),

    }

    np = data['np']
    await save_survey_results(np, user_id, survey_data)

    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)

    builder_loc = ReplyKeyboardBuilder()

    builder_loc.row(types.KeyboardButton(text='–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π', request_location=True),
                    types.KeyboardButton(text='–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True))

    keyboard_loc = builder_loc.as_markup(
        resize_keyboard=True, one_time_keyboard=True)

    await query.message.answer("–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –Ω–∞–º–∏ üòä \n (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞)", reply_markup=keyboard_loc)

  #  await bot.answer_callback_query(query.id, f'–Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞: {np}')


@main_router.callback_query(F.data.contains("szore"))
async def handle_szoreg_info(query: types.CallbackQuery):
    data = json.loads(query.data)
    print(f"Received szo callback data: {data}")
    try:

        print("–î–∞–Ω–Ω—ã–µ –∏–∑ callback_data:", data)
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        await query.bot.answer_callback_query(query.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    chat_id = data["chat_id"]
    if chat_id not in szoreg_info_storage:
        print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ szore.")
        await query.bot.answer_callback_query(query.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    response = szoreg_info_storage[chat_id]
    messages = split_message(response)

    try:
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():
                await query.bot.send_message(chat_id, msg, parse_mode='HTML')
        await query.bot.answer_callback_query(query.id, "–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

        print("–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

    except Exception as e:
        await query.bot.answer_callback_query(query.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        print(
            f"Exception: {e} Callback query didn't answer for chat ID {chat_id}")
