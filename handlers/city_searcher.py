from aiogram.types import Message
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
import pandas as pd
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete, or_
from sqlalchemy.dialects.postgresql import insert
from icecream import ic
from database.models import Cities, Espd





city_router = Router()

@city_router.message(F.chat.type == 'private')
async def handle_city_search(message: Message, state: FSMContext, session: AsyncSession, city_ids: List[int]):
    

    cities_query = select(Cities.city_full_name, Cities.selsovet, Cities.population_2010, Cities.population_2020,
                            Cities.television, Cities.beeline_level, Cities.beeline_quality, Cities.megafon_level,
                            Cities.megafon_quality, Cities.mts_level, Cities.mts_quality, Cities.tele2_level, Cities.tele2_quality,
                            Cities.taksophone_address, Cities.subsid_operator, Cities.subsid_year, Cities.date_of_update_ucn2023,
                            Cities.rank_ucn2023, Cities.number_of_votes_ucn2023, Cities.same_number_of_votes_ucn2023,
                            Cities.latitude, Cities.longitude, Cities.internet, Cities.arctic_zone)  \
                    .where(Cities.city_id.in_(city_ids))
        
    cities_result = await session.execute(cities_query)
    response_cities = cities_result.all()
    main_df = pd.DataFrame(response_cities)
    main_df = main_df.reset_index()
    if not main_df.empty:
        for i, row in main_df.iterrows():
            row.fillna('')
            main_response = f'<b>{row['city_full_name']}</b>\n'
            if row['selsovet'] != None:
                main_response += f'{row['selsovet']}\n\n'
            if row['arctic_zone'] == True:
                main_response += '‚ùÑÔ∏è–ê—Ä–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞‚ùÑÔ∏è\n\n'   
            main_response += f'üë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2010 –≥: {row['population_2010']}\n'
            main_response += f'üë•–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2020 –≥: {row['population_2020']}\n'
            if row['television'] != None:
                main_response += f'—Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ: {row['television']}\n'
            if row['taksophone_address'] != None:
                main_response += f'—Ç–∞–∫—Å–æ—Ñ–æ–Ω: {row['taksophone_address']}\n'    
            main_response += '\n<pre>'
            main_response += '\nüì±–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:\n'
            
            if row['tele2_level'] != None:
                main_response += f'–¢–µ–ª–µ2: {row['tele2_level']} {row['tele2_quality']}\n'
            
            if row['mts_level'] != None:
                main_response += f'–ú–¢–°: {row['mts_level']} {row['mts_quality']}\n'
                
            if row['megafon_level'] != None:
                main_response += f'–ú–µ–≥–∞—Ñ–æ–Ω: {row['megafon_level']} {row['megafon_quality']}\n'
                
            if row['beeline_level'] != None:
                main_response += f'–ë–∏–ª–∞–π–Ω: {row['beeline_level']} {row['beeline_quality']}\n'
            
            if row['tele2_level'] == None and row['mts_level'] == None and row['megafon_level'] == None and row['beeline_level'] == None:
                main_response += '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n'
            main_response += '</pre>'
            if row['subsid_operator'] != None:
                main_response += (f'\n\n–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã–π "–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞"'
                                f'–≤ {row['subsid_year']} –≥–æ–¥—É, –æ–ø–µ—Ä–∞—Ç–æ—Ä {row['subsid_operator']}\n')
                
            if row['rank_ucn2023'] != None:
                main_response += f'\n\n<b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –£–¶–ù 2024</b>\nhttps://www.gosuslugi.ru/inet\n\n–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: <b>{row['number_of_votes_ucn2023']} </b>'
                main_response += f'(—Ç–∞–∫–æ–µ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n–≥–æ–ª–æ—Å–æ–≤ –∏–º–µ—é—Ç {row['same_number_of_votes_ucn2023']} –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)'
                main_response += f'\nüèÜ–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ {row['rank_ucn2023']}\n'   
            
        await message.answer(text=main_response, parse_mode='HTML')
    
    
    
    ic(city_ids)
    ic(city_ids[0])
    espd_query = select(Espd.functional_customer, Espd.name_of_institution, Espd.addres, Espd.technology_type,
                        Espd.internet_speed, Espd.contract, Espd.changes) \
                    .where((Espd.city_id == city_ids[0]) & or_(Espd.changes != '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ', Espd.changes.is_(None)))
    ic(espd_query)            
    espd_result = await session.execute(espd_query)
    response_espd = espd_result.all()
    espd_df = pd.DataFrame(response_espd)
    espd_df = espd_df.reset_index()
    espd_info = ''
    if not espd_df.empty:
        espd_info += 'üè¢–£—á—Ä–µ–∂–¥–µ–Ω–∏—è, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º–µ\n'
        for i, row in espd_df.iterrows():
            espd_info += f'{i+1}. <b>–¢–∏–ø:</b> {row['functional_customer']}\n<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {row['name_of_institution']}\n'
            espd_info += f'<b>–ê–¥—Ä–µ—Å:</b> {row['addres']}\n<b>–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {row['technology_type']}\n<b>–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</b>'
            espd_info += f'{row['internet_speed']}\n<b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> {row['contract']}'
    ic(espd_info)     
    
            
        
    
    
    
    
    
    
    
    
    
    
    
    
    